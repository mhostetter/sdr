Search.setIndex({"alltitles": {"16-PSK": [[420, "id2"]], "8-PSK": [[420, "id1"]], "Alpha releases": [[425, "alpha-releases"]], "Amplitude control loops": [[405, "amplitude-control-loops"]], "Analyze PLL closed-loop performance": [[419, "analyze-pll-closed-loop-performance"]], "Antennas": [[5, "antennas"]], "Approximated performance": [[2, "approximated-performance"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "BPSK": [[420, "bpsk"]], "Beta releases": [[425, "beta-releases"]], "Bit error rate curves": [[420, "bit-error-rate-curves"]], "Build the docs": [[406, "build-the-docs"]], "Changes": [[424, "changes"], [424, "id1"], [424, "id3"], [424, "id5"], [424, "id7"], [424, "id9"], [424, "id11"], [424, "id13"], [424, "id15"], [424, "id17"], [424, "id19"], [424, "id21"], [424, "id23"], [424, "id25"], [424, "id27"], [424, "id29"], [424, "id31"], [424, "id33"], [424, "id35"], [424, "id37"], [424, "id39"], [424, "id41"], [424, "id43"]], "Channel capacity": [[5, "channel-capacity"]], "Channel models": [[404, "channel-models"]], "Citation": [[423, "citation"]], "Coding": [[0, "coding"]], "Coherent integration": [[2, "coherent-integration"], [410, "coherent-integration"]], "Compare lock time across B_n T": [[419, "compare-lock-time-across-b-n-t"]], "Compare step and frequency response across B_n T": [[419, "compare-step-and-frequency-response-across-b-n-t"]], "Compare step and frequency response across \\zeta": [[419, "compare-step-and-frequency-response-across-zeta"]], "Configuration": [[407, "configuration"], [409, "configuration"]], "Constellations": [[420, "constellations"]], "Construct an input signal, x[n] = x(n T_s)": [[413, "construct-an-input-signal-x-n-x-n-t-s"]], "Constructors": [[10, "constructors"], [19, "constructors"], [24, "constructors"], [32, "constructors"], [40, "constructors"], [42, "constructors"], [56, "constructors"], [62, "constructors"], [67, "constructors"], [84, "constructors"], [88, "constructors"], [90, "constructors"], [101, "constructors"], [108, "constructors"], [125, "constructors"], [139, "constructors"], [149, "constructors"], [151, "constructors"], [164, "constructors"], [181, "constructors"], [183, "constructors"], [190, "constructors"], [193, "constructors"], [195, "constructors"], [211, "constructors"], [220, "constructors"], [228, "constructors"], [230, "constructors"], [232, "constructors"], [240, "constructors"], [242, "constructors"], [248, "constructors"], [254, "constructors"], [256, "constructors"], [278, "constructors"]], "Continuous-phase modulations": [[8, "continuous-phase-modulations"]], "Contributors": [[424, "contributors"], [424, "id2"], [424, "id4"], [424, "id6"], [424, "id8"], [424, "id10"], [424, "id12"], [424, "id14"], [424, "id16"], [424, "id18"], [424, "id20"], [424, "id22"], [424, "id24"], [424, "id26"], [424, "id28"], [424, "id30"], [424, "id32"], [424, "id34"], [424, "id36"], [424, "id38"], [424, "id40"], [424, "id42"], [424, "id44"]], "Conversions": [[1, "conversions"]], "Correlation": [[3, "correlation"]], "Correlation sequences": [[403, "correlation-sequences"]], "Create an FIR filter": [[414, "create-an-fir-filter"]], "Create an IIR filter": [[415, "create-an-iir-filter"]], "Data manipulation": [[7, "data-manipulation"]], "Decibels": [[1, "decibels"]], "Design a proportional-plus-integrator (PPI) loop filter": [[419, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Detect x_1[n]": [[410, "detect-x-1-n"], [417, "detect-x-1-n"]], "Detect x_2[n]": [[410, "detect-x-2-n"], [417, "detect-x-2-n"]], "Detection": [[2, "detection"], [9, "detection"], [411, "detection"]], "Detectors": [[2, "detectors"]], "Digital signal processing": [[3, "digital-signal-processing"], [412, "digital-signal-processing"]], "Distance": [[6, "distance"]], "Documentation": [[406, "documentation"]], "Downsample by an irrational rate": [[413, "downsample-by-an-irrational-rate"]], "Downsample the signal by an integer rate": [[413, "downsample-the-signal-by-an-integer-rate"]], "Editable install from local folder": [[408, "editable-install-from-local-folder"]], "Energy": [[6, "energy"]], "Error rate curves": [[420, "error-rate-curves"]], "Estimation": [[4, "estimation"]], "Examine frequency domain": [[418, "examine-frequency-domain"]], "Examine the frequency response, H(\\omega)": [[414, "examine-the-frequency-response-h-omega"], [415, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[414, "examine-the-group-delay-tau-g-omega"], [415, "examine-the-group-delay-tau-g-omega"]], "Examine the impulse response, h[n]": [[414, "examine-the-impulse-response-h-n"], [415, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[414, "examine-the-step-response-s-n"], [415, "examine-the-step-response-s-n"]], "Examine the zeros and poles": [[415, "examine-the-zeros-and-poles"]], "Examine time domain": [[418, "examine-time-domain"]], "FIR filtering": [[3, "fir-filtering"]], "FIR filters": [[414, "fir-filters"]], "Farrow arbitrary resampler": [[413, "farrow-arbitrary-resampler"]], "Features": [[423, "features"]], "Filter analysis": [[9, "filter-analysis"]], "Filter applications": [[3, "filter-applications"]], "Formatting": [[407, "formatting"]], "Frequency domain": [[4, "frequency-domain"]], "Frequency-domain": [[9, "frequency-domain"]], "Fully analyze a FIR filter": [[414, "fully-analyze-a-fir-filter"]], "Fully analyze an IIR filter": [[415, "fully-analyze-an-iir-filter"]], "Gaussian": [[421, "gaussian"]], "IIR filtering": [[3, "iir-filtering"]], "IIR filters": [[415, "iir-filters"]], "Implement a PLL in the phase domain": [[419, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[419, "implement-a-pll-in-the-time-domain"]], "Install": [[406, "install"], [407, "install"], [409, "install"]], "Install from GitHub": [[408, "install-from-github"]], "Install from PyPI": [[408, "install-from-pypi"]], "Install the dev dependencies": [[408, "install-the-dev-dependencies"]], "Installation": [[408, "installation"], [423, "installation"]], "Interleavers": [[0, "interleavers"]], "Linear modulations": [[8, "linear-modulations"]], "Linear recurrent sequences": [[403, "linear-recurrent-sequences"]], "Link budgets": [[5, "link-budgets"]], "Maximum-length sequences": [[403, "maximum-length-sequences"]], "Measurement": [[6, "measurement"]], "Methods": [[19, "methods"], [24, "methods"], [32, "methods"], [40, "methods"], [42, "methods"], [56, "methods"], [62, "methods"], [67, "methods"], [84, "methods"], [88, "methods"], [90, "methods"], [96, "methods"], [101, "methods"], [108, "methods"], [125, "methods"], [149, "methods"], [151, "methods"], [164, "methods"], [181, "methods"], [183, "methods"], [190, "methods"], [193, "methods"], [195, "methods"], [211, "methods"], [220, "methods"], [228, "methods"], [230, "methods"], [232, "methods"], [240, "methods"], [242, "methods"], [248, "methods"], [254, "methods"], [256, "methods"], [273, "methods"], [278, "methods"]], "Miscellaneous": [[7, "miscellaneous"]], "Modulation": [[6, "modulation"], [8, "modulation"], [9, "modulation"], [416, "modulation"]], "Non-coherent integration": [[2, "non-coherent-integration"], [417, "non-coherent-integration"]], "Note": [[20, null], [67, null], [128, null], [153, null], [292, null], [298, null], [312, null], [313, null], [315, null], [360, null], [368, null], [380, null], [381, null], [392, null], [397, null]], "Orthogonal modulations": [[8, "orthogonal-modulations"]], "Path losses": [[5, "path-losses"]], "Peak-to-average power": [[418, "peak-to-average-power"]], "Phase error detectors": [[405, "phase-error-detectors"]], "Phase-locked loops": [[405, "phase-locked-loops"], [419, "phase-locked-loops"]], "Phase-shift keying": [[420, "phase-shift-keying"]], "Plot across excess bandwidth": [[418, "plot-across-excess-bandwidth"]], "Plotting": [[9, "plotting"]], "Poles and digital filter stability": [[415, "poles-and-digital-filter-stability"]], "Polynomials": [[125, "polynomials"], [151, "polynomials"]], "Polyphase FIR filtering": [[3, "polyphase-fir-filtering"]], "Power": [[6, "power"]], "Pre-commit": [[407, "pre-commit"]], "Probability": [[7, "probability"]], "Properties": [[10, "properties"], [19, "properties"], [24, "properties"], [32, "properties"], [40, "properties"], [42, "properties"], [56, "properties"], [62, "properties"], [67, "properties"], [84, "properties"], [88, "properties"], [90, "properties"], [108, "properties"], [125, "properties"], [139, "properties"], [149, "properties"], [151, "properties"], [164, "properties"], [181, "properties"], [183, "properties"], [190, "properties"], [193, "properties"], [195, "properties"], [211, "properties"], [220, "properties"], [228, "properties"], [230, "properties"], [232, "properties"], [240, "properties"], [242, "properties"], [248, "properties"], [254, "properties"], [256, "properties"], [278, "properties"]], "Pulse shapes": [[421, "pulse-shapes"]], "Pulse shaping": [[8, "pulse-shaping"]], "QPSK": [[420, "qpsk"]], "QPSK signal with various pulse shapes": [[418, "qpsk-signal-with-various-pulse-shapes"]], "Raised cosine": [[421, "raised-cosine"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[413, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Run from VS Code": [[407, "run-from-vs-code"], [409, "run-from-vs-code"]], "Run from the command line": [[409, "run-from-the-command-line"]], "Run the formatter": [[407, "run-the-formatter"]], "Run the linter": [[407, "run-the-linter"]], "Scramblers": [[0, "scramblers"]], "See also": [[20, null], [43, null], [44, null], [53, null], [101, null], [103, null], [114, null], [115, null], [116, null], [119, null], [122, null], [125, null], [128, null], [151, null], [153, null], [170, null], [172, null], [178, null], [196, null], [197, null], [207, null], [229, null], [241, null], [249, null], [250, null], [252, null], [255, null], [271, null], [272, null], [282, null], [299, null], [312, null], [313, null], [318, null], [320, null], [321, null], [328, null], [335, null], [339, null], [343, null], [347, null], [351, null], [352, null], [353, null], [377, null], [380, null], [381, null], [385, null], [386, null], [387, null], [392, null], [397, null], [399, null]], "Sequences": [[403, "sequences"]], "Serve the docs": [[406, "serve-the-docs"]], "Signal impairments": [[404, "signal-impairments"]], "Signal manipulation": [[3, "signal-manipulation"]], "Signal-to-noise ratio": [[4, "signal-to-noise-ratio"]], "Signal-to-noise ratios": [[1, "signal-to-noise-ratios"]], "Simulation": [[404, "simulation"]], "Special methods": [[10, "special-methods"], [24, "special-methods"], [32, "special-methods"], [40, "special-methods"], [56, "special-methods"], [62, "special-methods"], [84, "special-methods"], [88, "special-methods"], [90, "special-methods"], [108, "special-methods"], [125, "special-methods"], [139, "special-methods"], [149, "special-methods"], [164, "special-methods"], [181, "special-methods"], [183, "special-methods"], [190, "special-methods"], [193, "special-methods"], [211, "special-methods"], [220, "special-methods"], [230, "special-methods"], [232, "special-methods"], [242, "special-methods"], [256, "special-methods"], [278, "special-methods"]], "Spectral estimation": [[9, "spectral-estimation"]], "Square-root raised cosine": [[421, "square-root-raised-cosine"]], "State": [[125, "state"], [151, "state"]], "Streaming mode only": [[10, "streaming-mode-only"], [62, "streaming-mode-only"], [84, "streaming-mode-only"], [88, "streaming-mode-only"], [108, "streaming-mode-only"], [139, "streaming-mode-only"], [149, "streaming-mode-only"], [164, "streaming-mode-only"], [181, "streaming-mode-only"], [190, "streaming-mode-only"], [193, "streaming-mode-only"], [230, "streaming-mode-only"], [256, "streaming-mode-only"], [278, "streaming-mode-only"]], "Symbol encoding": [[8, "symbol-encoding"]], "Symbol error rate curves": [[420, "symbol-error-rate-curves"]], "Symbol mapping": [[420, "symbol-mapping"]], "Symbol-mapping sequences": [[403, "symbol-mapping-sequences"]], "Synchronization": [[405, "synchronization"], [422, "synchronization"]], "Theoretical performance": [[2, "theoretical-performance"]], "Time domain": [[4, "time-domain"]], "Time-domain": [[9, "time-domain"]], "Unit Tests": [[409, "unit-tests"]], "Upsample by an irrational rate": [[413, "upsample-by-an-irrational-rate"]], "Upsample the signal by an integer rate": [[413, "upsample-the-signal-by-an-integer-rate"]], "Utility": [[9, "utility"]], "Variable nomenclature": [[42, null], [195, null], [228, null], [240, null], [248, null], [254, null]], "Versioning": [[425, "versioning"]], "Voltage": [[6, "voltage"]], "Warning": [[304, null], [312, null], [313, null], [392, null], [397, null], [399, null]], "sdr": [[423, "sdr"]], "v0.0": [[424, "v0-0"]], "v0.0.1": [[424, "v0-0-1"]], "v0.0.10": [[424, "v0-0-10"]], "v0.0.11": [[424, "v0-0-11"]], "v0.0.12": [[424, "v0-0-12"]], "v0.0.13": [[424, "v0-0-13"]], "v0.0.14": [[424, "v0-0-14"]], "v0.0.15": [[424, "v0-0-15"]], "v0.0.16": [[424, "v0-0-16"]], "v0.0.17": [[424, "v0-0-17"]], "v0.0.18": [[424, "v0-0-18"]], "v0.0.19": [[424, "v0-0-19"]], "v0.0.2": [[424, "v0-0-2"]], "v0.0.20": [[424, "v0-0-20"]], "v0.0.21": [[424, "v0-0-21"]], "v0.0.22": [[424, "v0-0-22"]], "v0.0.23": [[424, "v0-0-23"]], "v0.0.3": [[424, "v0-0-3"]], "v0.0.4": [[424, "v0-0-4"]], "v0.0.5": [[424, "v0-0-5"]], "v0.0.6": [[424, "v0-0-6"]], "v0.0.7": [[424, "v0-0-7"]], "v0.0.8": [[424, "v0-0-8"]], "v0.0.9": [[424, "v0-0-9"]]}, "docurls": ["api/coding/", "api/conversions/", "api/detection/", "api/dsp/", "api/estimation/", "api/link-budgets/", "api/measurement/", "api/misc/", "api/modulation/", "api/plotting/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.AdditiveScrambler/", "api/sdr.AdditiveScrambler.__init__/", "api/sdr.AdditiveScrambler.descramble/", "api/sdr.AdditiveScrambler.lfsr/", "api/sdr.AdditiveScrambler.scramble/", "api/sdr.BinaryErasureChannel/", "api/sdr.BinaryErasureChannel.X/", "api/sdr.BinaryErasureChannel.Y/", "api/sdr.BinaryErasureChannel.__call__/", "api/sdr.BinaryErasureChannel.__init__/", "api/sdr.BinaryErasureChannel.capacities/", "api/sdr.BinaryErasureChannel.capacity/", "api/sdr.BinaryErasureChannel.p/", "api/sdr.BinarySymmetricChannel/", "api/sdr.BinarySymmetricChannel.X/", "api/sdr.BinarySymmetricChannel.Y/", "api/sdr.BinarySymmetricChannel.__call__/", "api/sdr.BinarySymmetricChannel.__init__/", "api/sdr.BinarySymmetricChannel.capacities/", "api/sdr.BinarySymmetricChannel.capacity/", "api/sdr.BinarySymmetricChannel.p/", "api/sdr.BlockInterleaver/", "api/sdr.BlockInterleaver.__init__/", "api/sdr.CPM/", "api/sdr.CPM.__init__/", "api/sdr.CPM.ber/", "api/sdr.CPM.bps/", "api/sdr.CPM.demodulate/", "api/sdr.CPM.index/", "api/sdr.CPM.modulate/", "api/sdr.CPM.order/", "api/sdr.CPM.phase_offset/", "api/sdr.CPM.pulse_shape/", "api/sdr.CPM.rx_filter/", "api/sdr.CPM.ser/", "api/sdr.CPM.sps/", "api/sdr.CPM.tx_filter/", "api/sdr.Channel/", "api/sdr.Channel.__call__/", "api/sdr.Channel.__init__/", "api/sdr.Channel.capacities/", "api/sdr.Channel.capacity/", "api/sdr.Channel.reset/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.DiscreteMemorylessChannel/", "api/sdr.DiscreteMemorylessChannel.P/", "api/sdr.DiscreteMemorylessChannel.X/", "api/sdr.DiscreteMemorylessChannel.Y/", "api/sdr.DiscreteMemorylessChannel.__call__/", "api/sdr.DiscreteMemorylessChannel.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.noise_bandwidth/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FLFSR/", "api/sdr.FLFSR.Taps/", "api/sdr.FLFSR.__call__/", "api/sdr.FLFSR.__init__/", "api/sdr.FLFSR.characteristic_poly/", "api/sdr.FLFSR.feedback_poly/", "api/sdr.FLFSR.field/", "api/sdr.FLFSR.initial_state/", "api/sdr.FLFSR.order/", "api/sdr.FLFSR.reset/", "api/sdr.FLFSR.state/", "api/sdr.FLFSR.step/", "api/sdr.FLFSR.taps/", "api/sdr.FLFSR.to_galois_lfsr/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.GLFSR/", "api/sdr.GLFSR.Taps/", "api/sdr.GLFSR.__init__/", "api/sdr.GLFSR.characteristic_poly/", "api/sdr.GLFSR.feedback_poly/", "api/sdr.GLFSR.field/", "api/sdr.GLFSR.initial_state/", "api/sdr.GLFSR.order/", "api/sdr.GLFSR.reset/", "api/sdr.GLFSR.state/", "api/sdr.GLFSR.step/", "api/sdr.GLFSR.taps/", "api/sdr.GLFSR.to_fibonacci_lfsr/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.noise_bandwidth/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interleaver/", "api/sdr.Interleaver.__init__/", "api/sdr.Interleaver.__len__/", "api/sdr.Interleaver.deinterleave/", "api/sdr.Interleaver.interleave/", "api/sdr.Interleaver.inverse_map/", "api/sdr.Interleaver.map/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.method/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.decimation/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.interpolation/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.rate/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.method/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.bandpass_fir/", "api/sdr.bandstop_fir/", "api/sdr.barker_code/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.berlekamp_massey/", "api/sdr.biawgn_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.coherent_gain/", "api/sdr.coherent_gain_loss/", "api/sdr.composite_snr/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.fdoa_crlb/", "api/sdr.foa_crlb/", "api/sdr.fractional_delay_fir/", "api/sdr.free_space_path_loss/", "api/sdr.frequency_offset/", "api/sdr.gaussian/", "api/sdr.gold_code/", "api/sdr.gray_code/", "api/sdr.h0/", "api/sdr.h1/", "api/sdr.hadamard_code/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.highpass_fir/", "api/sdr.iq_imbalance/", "api/sdr.is_preferred_pair/", "api/sdr.kasami_code/", "api/sdr.linear/", "api/sdr.lowpass_fir/", "api/sdr.m_sequence/", "api/sdr.max_frequency_offset/", "api/sdr.max_integration_time/", "api/sdr.min_snr/", "api/sdr.mix/", "api/sdr.multiply_distributions/", "api/sdr.multirate_fir/", "api/sdr.non_coherent_gain/", "api/sdr.p_d/", "api/sdr.p_fa/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.peebles/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.correlation/", "api/sdr.plot.detector_pdfs/", "api/sdr.plot.dft/", "api/sdr.plot.dtft/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.shannon_limit_ebn0/", "api/sdr.plot.spectrogram/", "api/sdr.plot.stem/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.power/", "api/sdr.preferred_pairs/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_bandwidth/", "api/sdr.rms_integration_time/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.shannon_limit_ebn0/", "api/sdr.shannon_limit_snr/", "api/sdr.shnidman/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.sum_distribution/", "api/sdr.sum_distributions/", "api/sdr.tdoa_crlb/", "api/sdr.threshold/", "api/sdr.threshold_factor/", "api/sdr.to_complex_baseband/", "api/sdr.to_real_passband/", "api/sdr.toa_crlb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh_code/", "api/sdr.wavelength/", "api/sdr.zadoff_chu_sequence/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/coherent-integration/", "examples/detection/", "examples/dsp/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/modulation/", "examples/non-coherent-integration/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "examples/synchronization/", "", "release-notes/v0.0/", "release-notes/versioning/"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1}, "indexentries": {"module": [[3, "module-sdr", false]], "sdr": [[3, "module-sdr", false]]}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[10, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [19, 1, 1, "", "AdditiveScrambler", "Implements an additive scrambler."], [24, 1, 1, "", "BinaryErasureChannel", "Implements a binary erasure channel (BEC)."], [32, 1, 1, "", "BinarySymmetricChannel", "Implements a binary symmetric channel (BSC)."], [40, 1, 1, "", "BlockInterleaver", "Implements a block interleaver."], [42, 1, 1, "", "CPM", "Implements continuous-phase modulation (CPM)."], [56, 1, 1, "", "Channel", "A base class for wireless channels."], [62, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [67, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [84, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [88, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [90, 1, 1, "", "DiscreteMemorylessChannel", "Implements a discrete memoryless channel (DMC)."], [96, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [101, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [108, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [125, 1, 1, "", "FLFSR", "Implements a Fibonacci linear-feedback shift register (LFSR)."], [139, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [149, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [151, 1, 1, "", "GLFSR", "Implements a Galois linear-feedback shift register (LFSR)."], [164, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [181, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [183, 1, 1, "", "Interleaver", "Implements an arbitrary interleaver."], [190, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [193, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [195, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [211, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [220, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [228, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [230, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [232, 1, 1, "", "NCO", "Implements a numerically controlled oscillator (NCO)."], [240, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [242, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [248, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [254, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [256, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [271, 6, 1, "", "Q", "Computes the CCDF of the standard normal distribution $mathcal{N}(0, 1)$.."], [272, 6, 1, "", "Qinv", "Computes the inverse CCDF of the standard normal distribution $mathcal{N}(0, 1)$."], [273, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [278, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [282, 6, 1, "", "albersheim", "Estimates the minimum input signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_d$."], [283, 6, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [284, 6, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [285, 6, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [286, 6, 1, "", "bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [287, 6, 1, "", "bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [288, 6, 1, "", "barker_code", "Generates the Barker code/sequence of length $n$."], [289, 6, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC)."], [290, 6, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [291, 6, 1, "", "berlekamp_massey", "Finds the minimal polynomial $c(x)$ that produces the linear recurrent sequence $y$."], [292, 6, 1, "", "biawgn_capacity", "Calculates the capacity of a binary-input additive white Gaussian noise (BI-AWGN) channel."], [293, 6, 1, "", "binary_code", "Generates a binary code of length $n = 2^m$."], [294, 6, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC)."], [295, 6, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [296, 6, 1, "", "coherent_gain", "Computes the SNR improvement by coherent integration."], [297, 6, 1, "", "coherent_gain_loss", "Computes the coherent gain loss (CGL) given a time or frequency offset."], [298, 6, 1, "", "composite_snr", "Calculates the signal-to-noise ratio (SNR) of the product of two signals."], [299, 6, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [300, 6, 1, "", "db", "Converts from linear units to decibels."], [301, 6, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [302, 6, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [303, 6, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC)."], [304, 6, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$, by discarding $r-1$ samples every $r$ samples."], [305, 6, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [306, 6, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [307, 6, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [308, 6, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [309, 6, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [310, 6, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [311, 6, 1, "", "evm", "Measures the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [312, 6, 1, "", "fdoa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on frequency difference of arrival (FDOA) estimation."], [313, 6, 1, "", "foa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on frequency of arrival (FOA) estimation."], [314, 6, 1, "", "fractional_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [315, 6, 1, "", "free_space_path_loss", "Calculates the free-space path loss (FSPL) in dB."], [316, 6, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [317, 6, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [318, 6, 1, "", "gold_code", "Generates the Gold code/sequence of length $n = 2^m - 1$."], [319, 6, 1, "", "gray_code", "Generates a Gray code of length $n = 2^m$."], [320, 6, 1, "", "h0", "Computes the statistical distribution under the null hypothesis $mathcal{H}_0$."], [321, 6, 1, "", "h1", "Computes the statistical distribution under the alternative hypothesis $mathcal{H}_1$."], [322, 6, 1, "", "hadamard_code", "Generates the Hadamard code/sequence of length $n = 2^m$."], [323, 6, 1, "", "half_sine", "Returns a half-sine pulse shape."], [324, 6, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [325, 6, 1, "", "hexdump", "Returns a hexdump of the specified data."], [326, 6, 1, "", "highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [327, 6, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [328, 6, 1, "", "is_preferred_pair", "Determines if two primitive polynomials generate preferred pair $m$-sequences."], [329, 6, 1, "", "kasami_code", "Generates the Kasami code/sequence of length $n = 2^m - 1$."], [330, 6, 1, "", "linear", "Converts from decibels to linear units."], [331, 6, 1, "", "lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [332, 6, 1, "", "m_sequence", "Generates a maximum-length sequence ($m$-sequence) from a Fibonacci linear feedback shift register (LFSR)."], [333, 6, 1, "", "max_frequency_offset", "Computes the maximum frequency offset that produces at most the provided coherent gain loss (CGL)."], [334, 6, 1, "", "max_integration_time", "Computes the maximum integration time that produces at most the provided coherent gain loss (CGL)."], [335, 6, 1, "", "min_snr", "Computes the minimum input signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_d$."], [336, 6, 1, "", "mix", "Mixes a time-domain signal with a complex exponential or real sinusoid."], [337, 6, 1, "", "multiply_distributions", "Numerically calculates the distribution of the product of two independent random variables $X$ and $Y$."], [338, 6, 1, "", "multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [339, 6, 1, "", "non_coherent_gain", "Computes the SNR improvement by non-coherently integrating $N_{nc}$ samples."], [340, 6, 1, "", "p_d", "Computes the theoretical probability of detection $P_d$."], [341, 6, 1, "", "p_fa", "Computes the theoretical probability of false alarm $P_{fa}$."], [342, 6, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [343, 6, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [344, 6, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [345, 6, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [346, 6, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [347, 6, 1, "", "peebles", "Estimates the non-coherent integration gain for a given probability of detection $P_d$ and false alarm $P_{fa}$."], [375, 6, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [376, 6, 1, "", "power", "Measures the instantaneous power of a time-domain signal $x[n]$."], [377, 6, 1, "", "preferred_pairs", "Generates primitive polynomials of degree $m$ that produce preferred pair $m$-sequences."], [378, 6, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [379, 6, 1, "", "rectangular", "Returns a rectangular pulse shape."], [380, 6, 1, "", "rms_bandwidth", "Measures the RMS bandwidth $B_{text{rms}}$ of the signal $x[n]$."], [381, 6, 1, "", "rms_integration_time", "Measures the RMS integration time $T_{text{rms}}$ of the signal $x[n]$."], [382, 6, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [383, 6, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [384, 6, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [385, 6, 1, "", "shannon_limit_ebn0", "Calculates the Shannon limit on the bit energy-to-noise power spectral density ratio $E_b/N_0$ in the AWGN channel."], [386, 6, 1, "", "shannon_limit_snr", "Calculates the Shannon limit on the signal-to-noise ratio $S/N$ in the AWGN channel."], [387, 6, 1, "", "shnidman", "Estimates the minimum input signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_d$ for the Swerling target model."], [388, 6, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [389, 6, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [390, 6, 1, "", "sum_distribution", "Numerically calculates the distribution of the sum of $n$ i.i.d. random variables $X_i$."], [391, 6, 1, "", "sum_distributions", "Numerically calculates the distribution of the sum of two independent random variables $X$ and $Y$."], [392, 6, 1, "", "tdoa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on time difference of arrival (TDOA) estimation."], [393, 6, 1, "", "threshold", "Computes the theoretical detection threshold $gamma$."], [394, 6, 1, "", "threshold_factor", "Computes the theoretical detection threshold factor $alpha$."], [395, 6, 1, "", "to_complex_baseband", "Converts a real passband signal to a complex baseband signal."], [396, 6, 1, "", "to_real_passband", "Converts a complex baseband signal to a real passband signal."], [397, 6, 1, "", "toa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on time of arrival (TOA) estimation."], [398, 6, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [399, 6, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$, by inserting $r-1$ zeros between each sample."], [400, 6, 1, "", "walsh_code", "Generates the Walsh code/sequence of length $n = 2^m$."], [401, 6, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [402, 6, 1, "", "zadoff_chu_sequence", "Generates the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[11, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [12, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [13, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [14, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [15, 4, 1, "", "gain", "The current linear gain."], [16, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [17, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [18, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[11, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[12, 3, 2, "p-attack", "attack", "The attack rate $alpha$."], [12, 3, 2, "p-decay", "decay", "The decay rate $beta$."], [12, 3, 2, "p-reference", "reference", "The desired output magnitude."], [12, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode."]], "sdr.AGC.reset": [[17, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.AdditiveScrambler": [[20, 2, 1, "", "__init__", "Creates an additive scrambler."], [21, 2, 1, "", "descramble", "Descrambles the binary input sequence $y[n]$."], [22, 4, 1, "", "lfsr", "The Fibonacci LFSR used for scrambling."], [23, 2, 1, "", "scramble", "Scrambles the binary input sequence $x[n]$."]], "sdr.AdditiveScrambler.__init__": [[20, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [20, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [20, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."]], "sdr.AdditiveScrambler.descramble": [[21, 3, 2, "p-y", "y", "The binary input sequence $y[n]$."]], "sdr.AdditiveScrambler.scramble": [[23, 3, 2, "p-x", "x", "The binary input sequence $x[n]$."]], "sdr.BinaryErasureChannel": [[25, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BEC channel."], [26, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1, e}$ of the BEC channel. Erasures $e$ are represented by -1."], [27, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [28, 2, 1, "", "__init__", "Creates a new binary erasure channel (BEC)."], [29, 2, 1, "", "capacities", "Calculates the capacity of BEC channels."], [30, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [31, 4, 1, "", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.BinaryErasureChannel.__call__": [[27, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinaryErasureChannel.__init__": [[28, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."], [28, 3, 2, "p-seed", "seed", "The seed for the random number generator."]], "sdr.BinaryErasureChannel.capacities": [[29, 3, 2, "", "p", "Calculates the capacity of BEC channels."]], "sdr.BinarySymmetricChannel": [[33, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BSC channel."], [34, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1}$ of the BSC channel."], [35, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [36, 2, 1, "", "__init__", "Creates a new binary symmetric channel (BSC)."], [37, 2, 1, "", "capacities", "Calculates the capacity of BSC channels."], [38, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [39, 4, 1, "", "p", "The transition probability $p$ of the BSC channel."]], "sdr.BinarySymmetricChannel.__call__": [[35, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinarySymmetricChannel.__init__": [[36, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."], [36, 3, 2, "p-seed", "seed", "The seed for the random number generator."]], "sdr.BinarySymmetricChannel.capacities": [[37, 3, 2, "", "p", "Calculates the capacity of BSC channels."]], "sdr.BlockInterleaver": [[41, 2, 1, "", "__init__", "Creates a $R times C$ block interleaver."]], "sdr.BlockInterleaver.__init__": [[41, 3, 2, "p-cols", "cols", "The number of columns $C$ in the interleaver."], [41, 3, 2, "p-rows", "rows", "The number of rows $R$ in the interleaver."]], "sdr.CPM": [[43, 2, 1, "", "__init__", "Creates a new continuous-phase modulation object."], [44, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [45, 4, 1, "", "bps", "The number of coded bits per symbol $k = log_2 M$."], [46, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples into decimal symbol decisions."], [47, 4, 1, "", "index", "The modulation index $h$."], [48, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [49, 4, 1, "", "order", "The modulation order $M = 2^k$."], [50, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [51, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [52, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [53, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [54, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [55, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.CPM.__init__": [[43, 3, 2, "p-index", "index", "The modulation index $h$."], [43, 3, 2, "p-order", "order", "The modulation order $M = 2^k$."], [43, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees."], [43, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [43, 3, 2, "p-span", "span", "The span of the pulse shape in symbols."], [43, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [43, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.CPM.ber": [[44, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.CPM.demodulate": [[46, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.CPM.modulate": [[48, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.CPM.ser": [[53, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Channel": [[57, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [58, 2, 1, "", "__init__", "Creates a new channel."], [59, 2, 1, "", "capacities", "Computes the channel capacity given the channel configuration."], [60, 4, 1, "", "capacity", "The channel capacity $C$ in bits/2D of the instantiated channel."], [61, 2, 1, "", "reset", "Resets the channel with a new seed."]], "sdr.Channel.__call__": [[57, 3, 2, "p-x", "x", "The input sequence $x$."]], "sdr.Channel.__init__": [[58, 3, 2, "p-seed", "seed", "The seed for the random number generator."]], "sdr.Channel.reset": [[61, 3, 2, "p-seed", "seed", "The seed for the random number generator."]], "sdr.Channelizer": [[63, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [64, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [65, 4, 1, "", "channels", "The number of channels $C$."], [66, 4, 1, "", "method", "The method used to design the polyphase channelizing filter."]], "sdr.Channelizer.__call__": [[63, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [63, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[64, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [64, 3, 2, "p-channels", "channels", "The number of channels $C$."], [64, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter."], [64, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."], [64, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[68, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [69, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [70, 4, 1, "", "K0", "The NCO gain $K_0$."], [71, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [72, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [73, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [74, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [75, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [76, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [77, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [78, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [79, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [80, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [81, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [82, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [83, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[74, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [74, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [74, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter."], [74, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [74, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[75, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[77, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[80, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[85, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [86, 4, 1, "", "method", "The method used to design the polyphase decimating filter."], [87, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__init__": [[85, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [85, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [85, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter."], [85, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."], [85, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[89, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[89, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$."], [89, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."], [89, 3, 2, "p-window", "window", "The SciPy window definition."]], "sdr.DiscreteMemorylessChannel": [[91, 4, 1, "", "P", "The transition probability matrix $P$ of the DMC channel."], [92, 4, 1, "", "X", "The input alphabet $mathcal{X}$ of the DMC channel."], [93, 4, 1, "", "Y", "The output alphabet $mathcal{Y}$ of the DMC channel."], [94, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [95, 2, 1, "", "__init__", "Creates a new discrete memoryless channel (DMC)."]], "sdr.DiscreteMemorylessChannel.__call__": [[94, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.DiscreteMemorylessChannel.__init__": [[95, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P = Pr(Y = y_j | X = x_i)$."], [95, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$."], [95, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$."], [95, 3, 2, "p-seed", "seed", "The seed for the random number generator."]], "sdr.EnergyDetector": [[97, 2, 1, "", "p_d", "Computes the probability of detection $P_d$."], [98, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{fa}$."], [99, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [100, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[97, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [97, 3, 2, "p-complex", "complex", "Indicates whether the signal is real or complex."], [97, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [97, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[98, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [98, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [98, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [98, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[99, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [99, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [99, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [99, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[100, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [100, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [100, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [100, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[102, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [103, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [104, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [105, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [106, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [107, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[103, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB."], [103, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [103, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[104, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB."]], "sdr.ErrorRate.error_rate": [[105, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB."]], "sdr.ErrorRate.errors": [[107, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB."]], "sdr.FIR": [[109, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [110, 2, 1, "", "__init__", "Creates an FIR filter."], [111, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [112, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [113, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [114, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [115, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [116, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter."], [117, 2, 1, "", "noise_bandwidth", "Returns the noise bandwidth $B_n$ of the FIR filter."], [118, 4, 1, "", "order", "The order of the FIR filter $N$."], [119, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [120, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [121, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [122, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter."], [123, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [124, 4, 1, "", "taps", "The feedforward taps $h[n]$ with length $N + 1$."]], "sdr.FIR.__call__": [[109, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [109, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[110, 3, 2, "p-h", "h", "The feedforward coefficients $h[n]$."], [110, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."]], "sdr.FIR.frequency_response": [[114, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [114, 3, 2, "p-freqs", "freqs", "The frequency specification."], [114, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [114, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[115, 3, 2, "p-N", "N", "The number of samples in the group delay."], [115, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[116, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.FIR.noise_bandwidth": [[117, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.phase_delay": [[119, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [119, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[122, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.FLFSR": [[126, 2, 1, "", "Taps", "Creates a Fibonacci LFSR from its taps."], [127, 2, 1, "", "__call__", "Processes the input symbols $x[n]$ through the Fibonacci LFSR."], [128, 2, 1, "", "__init__", "Creates a new Fibonacci LFSR."], [129, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x)$ that defines the linear recurrent sequence."], [130, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x)$ that defines the feedback arithmetic."], [131, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [132, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [133, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence."], [134, 2, 1, "", "reset", "Resets the Fibonacci LFSR state to the specified state."], [135, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [136, 2, 1, "", "step", "Produces the next steps output symbols."], [137, 4, 1, "", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."], [138, 2, 1, "", "to_galois_lfsr", "Converts the Fibonacci LFSR to a Galois LFSR that produces the same output."]], "sdr.FLFSR.Taps": [[126, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [126, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."]], "sdr.FLFSR.__call__": [[127, 3, 2, "p-x", "x", "The input symbols $x[n]$."]], "sdr.FLFSR.__init__": [[128, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [128, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [128, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."]], "sdr.FLFSR.reset": [[134, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."]], "sdr.FLFSR.step": [[136, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce."]], "sdr.FarrowResampler": [[140, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [141, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [142, 4, 1, "", "delay", "The delay $d$ of the Farrow FIR filters in samples."], [143, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [144, 4, 1, "", "order", "The order of the piecewise polynomial."], [145, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [146, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [147, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [148, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[140, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [140, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[141, 3, 2, "p-order", "order", "The order of the piecewise polynomial, which must be between 1 and 4."], [141, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."]], "sdr.FarrowResampler.flush": [[143, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[145, 3, 2, "p-state", "state", "The filter state to reset to."]], "sdr.FractionalDelay": [[150, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[150, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [150, 3, 2, "p-length", "length", "The filter length $L$."]], "sdr.GLFSR": [[152, 2, 1, "", "Taps", "Creates a Galois LFSR from its taps."], [153, 2, 1, "", "__init__", "Creates a new Galois LFSR."], [154, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x)$ that defines the linear recurrent sequence."], [155, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x)$ that defines the feedback arithmetic."], [156, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [157, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [158, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence."], [159, 2, 1, "", "reset", "Resets the Galois LFSR state to the specified state."], [160, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [161, 2, 1, "", "step", "Produces the next steps output symbols."], [162, 4, 1, "", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."], [163, 2, 1, "", "to_fibonacci_lfsr", "Converts the Galois LFSR to a Fibonacci LFSR that produces the same output."]], "sdr.GLFSR.Taps": [[152, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [152, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."]], "sdr.GLFSR.__init__": [[153, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [153, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [153, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."]], "sdr.GLFSR.reset": [[159, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."]], "sdr.GLFSR.step": [[161, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce."]], "sdr.IIR": [[165, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [166, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [167, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [168, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [169, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [170, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [171, 4, 1, "", "gain", "The gain of the IIR filter."], [172, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter."], [173, 2, 1, "", "noise_bandwidth", "Returns the noise bandwidth $B_n$ of the IIR filter."], [174, 4, 1, "", "order", "The order of the IIR filter $N$."], [175, 4, 1, "", "poles", "The poles of the IIR filter."], [176, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [177, 4, 1, "", "state", "The filter state."], [178, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter."], [179, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [180, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[165, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [165, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [165, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."], [165, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[166, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[167, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [167, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [167, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."]], "sdr.IIR.frequency_response": [[170, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [170, 3, 2, "p-freqs", "freqs", "The frequency specification."], [170, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [170, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[172, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.noise_bandwidth": [[173, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.IIR.step_response": [[178, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[182, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[182, 3, 2, "p-method", "method", "The integration method."], [182, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."]], "sdr.Interleaver": [[184, 2, 1, "", "__init__", "Creates an arbitrary interleaver."], [185, 2, 1, "", "__len__", "The size of the interleaver."], [186, 2, 1, "", "deinterleave", "Deinterleaves the input sequence $y[n]$."], [187, 2, 1, "", "interleave", "Interleaves the input sequence $x[n]$."], [188, 4, 1, "", "inverse_map", "The deinterleaver permutation map $pi^{-1}$."], [189, 4, 1, "", "map", "The interleaver permutation map $pi$."]], "sdr.Interleaver.__init__": [[184, 3, 2, "p-map", "map", "The interleaver permutation map $pi : i mapsto j$, containing the values $[0, N)$. The $i$-th input element will be placed at the $pi(i)$-th output position."]], "sdr.Interleaver.deinterleave": [[186, 3, 2, "p-y", "y", "The input sequence $y[n]$."]], "sdr.Interleaver.interleave": [[187, 3, 2, "p-x", "x", "The input sequence $x[n]$."]], "sdr.Interpolator": [[191, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [192, 4, 1, "", "method", "The method used to design the polyphase interpolating filter."]], "sdr.Interpolator.__init__": [[191, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [191, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [191, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter."], [191, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."], [191, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[194, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[194, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$."], [194, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."]], "sdr.LinearModulation": [[196, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [197, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [198, 4, 1, "", "bps", "The number of coded bits per symbol $k = log_2 M$."], [199, 2, 1, "", "decide_symbols", "Converts the received complex symbols into MLE symbol decisions."], [200, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples."], [201, 2, 1, "", "map_symbols", "Converts the decimal symbols into complex symbols."], [202, 2, 1, "", "modulate", "Modulates the decimal symbols into pulse-shaped complex samples."], [203, 4, 1, "", "order", "The modulation order $M = 2^k$."], [204, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [205, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [206, 4, 1, "", "rx_filter", "The receive decimating matched filter."], [207, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [208, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [209, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$."], [210, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter."]], "sdr.LinearModulation.__init__": [[196, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape."], [196, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [196, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [196, 3, 2, "p-span", "span", "The span of the pulse shape in symbols."], [196, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [196, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.LinearModulation.ber": [[197, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[199, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[200, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[201, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[202, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[207, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[212, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [213, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [214, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter."], [215, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [216, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [217, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter."], [218, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [219, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[212, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[213, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [213, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [213, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter."], [213, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[221, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [222, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [223, 2, 1, "", "__call__", "Detects the phase error."], [224, 2, 1, "", "__init__", "Initializes the ML-PED."], [225, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [226, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [227, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[223, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [223, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[224, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [224, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[225, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [225, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[226, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [226, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[229, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[229, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [229, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [229, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[231, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[231, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [231, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."]], "sdr.NCO": [[233, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [234, 2, 1, "", "__init__", "Creates a numerically controlled oscillator (NCO)."], [235, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [236, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [237, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [238, 2, 1, "", "reset", "Resets the NCO."], [239, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[233, 5, 2, "", "_ScalarType_co", "Steps the NCO with variable frequency and/or phase signals."], [233, 5, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample."], [233, 5, 2, "p-output", "output", "The format of the output signal $y[n]$."], [233, 5, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians."]], "sdr.NCO.__init__": [[234, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [234, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [234, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[239, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[241, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[241, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape."], [241, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [241, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [241, 3, 2, "p-span", "span", "The span of the pulse shape in symbols."], [241, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [241, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[243, 2, 1, "", "__call__", "Detects the phase error."], [244, 2, 1, "", "__init__", "Initializes the PED."], [245, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [246, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [247, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[243, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [243, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[245, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [245, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[246, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [246, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[249, 2, 1, "", "__init__", "Creates a new PSK object."], [250, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [251, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [252, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [253, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.PSK.__init__": [[249, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape."], [249, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the coded bits per symbol."], [249, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [249, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [249, 3, 2, "p-span", "span", "The span of the pulse shape in symbols."], [249, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [249, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[250, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [250, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[252, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [252, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[255, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[255, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape."], [255, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the coded bits per symbol."], [255, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [255, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [255, 3, 2, "p-span", "span", "The span of the pulse shape in symbols."], [255, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [255, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[257, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [258, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [259, 4, 1, "", "branches", "The number of polyphase branches $B$."], [260, 4, 1, "", "decimation", "The integer decimation rate $Q$."], [261, 4, 1, "", "delay", "The delay of polyphase FIR filter in samples."], [262, 4, 1, "", "input", "The input connection method."], [263, 4, 1, "", "interpolation", "The integer interpolation rate $P$."], [264, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [265, 4, 1, "", "output", "The output connection method."], [266, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [267, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [268, 4, 1, "", "rate", "The fractional resampling rate $r = P/Q$. The output sample rate is $f_{s,out} = f_{s,in} cdot r$."], [269, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [270, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[257, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [257, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.PolyphaseFIR.__init__": [[258, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [258, 3, 2, "p-input", "input", "The input connection method."], [258, 3, 2, "p-output", "output", "The output connection method."], [258, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."], [258, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[271, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[272, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[274, 2, 1, "", "p_d", "Computes the probability of detection $P_d$."], [275, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{fa}$."], [276, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [277, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[274, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [274, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [274, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."]], "sdr.ReplicaCorrelator.p_fa": [[275, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [275, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [275, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [275, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[276, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [276, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [276, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."]], "sdr.ReplicaCorrelator.threshold": [[277, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [277, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [277, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [277, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[279, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [280, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [281, 4, 1, "", "method", "The method used to design the polyphase resampling filter."]], "sdr.Resampler.__call__": [[279, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [279, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[280, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [280, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [280, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [280, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter."], [280, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode."], [280, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.albersheim": [[282, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{nc} ge 1$."], [282, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [282, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."]], "sdr.average_power": [[283, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power."], [283, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [283, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[284, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units."], [284, 3, 2, "p-seed", "seed", "The seed for the random number generator."], [284, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB."], [284, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[285, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz."], [285, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.bandpass_fir": [[286, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [286, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [286, 3, 2, "p-order", "order", "The filter order $N$."], [286, 3, 2, "p-window", "window", "The SciPy window definition."]], "sdr.bandstop_fir": [[287, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [287, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [287, 3, 2, "p-order", "order", "The filter order $N$."], [287, 3, 2, "p-window", "window", "The SciPy window definition."]], "sdr.barker_code": [[288, 3, 2, "p-length", "length", "The length $n$ of the Barker code/sequence."], [288, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[289, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [289, 3, 2, "p-seed", "seed", "The seed for the random number generator."], [289, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[290, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.berlekamp_massey": [[291, 3, 2, "p-output", "output", "The output object type."], [291, 3, 2, "p-sequence", "sequence", "A linear recurrent sequence $y$ in $mathrm{GF}(p^m)$."]], "sdr.biawgn_capacity": [[292, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N = A^2 / sigma^2$ at the output of the channel in dB."]], "sdr.binary_code": [[293, 3, 2, "p-length", "length", "The length $n = 2^m$ of the binary code."]], "sdr.bsc": [[294, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [294, 3, 2, "p-seed", "seed", "The seed for the random number generator."], [294, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[295, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.coherent_gain": [[296, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $T_c B_n$ in seconds-Hz (unitless)."]], "sdr.coherent_gain_loss": [[297, 3, 2, "p-freq", "freq", "The frequency offset $Delta f$ or signal bandwidth $B_c$ in Hz."], [297, 3, 2, "p-time", "time", "The coherent integration time $T_c$ or time offset in $Delta t$ in seconds."]], "sdr.composite_snr": [[298, 3, 2, "p-snr1", "snr1", "The signal-to-noise ratio (SNR) of the first signal $gamma_1$ in dB."], [298, 3, 2, "p-snr2", "snr2", "The signal-to-noise ratio (SNR) of the second signal $gamma_2$ in dB."]], "sdr.crest_factor": [[299, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[300, 3, 2, "p-type", "type", "The type of input value or signal."], [300, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.diff_decode": [[301, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [301, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[302, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [302, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[303, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [303, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$."], [303, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$."], [303, 3, 2, "p-seed", "seed", "The seed for the random number generator."], [303, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[304, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [304, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[305, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [305, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [305, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[306, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [306, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [306, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [306, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[307, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy."], [307, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [307, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[308, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [308, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [308, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[309, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [309, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[310, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance."], [310, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [310, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[311, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [311, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [311, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$."], [311, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.fdoa_crlb": [[312, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [312, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz."], [312, 3, 2, "p-rms_integration_time", "rms_integration_time", "The root-mean-square (RMS) integration time $T_{text{rms}}$ in Hz."], [312, 3, 2, "p-snr1", "snr1", "The signal-to-noise ratio (SNR) of the first signal $gamma_1 = S_1 / (N_0 B_n)$ in dB."], [312, 3, 2, "p-snr2", "snr2", "The signal-to-noise ratio (SNR) of the second signal $gamma_2 = S_2 / (N_0 B_n)$ in dB."], [312, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.foa_crlb": [[313, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [313, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz."], [313, 3, 2, "p-rms_integration_time", "rms_integration_time", "The root-mean-square (RMS) integration time $T_{text{rms}}$ in Hz."], [313, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) of the signal $gamma = S / (N_0 B_n)$ in dB."], [313, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.fractional_delay_fir": [[314, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [314, 3, 2, "p-length", "length", "The filter length $L$."]], "sdr.free_space_path_loss": [[315, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [315, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.frequency_offset": [[316, 3, 2, "p-offset", "offset", "The frequency offset $Delta f_c = f_{c,text{new}} - f_{c,text{old}}$ in Hz."], [316, 3, 2, "p-offset_rate", "offset_rate", "The frequency offset rate $Delta f_c / Delta t$ in Hz/s."], [316, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [316, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [316, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.gaussian": [[317, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [317, 3, 2, "p-span", "span", "The length of the filter in symbols."], [317, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [317, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds."]], "sdr.gold_code": [[318, 3, 2, "p-index", "index", "The index $i$ in $[-2, n)$ of the Gold code."], [318, 3, 2, "p-length", "length", "The length $n = 2^m - 1$ of the Gold code/sequence."], [318, 3, 2, "p-output", "output", "The output format of the Gold code/sequence."], [318, 3, 2, "p-poly1", "poly1", "The primitive polynomial of degree $m$ over $mathrm{GF}(2)$ for the first $m$-sequence."], [318, 3, 2, "p-poly2", "poly2", "The primitive polynomial of degree $m$ over $mathrm{GF}(2)$ for the second $m$-sequence."], [318, 3, 2, "p-verify", "verify", "Indicates whether to verify that the provided polynomials are a preferred pair using sdr.is_preferred_pair()."]], "sdr.gray_code": [[319, 3, 2, "p-length", "length", "The length $n = 2^m$ of the Gray code."]], "sdr.h0": [[320, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [320, 3, 2, "p-detector", "detector", "The detector type."], [320, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [320, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$."], [320, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."]], "sdr.h1": [[321, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [321, 3, 2, "p-detector", "detector", "The detector type."], [321, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [321, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$."], [321, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."], [321, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / sigma^2$ in dB."]], "sdr.hadamard_code": [[322, 3, 2, "p-index", "index", "The index $i$ in $[0, n)$ of the Hadamard code."], [322, 3, 2, "p-length", "length", "The length $n = 2^m$ of the Hadamard code/sequence."], [322, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[323, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [323, 3, 2, "p-span", "span", "The length of the filter in symbols."], [323, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[324, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance."], [324, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [324, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[325, 3, 2, "p-data", "data", "The data to display."], [325, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.highpass_fir": [[326, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [326, 3, 2, "p-order", "order", "The filter order $N$."], [326, 3, 2, "p-window", "window", "The SciPy window definition."]], "sdr.iq_imbalance": [[327, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB."], [327, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees."], [327, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.is_preferred_pair": [[328, 3, 2, "p-poly1", "poly1", "The first primitive polynomial $f(x)$."], [328, 3, 2, "p-poly2", "poly2", "The second primitive polynomial $g(x)$."]], "sdr.kasami_code": [[329, 3, 2, "p-index", "index", "The index of the Kasami code."], [329, 3, 2, "p-length", "length", "The length $n = 2^m - 1$ of the Kasami code/sequence."], [329, 3, 2, "p-output", "output", "The output format of the Kasami code/sequence."], [329, 3, 2, "p-poly", "poly", "The primitive polynomial of degree $m$ over $mathrm{GF}(2)$."]], "sdr.linear": [[330, 3, 2, "p-type", "type", "The type of output value or signal."], [330, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.lowpass_fir": [[331, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [331, 3, 2, "p-order", "order", "The filter order $N$."], [331, 3, 2, "p-window", "window", "The SciPy window definition."]], "sdr.m_sequence": [[332, 3, 2, "p-degree", "degree", "The degree $m$ of the LFSR."], [332, 3, 2, "p-index", "index", "The index $i$ in $[1, q^m)$ of the $m$-sequence."], [332, 3, 2, "p-output", "output", "The output format of the $m$-sequence."], [332, 3, 2, "p-poly", "poly", "The characteristic polynomial of the LFSR over $mathrm{GF}(q)$."]], "sdr.max_frequency_offset": [[333, 3, 2, "p-cgl", "cgl", "The coherent gain loss (CGL) in dB."], [333, 3, 2, "p-integration_time", "integration_time", "The coherent integration time $T_c$ in seconds."]], "sdr.max_integration_time": [[334, 3, 2, "p-cgl", "cgl", "The coherent gain loss (CGL) in dB."], [334, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ in Hz."]], "sdr.min_snr": [[335, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [335, 3, 2, "p-detector", "detector", "The detector type."], [335, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [335, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$."], [335, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [335, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$ in $(0, 1)$."]], "sdr.mix": [[336, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [336, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [336, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [336, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [336, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.multiply_distributions": [[337, 3, 2, "p-X", "X", "The distribution of the first random variable $X$."], [337, 3, 2, "p-Y", "Y", "The distribution of the second random variable $Y$."], [337, 3, 2, "p-p", "p", "The probability of exceeding the x axis, on either side, for each distribution."], [337, 3, 2, "p-x", "x", "The x values at which to evaluate the PDF of the product."]], "sdr.multirate_fir": [[338, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [338, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [338, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [338, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter."]], "sdr.non_coherent_gain": [[339, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [339, 3, 2, "p-detector", "detector", "The detector type."], [339, 3, 2, "p-extrapolate", "extrapolate", "Indicates whether to extrapolate $G_{nc}$ using smaller values of $N_{nc}$."], [339, 3, 2, "p-n_nc", "n_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [339, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$."], [339, 3, 2, "p-snr", "snr", "The reference SNR in dB."], [339, 3, 2, "p-snr_ref", "snr_ref", "The SNR reference."]], "sdr.p_d": [[340, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [340, 3, 2, "p-detector", "detector", "The detector type."], [340, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [340, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$."], [340, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$ in $(0, 1)$."], [340, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / sigma^2$ in dB."]], "sdr.p_fa": [[341, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [341, 3, 2, "p-detector", "detector", "The detector type."], [341, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [341, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$."], [341, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."], [341, 3, 2, "p-threshold", "threshold", "The detection threshold $gamma$ in linear units."]], "sdr.pack": [[342, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [342, 3, 2, "p-dtype", "dtype", "The data type of the output array."], [342, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[343, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR."], [343, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[344, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [344, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [344, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[345, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power."], [345, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [345, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[346, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [346, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peebles": [[347, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{nc} ge 1$."], [347, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [347, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."]], "sdr.plot": [[348, 6, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [349, 6, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [350, 6, 1, "", "correlation", "Plots the correlation between two time-domain signals $x[n]$ and $y[n]$."], [351, 6, 1, "", "detector_pdfs", "Plots the probability density functions (PDFs) of the detector under $mathcal{H}_0$ and $mathcal{H}_1$."], [352, 6, 1, "", "dft", "Plots the discrete Fourier transform (DFT) of the time-domain signal $x[n]$."], [353, 6, 1, "", "dtft", "Plots the discrete-time Fourier transform (DTFT) of the time-domain signal $x[n]$."], [354, 6, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [355, 6, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, and zeros and poles of the filter."], [356, 6, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [357, 6, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [358, 6, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [359, 6, 1, "", "p_d", "Plots the probability of detection $P_d$ as a function of received SNR or ENR."], [360, 6, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [361, 6, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [362, 6, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [363, 6, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [364, 6, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [365, 6, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{fa}$."], [366, 6, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [367, 6, 1, "", "shannon_limit_ebn0", "Plots the Shannon limit for the bit energy-to-noise PSD ratio $E_b/N_0$."], [368, 6, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [369, 6, 1, "", "stem", "Wraps matplotlib.pyplot.stem() to style the plot more like MATLAB."], [370, 6, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [371, 6, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [372, 6, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [373, 6, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [374, 6, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[348, 3, 2, "p-ax", "ax", "The axis to plot on."], [348, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [348, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [348, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[349, 3, 2, "p-ax", "ax", "The axis to plot on."], [349, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot."], [349, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [349, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis."], [349, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the points as a persistence plot."], [349, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.correlation": [[350, 3, 2, "p-ax", "ax", "The axis to plot on."], [350, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal."], [350, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [350, 3, 2, "p-mode", "mode", "The numpy.correlate() correlation mode."], [350, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [350, 3, 2, "p-x", "x", "The first time-domain signal $x[n]$."], [350, 3, 2, "p-y", "y", "The second time-domain signal $y[n]$."], [350, 3, 2, "p-y_axis", "y_axis", "Indicates how to plot the y-axis."]], "sdr.plot.detector_pdfs": [[351, 3, 2, "p-annotate", "annotate", "Indicates whether to annotate the plot with the probabilities of false alarm and detection."], [351, 3, 2, "p-ax", "ax", "The axis to plot on."], [351, 3, 2, "p-h0", "h0", "The statistical distribution under $mathcal{H}_0$."], [351, 3, 2, "p-h1", "h1", "The statistical distribution under $mathcal{H}_1$."], [351, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [351, 3, 2, "p-p_h0", "p_h0", "The probability of the $mathcal{H}_0$ tails to plot."], [351, 3, 2, "p-p_h1", "p_h1", "The probability of the $mathcal{H}_1$ tails to plot."], [351, 3, 2, "p-points", "points", "The number of points to use for the x-axis."], [351, 3, 2, "p-shade", "shade", "Indicates whether to shade the tails of the PDFs."], [351, 3, 2, "p-threshold", "threshold", "The detection threshold $gamma$."], [351, 3, 2, "p-x", "x", "The x-axis values to use for the plot."]], "sdr.plot.dft": [[352, 3, 2, "p-ax", "ax", "The axis to plot on."], [352, 3, 2, "p-centered", "centered", "Indicates whether to center the DFT about 0."], [352, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal."], [352, 3, 2, "p-fast", "fast", "Indicates whether to use the fast Fourier transform (FFT) algorithm."], [352, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function."], [352, 3, 2, "p-oversample", "oversample", "The factor to oversample the DFT."], [352, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [352, 3, 2, "p-size", "size", "The number of points to use for the DFT."], [352, 3, 2, "p-type", "type", "The type of plot to use."], [352, 3, 2, "p-window", "window", "The SciPy window definition."], [352, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [352, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling."], [352, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling."]], "sdr.plot.dtft": [[353, 3, 2, "p-ax", "ax", "The axis to plot on."], [353, 3, 2, "p-centered", "centered", "Indicates whether to center the DTFT about 0."], [353, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal."], [353, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function."], [353, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [353, 3, 2, "p-size", "size", "The number of points to use for the DTFT."], [353, 3, 2, "p-window", "window", "The SciPy window definition."], [353, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [353, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling."]], "sdr.plot.eye": [[354, 3, 2, "p-ax", "ax", "The axis to plot on."], [354, 3, 2, "p-color", "color", "Indicates how to color the rasters."], [354, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot."], [354, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [354, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot."], [354, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [354, 3, 2, "p-span", "span", "The number of symbols per raster."], [354, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [354, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$."]], "sdr.plot.filter": [[355, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [355, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain."], [355, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [355, 3, 2, "p-filter", "filter", "The filter definition."], [355, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [355, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling."]], "sdr.plot.group_delay": [[356, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [356, 3, 2, "p-ax", "ax", "The axis to plot on."], [356, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [356, 3, 2, "p-filter", "filter", "The filter definition."], [356, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [356, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [356, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling."]], "sdr.plot.impulse_response": [[357, 3, 2, "p-N", "N", "The number of samples $N$ to plot."], [357, 3, 2, "p-ax", "ax", "The axis to plot on."], [357, 3, 2, "p-filter", "filter", "The filter definition."], [357, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function."], [357, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample."], [357, 3, 2, "p-type", "type", "The type of plot to use."]], "sdr.plot.magnitude_response": [[358, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [358, 3, 2, "p-ax", "ax", "The axis to plot on."], [358, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [358, 3, 2, "p-filter", "filter", "The filter definition."], [358, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [358, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [358, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling."], [358, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling."]], "sdr.plot.p_d": [[359, 3, 2, "p-ax", "ax", "The axis to plot on."], [359, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [359, 3, 2, "p-p_d", "p_d", "The probability of detection $P_d$."], [359, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [359, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[360, 3, 2, "p-average", "average", "The type of averaging to use."], [360, 3, 2, "p-ax", "ax", "The axis to plot on."], [360, 3, 2, "p-detrend", "detrend", "The type of detrending to apply."], [360, 3, 2, "p-fft", "fft", "The number of points to use in the FFT."], [360, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [360, 3, 2, "p-length", "length", "The length of each segment in samples."], [360, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments."], [360, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [360, 3, 2, "p-window", "window", "The SciPy window definition."], [360, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [360, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling."], [360, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling."]], "sdr.plot.phase_delay": [[361, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [361, 3, 2, "p-ax", "ax", "The axis to plot on."], [361, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [361, 3, 2, "p-filter", "filter", "The filter definition."], [361, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [361, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [361, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling."]], "sdr.plot.phase_response": [[362, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [362, 3, 2, "p-ax", "ax", "The axis to plot on."], [362, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [362, 3, 2, "p-filter", "filter", "The filter definition."], [362, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [362, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [362, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [362, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling."]], "sdr.plot.phase_tree": [[363, 3, 2, "p-ax", "ax", "The axis to plot on."], [363, 3, 2, "p-color", "color", "Indicates how to color the rasters."], [363, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [363, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [363, 3, 2, "p-span", "span", "The number of symbols per raster."], [363, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [363, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[364, 3, 2, "p-ax", "ax", "The axis to plot on."], [364, 3, 2, "p-color", "color", "Indicates how to color the rasters."], [364, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot."], [364, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [364, 3, 2, "p-length", "length", "The length of each raster in samples."], [364, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot."], [364, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [364, 3, 2, "p-stride", "stride", "The stride between each raster in samples."], [364, 3, 2, "p-x", "x", "The real time-domain signal $x[n]$."]], "sdr.plot.roc": [[365, 3, 2, "p-ax", "ax", "The axis to plot on."], [365, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [365, 3, 2, "p-p_d", "p_d", "The probability of detection $P_d$."], [365, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [365, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[366, 3, 2, "p-ax", "ax", "The axis to plot on."], [366, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [366, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [366, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.shannon_limit_ebn0": [[367, 3, 2, "p-ax", "ax", "The axis to plot on."], [367, 3, 2, "p-rho", "rho", "The nominal spectral efficiency $rho$ of the modulation in bits/2D."]], "sdr.plot.spectrogram": [[368, 3, 2, "p-ax", "ax", "The axis to plot on."], [368, 3, 2, "p-detrend", "detrend", "The type of detrending to apply."], [368, 3, 2, "p-fft", "fft", "The number of points to use in the FFT."], [368, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default."], [368, 3, 2, "p-length", "length", "The length of each segment in samples."], [368, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments."], [368, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [368, 3, 2, "p-window", "window", "The SciPy window definition."], [368, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [368, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling."]], "sdr.plot.stem": [[369, 5, 2, "", "_ScalarType_co", "Wraps matplotlib.pyplot.stem() to style the plot more like MATLAB."], [369, 3, 2, "p-ax", "ax", "The axis to plot on."], [369, 3, 2, "p-color", "color", "The color of the stem line and marker."], [369, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.stem()."], [369, 3, 2, "p-x", "x", "The x-coordinates of the stem plot."], [369, 3, 2, "p-y", "y", "The y-coordinates of the stem plot."]], "sdr.plot.step_response": [[370, 3, 2, "p-N", "N", "The number of samples $N$ to plot."], [370, 3, 2, "p-ax", "ax", "The axis to plot on."], [370, 3, 2, "p-filter", "filter", "The filter definition."], [370, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function."], [370, 3, 2, "p-type", "type", "The type of plot to use."]], "sdr.plot.symbol_map": [[371, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [371, 3, 2, "p-ax", "ax", "The axis to plot on."], [371, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default."], [371, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [371, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[372, 5, 2, "", "_ScalarType_co", "Plots a time-domain signal $x[n]$."], [372, 3, 2, "p-ax", "ax", "The axis to plot on."], [372, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0."], [372, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal."], [372, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [372, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample."], [372, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s."], [372, 3, 2, "p-t", "t", "The time signal $t[n]$."], [372, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[374, 3, 2, "p-ax", "ax", "The axis to plot on."], [374, 3, 2, "p-filter", "filter", "The filter definition."], [374, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[375, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [375, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.power": [[376, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [376, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.preferred_pairs": [[377, 3, 2, "p-degree", "degree", "The degree $m$ of the $m$-sequences."], [377, 3, 2, "p-poly", "poly", "The first polynomial $f(x)$ in the preferred pair."]], "sdr.raised_cosine": [[378, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [378, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [378, 3, 2, "p-span", "span", "The length of the filter in symbols."], [378, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[379, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [379, 3, 2, "p-span", "span", "The length of the filter in symbols."], [379, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_bandwidth": [[380, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [380, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.rms_integration_time": [[381, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [381, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.rms_voltage": [[382, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [382, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[383, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [383, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [383, 3, 2, "p-span", "span", "The length of the filter in symbols."], [383, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[384, 3, 2, "p-offset", "offset", "The sample rate offset $Delta f_s = f_{s,text{new}} - f_{s,text{old}}$ in samples/s."], [384, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [384, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.shannon_limit_ebn0": [[385, 3, 2, "p-rho", "rho", "The nominal spectral efficiency $rho$ of the modulation in bits/2D."]], "sdr.shannon_limit_snr": [[386, 3, 2, "p-rho", "rho", "The nominal spectral efficiency $rho$ of the modulation in bits/2D."]], "sdr.shnidman": [[387, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{nc} ge 1$."], [387, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [387, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."], [387, 3, 2, "p-swerling", "swerling", "The Swerling target model."]], "sdr.snr_to_ebn0": [[388, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [388, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [388, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [388, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[389, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [389, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.sum_distribution": [[390, 3, 2, "p-X", "X", "The distribution of the i.i.d."], [390, 3, 2, "p-n_terms", "n_terms", "The number $n$ of random variables to sum."], [390, 3, 2, "p-p", "p", "The probability of exceeding the x axis, on either side, for each distribution."]], "sdr.sum_distributions": [[391, 3, 2, "p-X", "X", "The distribution of the first random variable $X$."], [391, 3, 2, "p-Y", "Y", "The distribution of the second random variable $Y$."], [391, 3, 2, "p-p", "p", "The probability of exceeding the x axis, on either side, for each distribution."]], "sdr.tdoa_crlb": [[392, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [392, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz."], [392, 3, 2, "p-rms_bandwidth", "rms_bandwidth", "The root-mean-square (RMS) bandwidth $B_{s,text{rms}}$ in Hz."], [392, 3, 2, "p-snr1", "snr1", "The signal-to-noise ratio (SNR) of the first signal $gamma_1 = S_1 / (N_0 B_n)$ in dB."], [392, 3, 2, "p-snr2", "snr2", "The signal-to-noise ratio (SNR) of the second signal $gamma_2 = S_2 / (N_0 B_n)$ in dB."], [392, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.threshold": [[393, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [393, 3, 2, "p-detector", "detector", "The detector type."], [393, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [393, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$."], [393, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."], [393, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."]], "sdr.threshold_factor": [[394, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex."], [394, 3, 2, "p-db", "db", "Indicates whether to return the detection threshold $alpha$ in dB."], [394, 3, 2, "p-detector", "detector", "The detector type."], [394, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [394, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$."], [394, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."]], "sdr.to_complex_baseband": [[395, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_passband": [[396, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.toa_crlb": [[397, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [397, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz."], [397, 3, 2, "p-rms_bandwidth", "rms_bandwidth", "The root-mean-square (RMS) bandwidth $B_{s,text{rms}}$ in Hz."], [397, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) of the signal $gamma = S / (N_0 B_n)$ in dB."], [397, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.unpack": [[398, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [398, 3, 2, "p-dtype", "dtype", "The data type of the output array."], [398, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[399, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [399, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh_code": [[400, 3, 2, "p-index", "index", "The index $i$ in $[0, n)$ of the Walsh code."], [400, 3, 2, "p-length", "length", "The length $n = 2^m$ of the Walsh code/sequence."], [400, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[401, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu_sequence": [[402, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [402, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence."], [402, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "typeParameter", "Python type parameter"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:typeParameter", "6": "py:function"}, "terms": {e": [114, 170, 253, 254, 415], "00000004": 325, "00000008": 325, "00000010": 325, "00000020": 325, "0000010494310452": [271, 272], "0004368": 414, "0005": 419, "00088449": 334, "00095883": 414, "001": [10, 351, 419], "00110561": 334, "00147414": 334, "0017044": 414, "00175012": 414, "0018818867640235891": 334, "00221122": 334, "00254816": 414, "00391660e": 114, "0041658j": 170, "00423921": 414, "00442243": 334, "00474595": 414, "005": 419, "0058825": 414, "006151": 414, "00721645": 414, "00830241j": 170, "00845058": 414, "00851486": 414, "00e": [410, 417], "00j": [253, 254], "01": [10, 114, 170, 253, 254, 325, 410, 415, 417, 419], "010299956639812": 296, "010299956639813": 296, "01073669": 414, "0112324": 414, "01140214e": 415, "01238051j": 170, "0125": 419, "01273202": 414, "01342358": 414, "015": 419, "016796159999999997": 415, "0175": 419, "0183": 347, "01j": [253, 254], "02": [325, 415, 418, 419], "020599913279624": 300, "020599913279625": [305, 389], "02372977": 414, "02769991": 414, "03": [114, 170, 325, 410, 415, 417], "03355896": 414, "03650247": 414, "03715849e": 114, "03953322e": 415, "04": [114, 170, 325, 415, 417], "04436799": 415, "04650654": 414, "04734644": 414, "05": [325, 413, 415, 419], "05098525": 414, "05e": [410, 417], "06": [325, 339, 351], "07": 325, "07106781e": [253, 254], "07367348": 414, "07864960352514258": 341, "08": 325, "09": 325, "092337035029908": 415, "0a": 325, "0e": [339, 340], "0j": [114, 170, 229, 241, 249, 255], "0x7fba6739c450": 419, "1": [2, 3, 6, 7, 8, 10, 12, 13, 14, 17, 19, 20, 24, 25, 26, 27, 32, 33, 34, 35, 40, 43, 46, 48, 62, 64, 67, 74, 77, 81, 83, 84, 85, 88, 89, 90, 95, 96, 97, 99, 100, 101, 108, 111, 112, 114, 115, 117, 119, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 170, 173, 181, 182, 183, 188, 190, 191, 193, 194, 195, 196, 199, 200, 201, 202, 209, 211, 213, 214, 220, 224, 228, 229, 230, 232, 234, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 413, 414, 415, 417, 418, 419, 420, 421, 425], "10": [10, 40, 62, 88, 90, 97, 99, 101, 125, 132, 134, 135, 136, 138, 139, 149, 151, 157, 159, 160, 161, 163, 181, 183, 190, 196, 228, 240, 241, 248, 249, 250, 252, 254, 255, 264, 266, 267, 270, 274, 276, 278, 282, 283, 284, 286, 287, 291, 293, 296, 297, 298, 300, 303, 305, 306, 307, 308, 309, 312, 313, 315, 317, 319, 320, 321, 323, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355, 356, 357, 358, 361, 362, 366, 367, 369, 370, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 397, 400, 410, 414, 417, 418, 419, 420, 421], "100": [10, 88, 99, 114, 164, 170, 172, 178, 181, 193, 230, 232, 250, 252, 282, 284, 286, 287, 290, 295, 297, 300, 304, 311, 312, 313, 316, 326, 330, 331, 334, 336, 347, 348, 349, 355, 357, 363, 366, 370, 381, 384, 387, 392, 395, 396, 397, 399, 413, 419], "1000": [10, 114, 170, 225, 226, 228, 240, 245, 246, 248, 254, 311, 315, 395, 396, 407, 420], "10000": 62, "1001": [62, 296, 297, 320, 321, 333, 334, 351], "100_000": [320, 321, 337, 349, 390, 391, 410, 417, 420], "100e": 384, "100th": 368, "101": [24, 32, 97, 99, 274, 276, 285, 286, 287, 298, 312, 313, 320, 321, 326, 331, 337, 339, 340, 385, 386, 390, 391, 392, 394, 397, 410, 417, 418], "1024": [62, 114, 115, 119, 170, 355, 356, 358, 361, 362, 421], "10422993e": 415, "1048576": 353, "10813095e": 415, "10862468e": 415, "1093092892": 419, "10_000": [62, 380, 418], "10e": [333, 384, 410], "10e3": 372, "10th": 368, "10x": [125, 151], "11": [19, 40, 62, 90, 125, 134, 136, 139, 151, 159, 161, 183, 190, 228, 240, 248, 254, 288, 291, 293, 297, 315, 319, 320, 321, 322, 332, 338, 339, 340, 341, 375, 380, 381, 390, 391, 393, 400, 410, 415, 418], "11e": 410, "12": [40, 62, 125, 134, 136, 139, 151, 159, 161, 183, 190, 228, 240, 248, 254, 275, 277, 282, 293, 312, 313, 318, 319, 320, 321, 328, 332, 335, 339, 340, 375, 377, 380, 381, 387, 390, 391, 392, 397, 406, 414, 418, 420], "120": 407, "12169481": 333, "12240078e": 415, "12323400e": [253, 254], "1263714068241546": 415, "12670446": 414, "128": 149, "12ab": 282, "13": [125, 136, 139, 151, 161, 183, 190, 228, 240, 248, 254, 273, 274, 275, 277, 288, 293, 296, 319, 320, 321, 335, 340, 372, 375, 381], "130": 304, "13335164": 415, "139": 402, "14": [125, 136, 139, 151, 161, 183, 228, 240, 248, 254, 274, 293, 319, 320, 321, 339, 340, 347, 375, 381, 400], "140": [84, 304], "14335017": 297, "1455082": 415, "14686183e": 114, "147": 333, "14721649e": 415, "15": [125, 136, 139, 151, 161, 183, 220, 228, 240, 248, 254, 276, 293, 319, 320, 321, 329, 337, 340, 375, 381, 399, 410], "150": [395, 396, 420], "152932338": 419, "15647504e": 415, "158655": [271, 272], "15865525393145707": [271, 272], "16": [7, 125, 139, 149, 151, 183, 228, 240, 248, 250, 252, 253, 254, 282, 293, 305, 306, 308, 311, 314, 319, 320, 321, 322, 325, 335, 340, 348, 366, 375, 378, 381, 383, 388, 389, 390, 391, 394, 400, 418], "1622776601683795": [320, 321], "16j": [253, 254], "17": [125, 139, 151, 228, 253, 254, 320, 321, 340, 344, 375, 381], "1706839j": 170, "179": 139, "17j": 114, "18": [125, 139, 151, 320, 321, 322, 340, 375, 381, 390, 400, 406, 420], "180": 327, "18301321": 414, "183490056794499": 335, "18872187554086717": 32, "189": 32, "19": [125, 139, 151, 320, 321, 340, 375, 381], "1909320767063554": 415, "198": 413, "1_000": [99, 193, 230, 284, 315, 327, 349, 354, 384, 418], "1_001": [315, 337, 390, 391], "1d": [292, 364], "1e": [97, 274, 282, 285, 297, 312, 313, 320, 321, 333, 335, 337, 339, 340, 347, 351, 367, 386, 390, 391, 392, 393, 397, 410, 417, 420], "1e0": [312, 313, 367, 392, 397, 420], "1e3": [297, 315, 333, 334, 336, 395], "1e5": [312, 313, 392, 397], "1e6": [297, 312, 313, 315, 392, 397, 420], "1e7": [392, 397], "1e8": [312, 313, 392, 397], "1e9": [315, 344, 401], "1f": 149, "1j": [10, 62, 170, 304, 316, 320, 321, 336, 352, 353, 355, 356, 357, 358, 361, 362, 370, 374, 396, 399, 410, 413, 415, 417, 419], "2": [9, 10, 19, 20, 24, 32, 40, 42, 43, 49, 62, 63, 67, 75, 77, 80, 84, 88, 90, 96, 97, 98, 99, 100, 101, 108, 112, 114, 115, 119, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 170, 181, 183, 190, 193, 194, 195, 196, 203, 220, 228, 230, 232, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 406, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421], "20": [19, 24, 32, 88, 89, 90, 97, 99, 125, 139, 151, 190, 232, 274, 278, 285, 289, 292, 294, 296, 300, 303, 311, 320, 321, 325, 327, 330, 339, 340, 346, 375, 381, 382, 386, 399, 420], "200": [114, 170, 297, 304, 334, 364, 418, 420], "2000": 10, "201": 367, "2019": [125, 151, 291], "2023": [423, 424], "2024": 424, "2048": [304, 395, 396, 399], "20e": 417, "21": [125, 151, 282, 320, 321, 335, 339, 340, 344, 372, 387], "210": 84, "21002545": 385, "21565653e": 415, "21719": 149, "22": [125, 151, 320, 321, 340], "221": 333, "22464680e": [253, 254], "22961005941814036j": 415, "23": [64, 85, 125, 151, 191, 280, 320, 321, 338, 340, 344], "235": [297, 334], "23810898": 414, "23851924e": 415, "24": [125, 151, 320, 321], "2433896262681": 333, "24338963": 333, "249387366082999": [305, 306], "25": [24, 32, 62, 90, 97, 125, 151, 289, 294, 297, 303, 314, 320, 321, 413, 418, 419, 421], "250": [395, 396, 419], "253": 347, "256": [360, 368], "25e": 297, "26": [151, 320, 321, 424], "267486807285799": 335, "27": [320, 321, 322, 424], "27280811e": 114, "28": [320, 321, 419, 424], "280": 84, "2815515655446004": [320, 321], "28283804209787544j": 415, "28727058": 414, "28864626708135344": 381, "28865329576550935": 381, "2886751345948129": [380, 381], "29": [320, 321, 406, 414], "29088345066048465": 380, "299792458": 401, "2d": [56, 59, 60, 90, 285, 349, 354, 364, 367, 385, 386], "2e": [297, 333, 410, 417], "2e3": [297, 315], "2e9": 315, "2f": [410, 417, 418], "2f_": 396, "2m": 254, "2n": [96, 97, 98, 291], "2nd": [67, 211, 213, 405, 419, 424], "2p": [191, 280], "2q": 402, "3": [10, 19, 24, 32, 40, 62, 67, 75, 77, 78, 81, 84, 88, 90, 96, 97, 101, 114, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 170, 181, 183, 190, 193, 220, 228, 230, 232, 240, 242, 248, 250, 251, 252, 253, 254, 256, 264, 266, 267, 270, 273, 274, 278, 282, 284, 286, 287, 288, 289, 291, 292, 293, 294, 296, 297, 298, 300, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 367, 369, 370, 372, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 410, 415, 417, 419, 421, 423], "30": [139, 190, 193, 228, 230, 240, 248, 254, 278, 285, 292, 304, 320, 321, 322, 332, 339, 355, 357, 370, 386, 387, 395, 396, 415, 424], "300": [114, 170, 297, 334, 395, 396], "3000": 10, "30202676j": 114, "302585092994046": [320, 321, 340, 393], "3044107145": 419, "30533298": 385, "30593473301149": 311, "3061467458920719j": 415, "30614675j": 415, "31": [282, 320, 321, 347, 414], "312": 413, "32": [149, 282, 314, 320, 321, 322, 335, 400, 413, 417], "32607991": 414, "32626966": 297, "33": [79, 320, 321], "3333421398098428j": 415, "34": [78, 320, 321, 372], "35": [193, 230, 320, 321, 419], "35093841": 414, "35935288": 415, "35949665": 414, "36": [320, 321], "36139242": 415, "36272725": 330, "36787944117144245": 341, "3678794411714425": 341, "36961426": 170, "37": [320, 321], "3763214": 415, "377": 421, "37868538208862": 415, "38": 77, "3806359704987265j": 415, "3885743j": 170, "39": 75, "39261642": 415, "396": 413, "3e": 333, "3rd": 415, "3x": [84, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 190, 291], "4": [10, 19, 24, 32, 40, 62, 75, 77, 84, 88, 90, 97, 101, 114, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 170, 181, 183, 190, 193, 220, 228, 229, 230, 232, 240, 241, 242, 248, 250, 251, 252, 253, 254, 256, 264, 266, 267, 270, 273, 274, 275, 277, 278, 282, 284, 286, 287, 288, 291, 292, 293, 296, 297, 298, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 366, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 398, 399, 400, 402, 408, 413, 415, 418, 419, 420], "40": [81, 88, 139, 190, 278, 298, 304, 339], "400": [114, 170, 297, 304, 334], "4000": 10, "40270968": 415, "40e9": 315, "410342926869486": 339, "41446321": 333, "42007077": 297, "42176895e": 415, "4219690131724645": 381, "42721858e": 415, "43": 80, "43085717": 415, "437435887991374": 344, "44": [282, 285, 386], "442": 333, "44778322188337": 315, "45": [228, 229, 240, 241, 248, 251, 284, 311, 327, 336, 349, 354, 371, 372, 384, 418, 419, 420], "45557651": 415, "46": 347, "46154771": 415, "46380627201816593": 415, "468383135163": 315, "46911955": 415, "46917696": 415, "47005584": 415, "47193366e": 415, "47199608": 415, "472298696877605": 170, "4722987": 170, "47271105": 170, "47338728e": 415, "47394825": 170, "47410241": 415, "47510421": 415, "47601067": 170, "478": 415, "47820725": 415, "478207252018059": 415, "47925143": 415, "4839738": 415, "48566716": 415, "48840102": 415, "49090568": 415, "49124786": 415, "4988817673791569": 415, "499445060713011": 339, "4x": [352, 353], "5": [10, 19, 24, 32, 40, 42, 43, 62, 84, 88, 90, 96, 97, 98, 99, 100, 101, 114, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 181, 183, 190, 193, 220, 228, 230, 232, 240, 248, 254, 256, 264, 266, 267, 270, 274, 276, 278, 282, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 337, 339, 340, 341, 344, 347, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 369, 370, 372, 374, 375, 377, 378, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 399, 400, 402, 406, 407, 408, 414, 415, 418, 419, 421], "50": [228, 240, 248, 254, 300, 330, 334, 371, 372, 381, 395, 396, 413, 418], "500": [297, 334, 395, 396, 419], "5000": 10, "50118723": 330, "50e6": 300, "51": [292, 339], "51520024": 170, "5174271293851465": [320, 321, 340, 393], "52496713": 170, "5291527586123693": 415, "529544741425365": 344, "52e": 417, "53081763e": 114, "53637958": 415, "54": [282, 325], "541421484556116": 340, "5414214845561176": 340, "54974021": 385, "55": [297, 344, 372, 424], "5533811909871471": [320, 321], "5533811909871473": [320, 321], "5543277195052645": 415, "56859734": 385, "56e": 417, "57": 232, "5719707": 415, "57286400e": 415, "57338213": 170, "5759632j": 114, "57922366": 297, "58172329e": 415, "59": 385, "591745389548616": 385, "5_000": 99, "5e": [297, 333], "5x": [125, 126, 130, 138, 151, 152, 155, 163, 291], "6": [10, 19, 24, 32, 40, 62, 84, 88, 90, 101, 125, 126, 132, 134, 135, 136, 137, 138, 139, 149, 151, 152, 157, 159, 160, 161, 162, 163, 170, 181, 183, 190, 193, 220, 228, 230, 232, 240, 248, 253, 254, 256, 264, 266, 267, 270, 274, 275, 277, 278, 282, 291, 292, 293, 296, 297, 298, 300, 303, 304, 305, 306, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 329, 330, 332, 333, 334, 335, 339, 340, 341, 344, 347, 349, 350, 352, 354, 355, 356, 357, 358, 361, 362, 367, 369, 370, 371, 372, 374, 375, 378, 380, 381, 383, 384, 385, 390, 391, 392, 393, 395, 396, 397, 399, 400, 402, 406, 409, 414, 415, 419, 420], "60": [232, 285, 286, 287, 298, 326, 331, 386, 421], "6058636": 114, "61": 325, "62": [282, 325], "62720131e": 114, "63": [318, 325, 329, 332, 350], "63882791e": 415, "64": [84, 149, 314, 325, 415], "6400000000000001": 415, "6448536269514744": [320, 321], "65": 325, "6560": 332, "66": 325, "666092814306324": 339, "67": 325, "67772160e": 415, "68": 325, "684365018955985": 415, "69": 325, "6903095079298097": [320, 321], "69685122e": 415, "6a": 325, "6b": 325, "6c": 325, "6d": 325, "6e": 325, "6f": 325, "7": [19, 24, 32, 40, 62, 84, 88, 90, 101, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 181, 183, 190, 220, 228, 240, 242, 248, 253, 254, 256, 264, 266, 267, 270, 274, 278, 282, 285, 288, 291, 292, 293, 297, 303, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 326, 329, 332, 338, 339, 340, 341, 375, 380, 381, 385, 386, 390, 391, 392, 393, 397, 400, 402, 406, 415, 417, 419, 423], "70": [84, 325], "70554345409542": [320, 321], "70710678": [228, 240, 248], "70710678j": [228, 240, 248], "71": 325, "71104892744724": 415, "71930943": 415, "72": 325, "72236648e": 415, "7229165664874556": [320, 321], "7229165664874564": [320, 321], "73": 325, "732513192714245": 335, "7391036260090295": 415, "73910363": 415, "74": 325, "74077567e": 415, "7446372175904691": 380, "75": [24, 90, 287, 325, 419], "7506126339170005": [308, 388], "76": [300, 325, 410], "7630284641923553": 340, "76562500e": [114, 170], "77": [300, 325, 330], "77694738j": 170, "77873379329006": 311, "78": 325, "78207252e": 415, "78877688e": 415, "79": [325, 347], "79630028j": 114, "7a": 325, "7b": 282, "8": [40, 43, 62, 84, 88, 90, 101, 114, 125, 134, 136, 139, 149, 151, 159, 161, 170, 181, 183, 190, 196, 228, 229, 240, 241, 248, 249, 250, 252, 253, 254, 255, 256, 264, 266, 267, 270, 278, 282, 285, 291, 292, 293, 297, 303, 311, 312, 313, 314, 315, 319, 320, 321, 322, 325, 332, 335, 339, 340, 341, 344, 347, 348, 354, 355, 356, 357, 358, 361, 362, 366, 369, 370, 372, 373, 374, 375, 377, 378, 380, 381, 383, 385, 386, 387, 390, 391, 392, 393, 397, 400, 410, 414, 415, 417, 418, 419, 421], "80": [62, 64, 85, 88, 191, 280, 338, 402], "800": 364, "802": 19, "8038919141626675": 297, "8080": 406, "8096": 282, "810210290266568": 344, "81474977e": 415, "8174569": 385, "8178049": 114, "83": 344, "830810203546193": 344, "83622458e": 114, "83697020e": 253, "844241137865053": 311, "84684395e": 415, "85259041e": 415, "85986396": 385, "86109590e": 415, "87820725": 415, "88127210e": 114, "88708159": 415, "890376699230906": 311, "8912709229530473": [320, 321], "89312837e": 415, "9": [10, 40, 62, 84, 90, 114, 125, 134, 136, 139, 149, 151, 159, 161, 170, 183, 190, 228, 240, 248, 254, 256, 264, 266, 267, 270, 274, 278, 282, 291, 292, 293, 297, 303, 311, 315, 319, 320, 321, 322, 325, 332, 335, 339, 340, 341, 375, 378, 380, 381, 383, 387, 390, 391, 393, 400, 415, 417, 418, 420, 421], "9061938024368232": [320, 321, 340, 393], "9120975839632417": 297, "92": 315, "92239754": 297, "9223975406030527": 297, "93chu_sequ": 402, "94024315e": 415, "94724205": 415, "95": [282, 311, 347], "95312500e": [114, 170], "95337172": 114, "95th": 311, "9678537j": 170, "97070312e": [114, 170], "979400086720376": [308, 309], "98": 315, "98046875e": [114, 170], "98970004336019": 300, "99": 387, "99023438e": [114, 170], "9952623149688795": 330, "999": 347, "9993519409971622": 415, "A": [6, 10, 40, 43, 56, 63, 67, 75, 77, 78, 79, 80, 81, 83, 88, 101, 108, 109, 114, 125, 126, 139, 151, 152, 170, 181, 193, 196, 211, 220, 230, 241, 242, 249, 255, 257, 279, 282, 291, 292, 293, 319, 320, 321, 325, 327, 328, 335, 339, 340, 341, 344, 349, 354, 364, 377, 378, 383, 387, 393, 394, 404, 405, 407, 410, 417, 419, 423], "But": 315, "For": [97, 98, 100, 274, 275, 277, 284, 291, 298, 304, 315, 380, 381, 394, 399, 406, 414], "If": [43, 89, 95, 99, 136, 145, 161, 196, 233, 241, 249, 255, 276, 278, 283, 284, 285, 286, 287, 296, 297, 298, 303, 307, 312, 313, 318, 326, 331, 337, 339, 342, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 382, 392, 395, 397, 398, 410, 417, 423], "In": [10, 12, 18, 19, 24, 32, 40, 62, 63, 64, 84, 85, 88, 89, 90, 97, 99, 101, 109, 110, 114, 123, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 147, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 167, 170, 179, 181, 182, 183, 190, 191, 193, 194, 220, 228, 230, 231, 232, 240, 242, 248, 250, 251, 252, 253, 254, 257, 258, 264, 266, 267, 270, 271, 272, 274, 276, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 410, 413, 417, 420], "It": [43, 108, 164, 190, 196, 211, 220, 241, 249, 255, 284, 315, 339, 369, 410, 417], "One": [228, 240, 254, 421], "Or": [408, 409], "The": [10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 408, 409, 410, 414, 415, 417, 419, 420, 421, 423, 425], "Then": 232, "There": [318, 328, 329, 377, 425], "These": [164, 240, 248, 254, 297, 352, 373, 408, 419], "To": 408, "_": [228, 240, 248, 254, 282, 296, 311, 339, 410, 417], "_0": [2, 9, 96, 273, 320, 341, 351, 394, 410, 417], "_1": [2, 9, 96, 273, 321, 340, 351, 410, 417], "____": 278, "__call__": [10, 11, 12, 18, 24, 27, 32, 35, 56, 57, 62, 63, 64, 84, 85, 88, 89, 90, 94, 108, 109, 110, 123, 125, 127, 139, 140, 141, 147, 149, 164, 165, 166, 167, 179, 181, 182, 190, 191, 193, 194, 211, 212, 220, 223, 230, 231, 232, 233, 242, 243, 256, 257, 258, 278, 279, 280, 424], "__init__": 407, "__len__": [40, 62, 84, 88, 108, 111, 149, 183, 185, 190, 230, 256, 278], "_filter": 421, "_filter_design": 415, "_rc_param": 373, "_scalartype_co": [9, 232, 233, 369, 372], "_version": 407, "a1": [410, 417], "a2": [320, 321, 410, 417], "a_": [64, 85, 191, 220, 221, 222, 224, 280, 338], "a_0": 164, "a_1": [410, 417], "a_2": 410, "a_hat": [419, 420], "a_j": [164, 167, 168, 181, 193, 355, 356, 357, 358, 361, 362, 370, 374, 415], "a_receiv": [220, 221, 224], "a_ref": 220, "a_refer": [220, 222, 224], "a_rx": 220, "a_tap": [164, 168, 181, 193, 415], "a_tild": [195, 199, 228, 240, 248, 254, 419, 420], "ab": [88, 136, 161, 181, 320, 321, 410, 417, 421], "abil": 424, "about": [149, 286, 287, 352, 353, 372, 380, 381, 409], "abov": [304, 399, 424], "absent": 341, "absolut": [229, 232, 234, 237, 241, 255, 316, 367, 385, 410, 417], "abstract": [42, 44, 53, 195, 197, 207], "acceler": 423, "accept": 424, "access": 406, "accomplish": [413, 420], "accord": [10, 312, 313, 392, 397], "accordingli": 181, "accumul": [101, 181, 232, 233, 234, 236, 419, 424], "accur": [337, 390, 391], "acf": 424, "achiev": [2, 282, 292, 335, 339, 340, 341, 381, 385, 387, 393, 410, 417, 420, 421, 424], "across": [40, 62, 88, 258, 282, 310, 315, 324, 335, 339, 387, 394], "activ": 408, "actual": 353, "ad": [284, 349, 354, 364, 407, 423, 424], "add": [101, 103, 106, 228, 240, 248, 254, 284, 316, 323, 349, 354, 364, 379, 384, 404, 420, 425], "adder": [10, 19, 84, 125, 151, 211, 232, 301, 302, 419], "addit": [0, 5, 19, 20, 284, 285, 292, 318, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 399, 404, 410, 417, 423, 424], "addition": [125, 423], "additivescrambl": [0, 19, 20, 21, 22, 23, 424], "addopt": 409, "adjac": [43, 229, 241, 249, 253, 255, 420, 421], "advanc": [191, 280, 387], "affect": [320, 321, 335, 339, 340, 341, 378, 383, 393, 394], "after": [12, 13, 14, 267, 270, 292, 339, 407], "against": [282, 347, 352], "agc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 220, 405, 423, 424], "aid": [220, 225, 242, 245], "aim": 423, "alarm": [2, 96, 97, 98, 99, 100, 273, 274, 275, 276, 277, 282, 320, 321, 335, 339, 340, 341, 347, 351, 365, 387, 393, 394, 410, 417, 423, 424], "albersheim": [2, 282, 335, 424], "algorithm": [291, 298, 352, 424], "alias": [304, 399, 424], "align": [63, 109, 191, 240, 257, 279, 280, 292, 322, 352, 400, 410, 413, 417], "all": [20, 62, 84, 101, 106, 126, 128, 152, 153, 190, 233, 256, 258, 265, 278, 311, 352, 354, 363, 364, 377, 407, 409, 423, 424], "allow": [320, 321, 335, 340, 341, 380, 381, 393, 394, 408, 409, 423, 424], "along": [283, 291, 307, 310, 324, 343, 345, 424], "alouini": [250, 252], "alpha": [2, 8, 10, 12, 13, 62, 193, 194, 196, 241, 249, 255, 317, 373, 378, 383, 394, 418, 421], "alphabet": [24, 25, 26, 32, 33, 34, 90, 92, 93, 95, 303], "also": [10, 62, 136, 161, 220, 228, 242, 314, 315, 317, 369, 423], "altern": [2, 96, 273, 282, 321, 410, 415, 417], "although": 228, "amalia": 387, "ambigu": 298, "amplifi": [10, 12, 14], "amplitud": [8, 62, 195, 196, 220, 221, 222, 224, 292, 327, 410, 417, 419], "an": [0, 2, 3, 5, 7, 10, 12, 19, 20, 32, 43, 62, 84, 88, 96, 108, 110, 114, 116, 134, 136, 138, 150, 159, 161, 163, 164, 165, 167, 170, 172, 181, 182, 183, 184, 190, 193, 194, 196, 229, 230, 232, 241, 249, 250, 252, 255, 273, 278, 285, 297, 314, 333, 334, 342, 348, 352, 353, 357, 366, 372, 377, 398, 401, 405, 408, 419, 423, 424], "analysi": [67, 74, 337, 390, 391, 407, 419, 423, 424], "analyz": 423, "analyze_psk": 420, "angl": [9, 242, 316, 362, 419], "angular": 139, "ani": [62, 84, 88, 108, 114, 149, 164, 170, 181, 190, 193, 230, 232, 233, 256, 278, 288, 300, 304, 318, 322, 329, 330, 332, 339, 369, 372, 399, 400, 403, 409], "annot": [253, 285, 351, 371, 386, 407, 424], "answer": 315, "antenna": [315, 344, 423], "anti": [304, 399, 424], "apa": 423, "apart": 240, "api": [423, 424, 425], "apm": 387, "appear": [10, 413], "append": [150, 314, 395, 418], "appendix": [67, 211, 317, 378, 383], "appli": [9, 46, 62, 84, 89, 190, 196, 228, 240, 248, 254, 278, 286, 287, 316, 326, 327, 331, 349, 352, 353, 354, 357, 360, 368, 371, 372, 373, 381, 384, 404, 423], "applic": [125, 151, 291], "approach": [10, 24, 32, 67, 75, 77, 78, 79, 80, 81, 88, 139, 211, 220, 242, 290, 295, 378, 383, 385, 419], "appropri": 32, "approx": [12, 13, 14, 149], "approxim": [193, 194, 282, 298, 347, 423, 424], "ar": [24, 26, 27, 32, 42, 43, 52, 55, 62, 63, 64, 84, 85, 89, 90, 96, 101, 103, 104, 105, 107, 109, 110, 125, 136, 138, 141, 150, 151, 163, 165, 167, 182, 190, 191, 194, 196, 206, 210, 228, 229, 231, 233, 240, 241, 248, 249, 254, 255, 256, 257, 258, 265, 267, 270, 273, 278, 279, 280, 285, 289, 290, 291, 294, 295, 297, 298, 312, 313, 314, 315, 318, 322, 323, 328, 329, 332, 337, 338, 342, 349, 350, 352, 354, 355, 356, 358, 360, 361, 362, 363, 364, 368, 369, 371, 372, 373, 375, 377, 379, 387, 392, 395, 396, 397, 400, 406, 408, 410, 413, 415, 417, 419, 421, 423, 425], "arang": [10, 40, 62, 84, 139, 149, 183, 190, 264, 266, 267, 270, 278, 284, 298, 304, 316, 336, 339, 352, 353, 375, 395, 396, 399, 413, 419], "arbitrari": [0, 8, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 183, 184, 195, 412, 423, 424], "arcsin": 344, "aren": 406, "arg": 407, "argument": [63, 64, 85, 109, 191, 257, 279, 280, 296, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 407, 414, 415, 424], "arithmet": [125, 130, 131, 151, 155, 156], "around": [149, 229, 241, 249, 255, 369], "arrai": [7, 19, 24, 32, 40, 43, 63, 90, 101, 114, 136, 161, 170, 183, 191, 196, 228, 229, 232, 240, 241, 248, 249, 253, 254, 255, 264, 266, 267, 270, 280, 283, 288, 289, 293, 294, 297, 301, 302, 303, 307, 310, 318, 319, 322, 324, 329, 332, 333, 334, 342, 343, 345, 372, 375, 385, 387, 398, 400, 415, 419], "arrang": 375, "array_equ": [19, 228, 240, 248, 254, 291, 322, 400], "arraylik": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 21, 23, 24, 27, 29, 32, 35, 37, 40, 42, 43, 44, 46, 48, 53, 56, 57, 62, 63, 64, 84, 85, 88, 90, 94, 95, 96, 97, 98, 99, 100, 101, 103, 108, 109, 110, 125, 126, 128, 134, 139, 140, 145, 149, 151, 152, 153, 159, 164, 165, 166, 167, 181, 183, 184, 186, 187, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 207, 211, 212, 220, 223, 228, 229, 230, 240, 241, 242, 243, 248, 249, 250, 252, 254, 255, 256, 257, 258, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 325, 327, 330, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 374, 375, 376, 380, 381, 382, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404], "arriv": [4, 312, 313, 392, 397], "ascend": [101, 106], "assum": [95, 96, 273, 284, 303, 312, 313, 315, 342, 372, 385, 392, 397, 398], "astral": 407, "astyp": [282, 339, 347], "asymmetr": 396, "attack": [10, 12, 13], "atten": [64, 85, 191, 280, 338, 424], "attenu": [12, 13, 64, 85, 191, 280, 315, 338, 378, 383], "august": 424, "author": 423, "auto": [288, 318, 322, 329, 332, 350, 356, 358, 360, 361, 362, 368, 400, 402, 424], "automat": [10, 11, 12, 220, 351, 405, 423, 424], "avail": [419, 420, 423], "averag": [3, 6, 101, 193, 194, 220, 225, 226, 228, 230, 231, 240, 242, 245, 246, 254, 283, 284, 285, 311, 343, 360, 380, 416, 423, 424], "average_pow": [6, 283, 343, 424], "avg": [283, 284, 343], "awgn": [5, 228, 240, 248, 250, 252, 254, 284, 285, 292, 311, 348, 349, 366, 367, 385, 386, 395, 396, 404, 420, 423, 424], "awgn_capac": [5, 285, 385, 386, 424], "ax": [9, 282, 283, 307, 310, 324, 343, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 387, 424], "axi": [283, 307, 310, 324, 337, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 390, 391, 410, 413, 417, 424], "axvlin": [285, 386, 410, 417], "b": [3, 62, 84, 164, 167, 190, 256, 258, 259, 264, 266, 267, 270, 278, 282, 285, 312, 313, 317, 325, 355, 357, 370, 375, 406, 407, 415, 421], "b_": [6, 312, 313, 380, 392, 397], "b_c": 297, "b_i": [164, 167, 169, 181, 193, 355, 356, 357, 358, 361, 362, 370, 374, 415], "b_n": [62, 67, 68, 69, 74, 75, 77, 80, 81, 84, 88, 108, 117, 149, 164, 173, 181, 190, 193, 211, 213, 217, 230, 256, 278, 296, 312, 313, 392, 397], "b_nt": 419, "b_tap": [164, 169, 181, 193, 415], "backward": [136, 161, 181, 182, 424, 425], "band": 149, "bandpass": [3, 286], "bandpass_fir": [3, 286, 424], "bandstop": [3, 287], "bandstop_fir": [3, 287, 424], "bandwidth": [6, 62, 67, 68, 69, 74, 78, 84, 88, 89, 108, 117, 149, 164, 173, 181, 190, 193, 211, 213, 217, 230, 256, 278, 285, 286, 287, 296, 297, 312, 313, 317, 378, 380, 383, 386, 392, 397, 419, 421, 423, 424], "barker": [288, 403, 423, 424], "barker_cod": [288, 403, 424], "barrio": 387, "base": [56, 337, 350, 352, 353, 354, 363, 364, 369, 372, 390, 404, 424], "baseband": [3, 9, 67, 228, 240, 248, 254, 336, 354, 363, 395, 396, 418, 419, 424], "bb": [67, 418, 419], "bb_papr": 418, "bch": 291, "beamwidth": [5, 344], "bec": [5, 24, 25, 26, 28, 29, 31, 90, 289, 290, 303, 404, 423, 424], "bec_capac": [5, 290, 424], "becaus": [220, 322, 335, 394, 400], "befor": [267, 270, 335, 339, 352, 419, 425], "begin": [240, 254, 273, 292, 318, 328, 354, 377, 378, 383, 410, 417], "being": 421, "below": [291, 385, 406, 414, 415], "benchmark": 408, "benefici": 408, "benefit": 352, "ber": [6, 9, 42, 44, 101, 195, 197, 228, 240, 248, 250, 254, 348, 367, 420, 423, 424], "berlekamp": [291, 424], "berlekamp_massei": [125, 151, 291, 403, 424], "best": [150, 314, 380, 381], "beta": [10, 12, 14], "better": [339, 381], "between": [3, 6, 9, 12, 18, 64, 84, 85, 89, 90, 110, 123, 141, 147, 165, 167, 179, 182, 190, 191, 194, 231, 242, 258, 278, 280, 282, 292, 297, 310, 315, 324, 350, 352, 360, 364, 368, 399, 419, 423], "bi": [5, 292, 423, 424], "biawgn_capac": [5, 292, 424], "bibtex": 423, "bin": [43, 229, 241, 249, 253, 255, 297, 311, 320, 321, 337, 349, 352, 364, 371, 390, 391, 410, 417, 420], "binari": [5, 7, 19, 21, 23, 24, 27, 28, 32, 35, 36, 43, 90, 229, 241, 249, 253, 255, 288, 289, 290, 292, 293, 294, 295, 303, 318, 322, 329, 342, 371, 385, 398, 400, 403, 404, 420, 423, 424], "binary_cod": [293, 403, 424], "binaryerasurechannel": [24, 25, 26, 27, 28, 29, 30, 31, 404, 424], "binarysymmetricchannel": [32, 33, 34, 35, 36, 37, 38, 39, 404, 424], "bipolar": [288, 318, 322, 329, 332, 350, 400, 424], "bit": [5, 6, 7, 9, 24, 29, 30, 32, 37, 38, 42, 43, 44, 45, 56, 59, 60, 90, 101, 103, 106, 195, 197, 198, 228, 229, 240, 241, 248, 249, 250, 253, 254, 255, 285, 289, 290, 292, 294, 295, 305, 306, 308, 325, 342, 348, 367, 385, 386, 388, 398, 423, 424], "black": 424, "blackman": [89, 286, 287, 326, 331], "blackmanharri": [286, 287, 326, 331], "blank": 407, "block": [0, 10, 19, 40, 41, 62, 67, 84, 108, 190, 193, 211, 232, 278, 301, 302, 423], "blockinterleav": [0, 40, 41, 424], "bn": [67, 68], "bnt": [67, 69, 419], "bold": 373, "bool": [6, 10, 12, 18, 62, 64, 84, 85, 88, 89, 97, 98, 99, 100, 108, 110, 114, 123, 139, 141, 147, 149, 164, 165, 167, 170, 179, 181, 182, 190, 191, 193, 194, 228, 230, 231, 240, 248, 250, 252, 254, 256, 258, 274, 275, 276, 277, 278, 280, 283, 307, 318, 320, 321, 328, 335, 336, 339, 340, 341, 345, 346, 349, 351, 352, 353, 354, 362, 364, 371, 372, 376, 382, 393, 394, 403], "boolean": 328, "both": [20, 128, 138, 153, 163, 220, 242, 296, 298, 312, 315, 339, 349, 350, 352, 353, 371, 372, 373, 392], "bottom": [62, 84, 190, 256, 258, 262, 265, 278], "bound": [4, 292, 312, 313, 337, 390, 391, 392, 397, 423, 424], "boundari": [62, 228], "bp": [1, 42, 45, 195, 198, 228, 240, 248, 254, 305, 306, 308, 388, 420], "bpe": [7, 342, 398], "bpsk": [232, 250, 252, 292, 348, 366, 367, 380, 381, 418], "bpsk_bb_papr": 418, "bpsk_ber": 420, "bpsk_pb_papr": 418, "bpsk_ser": 420, "branch": [3, 62, 84, 190, 256, 258, 259, 267, 270, 278, 375, 407, 408], "brown": 325, "browser": 406, "bsc": [5, 32, 33, 34, 36, 37, 39, 90, 292, 294, 295, 303, 404, 423, 424], "bsc_capac": [5, 292, 295, 424], "budget": [423, 424], "bug": [424, 425], "bugbear": 407, "build": [407, 423], "built": 406, "bursti": 10, "byte": [7, 325], "c": [19, 20, 24, 29, 30, 32, 37, 38, 40, 41, 56, 59, 60, 62, 63, 64, 65, 67, 75, 77, 78, 79, 80, 81, 90, 103, 104, 105, 106, 107, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 195, 196, 209, 211, 228, 240, 248, 253, 254, 285, 290, 291, 292, 295, 315, 316, 318, 332, 344, 371, 385, 386, 395, 396, 401, 403, 419], "c_": [20, 125, 126, 128, 129, 130, 137, 151, 152, 153, 154, 155, 162, 291, 292, 402], "c_0": [19, 125, 126, 137, 151, 152, 162], "c_1": [19, 125, 126, 137, 151, 152, 162], "c_2": 151, "c_hard": 292, "c_n": [19, 125, 151], "c_soft": 292, "c_ub": 292, "calcul": [4, 5, 7, 24, 29, 32, 37, 285, 290, 292, 295, 298, 311, 312, 313, 315, 333, 334, 337, 344, 380, 381, 385, 386, 390, 391, 392, 397, 401, 410, 417, 423, 424], "call": [12, 18, 63, 64, 84, 85, 89, 109, 110, 123, 136, 141, 147, 161, 165, 167, 179, 182, 190, 191, 194, 231, 257, 258, 278, 279, 280], "can": [101, 103, 104, 105, 107, 211, 228, 256, 284, 311, 317, 322, 342, 354, 357, 381, 385, 400, 408, 410, 414, 415, 417, 420, 423, 425], "cannot": [211, 339], "capac": [24, 29, 30, 32, 37, 38, 56, 59, 60, 90, 285, 290, 292, 295, 385, 386, 423, 424], "carrier": [80, 248], "cascad": [240, 248, 254, 354], "case": [84, 190, 254, 273, 278, 292, 297, 315, 318, 328, 377, 378, 383], "caution": [103, 104, 105, 107], "ccdf": [7, 271, 272], "ccf": 424, "cdot": [20, 62, 84, 88, 108, 125, 128, 129, 130, 142, 151, 153, 154, 155, 190, 193, 220, 242, 256, 257, 268, 278, 279, 286, 287, 291, 292, 312, 313, 326, 327, 329, 331, 336, 337, 347, 380, 381, 392, 397], "center": [62, 286, 287, 314, 315, 323, 326, 331, 352, 353, 372, 379, 395, 396, 424], "center_freq": [3, 286, 287], "central": [410, 417], "centroid": [312, 313, 380, 381, 392, 397], "cf": 299, "cgl": [2, 297, 333, 334, 423], "chang": [43, 47, 316, 408, 425], "channel": [3, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 90, 91, 92, 93, 94, 95, 228, 240, 250, 252, 256, 258, 265, 285, 289, 290, 292, 294, 295, 303, 348, 366, 385, 386, 423, 424], "chapter": [24, 32, 62, 84, 90, 190, 250, 252, 278, 292, 318, 328, 338, 375, 377], "characterist": [9, 20, 96, 99, 125, 128, 129, 130, 151, 153, 154, 155, 273, 276, 291, 332, 340, 365, 423, 424], "characteristic_poli": [19, 20, 125, 126, 128, 129, 130, 138, 151, 152, 153, 154, 155, 163, 291], "charlong": 424, "chaudhari": [10, 139], "chebwin": [286, 287, 326, 331], "chebyshev": [286, 287, 326, 331], "check": [407, 424], "chi": [387, 410, 417], "chi2": [410, 417], "chi_": [96, 97, 98, 410, 417], "chi_n": [96, 97, 98, 100], "chirp": 211, "chu": [402, 403, 423, 424], "ci": 406, "circl": [229, 241, 249, 255, 415], "circular": [288, 318, 322, 329, 332, 350, 400, 402], "cite": 423, "claim": [282, 347, 387], "clairvoy": [2, 273], "class": [0, 2, 3, 6, 8, 10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 96, 101, 103, 104, 105, 106, 107, 108, 125, 131, 139, 149, 151, 156, 164, 181, 183, 190, 193, 195, 211, 220, 228, 230, 232, 240, 242, 248, 254, 256, 273, 278, 403, 404, 405, 414, 415, 420, 423, 424], "classmethod": [125, 126, 151, 152, 164, 165, 181, 193], "clockwis": [229, 241, 249, 255], "clone": 408, "close": [67, 74, 76, 292, 353, 405, 423, 424], "closedlooppl": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 405, 419, 424], "closer": 380, "cmap": [349, 364], "cn": [273, 284, 410, 417], "cn0": [67, 80], "co": [84, 139, 190, 232, 278, 336, 378, 383], "code": [42, 43, 45, 195, 198, 228, 229, 240, 241, 248, 249, 253, 254, 255, 288, 293, 305, 306, 308, 318, 319, 322, 329, 349, 371, 385, 388, 400, 403, 408, 420, 423, 424], "coeff": [126, 137, 152, 162], "coeffici": [42, 52, 55, 62, 64, 84, 85, 108, 110, 164, 167, 190, 191, 206, 210, 258, 278, 280, 332, 355, 356, 357, 358, 361, 362, 370, 374, 375, 414, 415], "coher": [97, 98, 99, 100, 282, 292, 296, 297, 312, 313, 320, 321, 333, 334, 335, 339, 340, 341, 347, 387, 392, 393, 394, 397, 411, 423, 424], "coherent_gain": [2, 282, 296, 339, 347, 410, 424], "coherent_gain_loss": [2, 297, 424], "col": [40, 41], "collaps": 407, "collect": 364, "color": [62, 88, 181, 282, 285, 339, 347, 350, 352, 353, 354, 363, 364, 369, 372, 386, 410, 417, 418, 421], "colorbar": [349, 354, 364], "column": [40, 41, 375], "com": [282, 286, 287, 314, 317, 322, 326, 331, 338, 387, 400, 407, 408, 423], "combin": [282, 318, 335, 347, 387], "come": 352, "comm": [322, 400], "command": [406, 407], "commit": 408, "common": [410, 417], "commonli": 297, "commun": [10, 24, 32, 62, 67, 75, 77, 78, 79, 80, 81, 84, 88, 90, 139, 190, 211, 220, 242, 250, 252, 278, 318, 328, 338, 375, 377, 378, 383, 419, 423], "commut": [62, 84, 190, 256, 258, 262, 265, 278], "compar": [139, 181, 193, 220, 230, 242, 250, 252, 282, 286, 287, 296, 314, 320, 321, 326, 331, 332, 335, 339, 340, 347, 352, 357, 367, 369, 380, 381, 387, 410, 417, 421], "comparison": [139, 220, 242, 282, 347, 407], "compat": 425, "complementari": [271, 272], "complex": [3, 6, 9, 42, 43, 46, 48, 62, 67, 84, 88, 96, 97, 98, 99, 100, 108, 114, 149, 164, 170, 181, 190, 193, 195, 196, 199, 200, 201, 202, 209, 220, 223, 228, 229, 230, 232, 233, 239, 240, 241, 242, 243, 248, 249, 253, 254, 255, 256, 273, 274, 275, 276, 277, 278, 284, 285, 304, 311, 320, 321, 327, 335, 336, 339, 340, 341, 349, 350, 352, 353, 354, 356, 358, 360, 361, 362, 368, 371, 372, 393, 394, 395, 396, 399, 404, 410, 413, 414, 415, 417, 419, 420, 423, 424], "complex128": [3, 10, 11, 42, 48, 62, 84, 88, 108, 114, 149, 164, 170, 181, 190, 193, 195, 199, 200, 201, 202, 209, 228, 230, 232, 233, 239, 240, 248, 253, 254, 256, 278, 327, 395, 402, 403, 404], "complex_symbol": [228, 240, 248, 254], "compon": [327, 395, 396, 399], "composit": 298, "composite_snr": [4, 298, 424], "comput": [2, 7, 42, 44, 53, 56, 59, 84, 90, 96, 97, 98, 99, 100, 114, 170, 195, 197, 207, 220, 228, 240, 242, 248, 250, 252, 254, 271, 272, 273, 274, 275, 276, 277, 283, 284, 296, 297, 307, 310, 315, 320, 321, 324, 333, 334, 335, 337, 339, 340, 341, 343, 345, 350, 352, 390, 391, 393, 394, 414, 415, 419, 421, 423, 424], "computation": 423, "concaten": [139, 415], "condit": [292, 410, 417], "config": [407, 410, 413, 414, 415, 417, 418, 419, 420, 421], "configur": [56, 59, 90, 125, 151, 419], "confus": 315, "conj": [170, 355, 356, 357, 358, 361, 362, 370, 374, 415, 419], "conjug": [395, 396, 415], "connect": [62, 84, 190, 256, 258, 262, 265, 278], "consecut": [41, 43, 229, 241, 249, 255], "consid": [228, 325, 352], "consist": [62, 84, 88, 103, 104, 105, 106, 107, 108, 121, 139, 146, 149, 190, 230, 256, 278], "constant": [211, 228, 232, 234, 236, 298, 312, 313, 315, 316, 339, 360, 368, 392, 397, 410, 415, 417, 419], "constel": [9, 228, 240, 248, 251, 254, 284, 311, 327, 349, 384, 402, 423, 424], "constrained_layout": 373, "construct": 19, "contain": [101, 184, 284, 318, 325], "content": 304, "contigu": [410, 417], "continu": [9, 42, 43, 181, 228, 363, 381, 413, 423, 424], "control": [10, 11, 12, 67, 220, 232, 234, 378, 383, 419, 423, 424], "conveni": [292, 414, 415], "convent": [240, 254, 407], "convers": [419, 423, 424], "convert": [1, 3, 125, 138, 151, 163, 195, 199, 201, 228, 240, 248, 254, 300, 305, 306, 308, 309, 320, 321, 325, 330, 335, 339, 340, 341, 388, 389, 393, 394, 395, 396], "convolut": [63, 109, 190, 257, 279, 337, 390, 391], "convolv": 108, "coordin": 369, "copi": 399, "correctli": [312, 313, 392, 397], "correl": [2, 9, 273, 288, 312, 313, 318, 322, 328, 329, 332, 350, 377, 387, 392, 397, 400, 402, 423, 424], "correspond": [20, 101, 106, 126, 128, 134, 142, 152, 153, 159, 261, 332, 352, 364], "cosin": [8, 88, 181, 196, 232, 233, 241, 249, 255, 354, 372, 378, 380, 381, 383, 414, 423, 424], "cost": 352, "count": [101, 104, 311], "count_nonzero": [24, 32, 90], "counter": [229, 241, 249, 255], "cov": 408, "cp": 232, "cpfsk": 228, "cpm": [8, 9, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 363, 423, 424], "cram\u00e9r": [4, 312, 313, 392, 397, 423, 424], "creat": [10, 12, 19, 20, 24, 28, 32, 36, 40, 41, 42, 43, 56, 58, 62, 64, 67, 74, 84, 85, 88, 89, 90, 95, 101, 102, 108, 110, 125, 126, 128, 134, 138, 139, 141, 149, 150, 151, 152, 153, 159, 163, 164, 165, 167, 181, 182, 183, 184, 190, 191, 193, 194, 195, 196, 211, 213, 228, 229, 230, 231, 232, 234, 240, 241, 248, 249, 251, 254, 255, 256, 258, 278, 280, 284, 288, 311, 316, 318, 322, 329, 336, 352, 353, 380, 381, 384, 395, 396, 400, 402, 413, 419, 421], "create_x": [410, 417], "crest": [6, 299], "crest_factor": [6, 299, 343, 424], "critic": [74, 83, 213, 214, 352, 353, 419], "crlb": [4, 298, 312, 313, 392, 397, 424], "cross": [318, 322, 328, 329, 332, 377, 400, 402, 424], "cryptographi": [125, 151, 291], "cubic": 139, "cumsum": 421, "cumul": [271, 272], "current": [10, 15, 125, 135, 142, 151, 160, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 408], "curv": [9, 96, 99, 250, 252, 273, 276, 282, 298, 347, 348, 365, 366, 367, 424], "custom": [43, 62, 66, 84, 86, 183, 190, 192, 196, 241, 249, 255, 278, 281, 424], "cutoff": [326, 331], "cutoff_freq": [3, 326, 331], "cw": 304, "cycl": [316, 350, 352, 353, 369, 372], "cyclic": 402, "d": [7, 63, 88, 108, 112, 125, 139, 142, 149, 151, 230, 291, 310, 315, 324, 344, 390, 406, 407, 408, 410, 417, 423], "d200": 407, "d205": 407, "d212": 407, "d213": 407, "d415": 407, "da": [220, 242], "da_error": [220, 242], "damp": [67, 74, 83, 211, 213, 214, 419], "damping_factor": [67, 74, 211, 213, 214], "dash": [282, 350, 352, 353, 372], "data": [8, 220, 225, 242, 245, 301, 302, 325, 342, 372, 398, 423], "data_aided_error": [220, 225, 242, 245], "datetimez": 407, "db": [1, 5, 6, 44, 53, 62, 64, 67, 78, 80, 85, 97, 99, 101, 103, 104, 105, 107, 181, 191, 197, 207, 228, 240, 248, 250, 252, 254, 274, 276, 280, 282, 283, 284, 285, 286, 287, 292, 296, 297, 298, 300, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 320, 321, 326, 327, 330, 331, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 359, 366, 376, 382, 385, 386, 387, 388, 389, 392, 394, 397, 410, 417, 418, 420, 421, 424], "dbi": [315, 344], "dbm": [300, 330], "dbv": [300, 330], "dc": [181, 314, 353], "dd": [242, 419, 424], "dd_error": [220, 242], "de": [250, 252, 419, 424], "debug": 409, "decad": [114, 170, 355, 356, 358, 361, 362, 414, 419], "decai": [10, 12, 14, 413, 415], "decemb": 424, "decibel": [283, 300, 307, 330, 345, 346, 376, 382, 423, 424], "decide_symbol": [195, 199, 228, 240, 248, 254, 419, 420, 424], "decim": [3, 42, 43, 46, 48, 52, 62, 84, 85, 86, 87, 190, 195, 196, 199, 200, 201, 202, 206, 209, 228, 229, 240, 241, 248, 249, 253, 254, 255, 256, 258, 260, 262, 265, 278, 280, 304, 332, 338, 420, 423, 424], "decis": [32, 42, 46, 195, 199, 200, 220, 223, 226, 228, 240, 242, 243, 246, 248, 254, 292, 419], "decision_directed_error": [220, 226, 242, 246], "decod": [8, 291, 301], "decompos": [3, 62, 84, 190, 278, 375], "decomposit": [267, 270, 424], "decorrel": 387, "decreas": [10, 315, 335], "def": [410, 413, 417, 418, 420], "default": [9, 20, 43, 116, 122, 126, 128, 134, 136, 152, 153, 159, 161, 229, 241, 249, 253, 255, 283, 288, 291, 307, 310, 318, 322, 324, 329, 332, 343, 345, 349, 356, 358, 360, 361, 362, 364, 368, 371, 373, 400, 420, 424], "default_rng": [28, 36, 58, 61, 95, 284, 289, 294, 303, 410, 417], "defin": [67, 90, 108, 125, 129, 130, 131, 133, 137, 151, 154, 155, 156, 158, 162, 164, 181, 284, 292, 297, 303, 317, 339, 340, 341, 352, 353, 365, 378, 383, 394, 402, 405, 415, 423], "definit": [89, 286, 287, 326, 331, 352, 353, 355, 356, 357, 358, 360, 361, 362, 368, 370, 374, 424], "deg": [327, 419], "degre": [19, 42, 43, 50, 125, 133, 151, 158, 195, 196, 204, 228, 229, 240, 241, 248, 249, 251, 254, 255, 291, 316, 318, 327, 328, 329, 332, 336, 344, 377, 387, 403, 410, 417, 419, 424], "deinterleav": [40, 183, 186, 188], "delai": [3, 9, 62, 63, 84, 88, 108, 109, 112, 115, 119, 139, 142, 149, 150, 190, 211, 230, 232, 256, 257, 261, 278, 279, 301, 302, 314, 323, 356, 361, 379, 419, 423, 424], "delta": [43, 47, 75, 77, 116, 149, 150, 172, 297, 314, 316, 333, 334, 357, 384, 414, 415], "demodul": [8, 42, 46, 195, 200, 228, 240, 248, 254, 424], "demonstr": 375, "denomin": 415, "densiti": [5, 9, 80, 292, 320, 321, 337, 340, 341, 351, 354, 360, 380, 385, 390, 391, 392, 393, 397, 410, 417, 418, 421, 423], "depend": [291, 315, 406, 407, 409, 424], "deprec": 419, "deprecationwarn": 419, "deriv": 88, "descrambl": [19, 21], "design": [3, 43, 62, 64, 66, 84, 85, 86, 149, 190, 191, 192, 196, 241, 249, 255, 278, 280, 281, 286, 287, 314, 326, 331, 338, 406, 423, 424], "design_bandpass_fir": 424, "design_bandstop_fir": 424, "design_frac_delay_fir": 424, "design_highpass_fir": 424, "design_lowpass_fir": 424, "design_multirate_fir": 424, "design_multirate_tap": 424, "designbandpassfir": 286, "designbandstopfir": 287, "designfracdelayfir": 314, "designhighpassfir": 326, "designlowpassfir": 331, "designmultiratefir": 338, "desir": [2, 10, 12, 16, 282, 284, 335, 339, 347, 387, 393, 394, 417, 420], "detail": [89, 286, 287, 326, 331, 352, 353, 360, 368], "detect": [96, 97, 98, 99, 100, 220, 223, 225, 226, 242, 243, 245, 246, 273, 274, 275, 276, 277, 282, 292, 296, 297, 320, 321, 335, 339, 340, 341, 347, 351, 359, 365, 387, 393, 394, 423, 424], "detection_pdf": 424, "detector": [9, 32, 67, 73, 74, 96, 213, 220, 227, 242, 247, 273, 282, 320, 321, 335, 339, 340, 341, 347, 351, 393, 394, 419, 423, 424], "detector_pdf": [9, 320, 321, 340, 341, 351, 393], "determin": [41, 291, 328, 337, 364, 390, 391, 403, 410, 417], "detrend": [360, 368], "dev": [407, 409], "develop": [407, 408, 409], "deviat": [43, 47, 312, 313, 392, 397, 410, 417], "df": [380, 392, 397], "dft": [9, 297, 352, 353, 423, 424], "diagram": [9, 10, 19, 62, 67, 84, 108, 190, 193, 211, 228, 232, 240, 248, 254, 278, 301, 302, 354, 423, 424], "diamet": [315, 344], "dictat": [63, 109, 257, 279, 332], "diff": [350, 352, 353, 372, 418], "diff_decod": [8, 301, 302, 424], "diff_encod": [8, 228, 240, 248, 250, 252, 254, 301, 302, 424], "differ": [4, 43, 138, 163, 164, 193, 229, 241, 249, 253, 255, 282, 286, 287, 298, 312, 314, 322, 326, 331, 332, 339, 350, 352, 353, 357, 372, 392, 400, 402, 421], "differenti": [3, 8, 88, 89, 228, 250, 252, 292, 301, 302, 350, 352, 353, 372, 423, 424], "digit": [10, 24, 32, 67, 75, 77, 78, 79, 80, 81, 88, 90, 139, 211, 220, 242, 250, 252, 318, 328, 377, 378, 383, 419, 423, 424], "dipol": 315, "direct": [136, 161, 220, 226, 242, 246, 424], "directori": [406, 408], "dirhtml": 406, "disabl": 407, "discard": [3, 62, 84, 278, 304], "discret": [9, 10, 62, 67, 75, 77, 78, 79, 80, 81, 88, 90, 95, 139, 181, 193, 211, 220, 230, 242, 284, 303, 309, 352, 353, 378, 381, 383, 389, 404, 413, 419, 423, 424], "discretememorylesschannel": [90, 91, 92, 93, 94, 95, 404, 424], "dish": [315, 344], "displai": [325, 349, 355, 356, 358, 360, 361, 362, 368, 371], "displaystyl": [254, 378, 383], "dist": 407, "distanc": [5, 310, 315, 324, 423, 424], "distinct": [228, 240, 254], "distribut": [2, 7, 271, 272, 320, 321, 337, 351, 390, 391, 410, 417, 424], "divid": [415, 421], "divis": [318, 328, 377], "dk": 337, "dmc": [90, 91, 92, 93, 95, 303, 404, 423, 424], "do": 413, "doc": 407, "document": 424, "doe": [304, 352, 399], "dog": 325, "dollar": 406, "domain": [3, 6, 283, 284, 299, 304, 307, 310, 316, 324, 327, 336, 343, 345, 346, 350, 352, 353, 355, 360, 364, 368, 372, 376, 380, 381, 382, 384, 395, 396, 399, 404, 410, 417, 423, 424], "domin": 387, "done": [84, 298, 339, 406], "dot": [20, 125, 126, 128, 129, 130, 132, 134, 135, 137, 151, 152, 153, 154, 155, 157, 159, 160, 162, 195, 196, 209, 228, 240, 248, 253, 254, 291, 332, 371], "doubl": [315, 344], "down": [40, 375], "downsampl": [3, 62, 84, 278, 304, 424], "dsp": [286, 287, 314, 326, 331, 338, 423], "dt": [312, 313, 381], "dtft": [9, 352, 353, 423, 424], "dtype": [62, 84, 88, 108, 114, 149, 164, 170, 181, 190, 193, 228, 230, 232, 233, 240, 248, 254, 256, 278, 288, 318, 322, 329, 332, 342, 369, 372, 398, 400, 403, 419], "dtypelik": [342, 398], "dtz": 407, "due": [297, 339, 421], "durat": 381, "dure": 297, "durisi": 292, "dwell": 387, "dx": 292, "dy": 292, "e": [12, 13, 14, 24, 26, 27, 106, 220, 242, 273, 274, 275, 276, 277, 283, 289, 290, 292, 307, 312, 313, 329, 352, 353, 392, 397, 402, 407, 408, 414, 415, 420], "e2": 402, "e501": 407, "e713": 407, "e714": 407, "e_": [1, 9, 42, 53, 103, 104, 105, 106, 107, 195, 207, 228, 240, 248, 252, 254, 284, 292, 305, 308, 309, 311, 349, 366, 389, 420, 423], "e_b": [1, 5, 9, 42, 44, 103, 104, 105, 106, 107, 195, 197, 228, 240, 248, 250, 254, 305, 306, 308, 348, 367, 385, 388, 423, 424], "each": [3, 62, 63, 64, 84, 85, 109, 190, 191, 256, 257, 258, 262, 265, 266, 278, 279, 280, 311, 325, 332, 337, 338, 340, 360, 364, 368, 387, 390, 391, 399, 424], "easili": [406, 407, 409, 414, 415], "ebn0": [1, 9, 42, 44, 195, 197, 228, 240, 248, 250, 254, 305, 306, 348, 367, 385, 420], "ebn0_to_esn0": [1, 53, 207, 252, 305, 420, 424], "ebn0_to_snr": [1, 228, 240, 248, 254, 306, 424], "edg": 381, "edit": [407, 415], "effect": [149, 298, 312, 392, 424], "effici": [62, 136, 161, 228, 304, 335, 344, 367, 385, 386, 399], "either": [20, 128, 153, 223, 232, 243, 311, 337, 390, 391], "electromagnet": [5, 401], "element": [7, 41, 184, 325, 342, 398, 419], "els": [407, 417, 418], "empir": [337, 390, 391, 410, 417], "en": [19, 299, 329, 332, 343, 402], "enabl": [407, 424], "encod": [248, 250, 252, 301, 302, 423], "encount": [415, 421], "end": [136, 161, 240, 254, 273, 292, 315, 318, 328, 354, 377, 378, 383, 395, 407, 410, 417], "endpoint": [114, 170, 415], "energi": [2, 5, 9, 44, 53, 96, 197, 207, 250, 252, 273, 274, 275, 276, 277, 292, 305, 306, 307, 308, 309, 315, 317, 323, 348, 366, 367, 378, 379, 380, 381, 383, 385, 388, 389, 423, 424], "energydetector": [2, 96, 97, 98, 99, 100, 424], "enough": 342, "enr": [9, 273, 274, 276, 359], "ensur": [312, 313, 392, 397, 419], "entir": [283, 307, 310, 324, 343, 345, 424], "entropi": 292, "enumer": 387, "envelop": [228, 312, 313, 381, 414, 415], "equal": [62, 125, 145, 228, 292, 296, 298, 318, 410, 417], "equat": [75, 77, 78, 79, 80, 81, 97, 98, 100, 164, 193, 240, 248, 254, 274, 275, 277, 282, 298, 312, 313, 315, 347, 387, 392, 397], "equival": [62, 84, 138, 150, 163, 190, 278, 284, 285, 291, 309, 312, 313, 314, 322, 354, 389, 392, 397, 400, 408, 410, 413, 417], "eras": [24, 289], "erasur": [5, 24, 26, 27, 28, 31, 90, 289, 290, 303, 404, 423], "error": [6, 9, 12, 13, 14, 32, 42, 44, 53, 67, 73, 74, 80, 101, 102, 103, 105, 106, 107, 195, 197, 207, 211, 213, 220, 223, 225, 226, 227, 228, 240, 242, 243, 245, 246, 247, 248, 250, 252, 254, 282, 295, 311, 312, 313, 347, 348, 366, 367, 387, 392, 397, 407, 419, 423, 424], "error_r": [101, 105, 106, 420], "errorr": [6, 101, 102, 103, 104, 105, 106, 107, 420, 424], "esn0": [1, 9, 42, 53, 195, 207, 228, 240, 248, 252, 254, 308, 309, 366, 420], "esn0_to_ebn0": [1, 44, 197, 250, 308, 424], "esn0_to_snr": [1, 309, 420, 424], "estim": [2, 46, 67, 199, 200, 282, 312, 313, 347, 360, 368, 387, 392, 397, 419, 423], "eta": 344, "euclidean": [6, 310, 423, 424], "evalu": [337, 414, 415], "even": [64, 85, 150, 191, 254, 280, 286, 287, 314, 317, 318, 326, 328, 329, 331, 338, 369, 377, 378, 383], "evenli": [114, 170], "everi": [3, 62, 84, 101, 278, 304, 413], "evm": [6, 311, 423, 424], "exactli": [149, 335], "examin": [149, 228, 240, 248, 254, 318, 329, 339, 410, 417], "exampl": [10, 19, 24, 32, 40, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 193, 194, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 250, 251, 252, 253, 254, 264, 266, 267, 269, 270, 271, 272, 274, 276, 278, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 410, 417, 419, 424], "exce": [271, 340, 341], "exceed": [271, 272, 337, 390, 391], "excess": [378, 383, 421], "exclud": 407, "exclus": 372, "execut": 409, "exist": 288, "exp": [10, 62, 170, 232, 233, 240, 248, 254, 292, 304, 316, 317, 327, 336, 352, 353, 355, 356, 357, 358, 361, 362, 370, 374, 396, 399, 402, 413, 415, 419], "expens": [378, 383], "explicit": 424, "explicitli": [284, 339], "exponenti": [3, 62, 233, 304, 336, 395, 396, 399, 413, 414, 415, 424], "extend": 407, "extens": 407, "extract": 419, "extrapol": 339, "ey": [9, 228, 240, 248, 254, 354, 423, 424], "f": [5, 20, 43, 47, 62, 75, 77, 84, 88, 99, 114, 115, 119, 125, 128, 129, 130, 149, 151, 153, 154, 155, 170, 181, 190, 232, 233, 278, 284, 297, 312, 313, 315, 317, 328, 333, 334, 336, 339, 340, 344, 352, 353, 377, 378, 380, 383, 387, 392, 397, 401, 402, 407, 410, 413, 414, 415, 417, 418, 419, 420, 421], "f401": 407, "f403": 407, "f_": [42, 43, 47, 54, 62, 63, 67, 74, 82, 84, 114, 115, 117, 119, 170, 173, 190, 195, 196, 208, 228, 229, 240, 241, 248, 249, 254, 255, 256, 257, 268, 278, 279, 286, 287, 292, 304, 306, 309, 316, 317, 326, 331, 336, 337, 350, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 368, 372, 380, 381, 384, 388, 389, 390, 391, 395, 396, 399, 413, 414, 415, 419, 421], "f_c": [316, 326, 331], "f_i": 62, "f_start": 62, "f_stop": 62, "f_x": [292, 337, 390, 391], "f_y": [292, 337, 391], "fa": [2, 9, 96, 97, 98, 99, 100, 273, 274, 275, 276, 277, 282, 312, 313, 335, 339, 340, 341, 347, 365, 387, 392, 393, 394, 397, 410, 417], "face": 369, "facecolor": [410, 413, 414, 415, 417, 418, 419, 420, 421], "fact": [322, 400], "factor": [2, 3, 6, 67, 74, 83, 193, 194, 196, 211, 213, 214, 241, 249, 255, 298, 299, 304, 312, 313, 352, 392, 394, 397, 399, 419], "fade": [250, 252], "fals": [2, 6, 12, 62, 64, 84, 85, 89, 96, 97, 98, 99, 100, 108, 110, 114, 139, 141, 164, 165, 167, 170, 182, 190, 191, 193, 194, 228, 230, 231, 240, 248, 250, 252, 254, 258, 273, 274, 275, 276, 277, 278, 280, 282, 283, 289, 294, 303, 307, 320, 321, 328, 335, 336, 339, 340, 341, 345, 346, 347, 349, 351, 352, 354, 360, 364, 365, 368, 372, 376, 382, 387, 393, 394, 410, 415, 417, 421, 423, 424], "far": 315, "farrow": [3, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 412, 423, 424], "farrow1": 139, "farrow2": 139, "farrow3": 139, "farrow4": 139, "farrowresampl": [3, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 413, 424], "fashion": 408, "fast": 352, "fdoa": [4, 312, 423, 424], "fdoa_crlb": [4, 312, 381, 424], "featur": 425, "februari": 424, "fec": 385, "feed": 40, "feedback": [20, 125, 128, 129, 130, 151, 153, 154, 155, 164, 167, 168, 181, 193, 291, 332, 355, 356, 357, 358, 361, 362, 370, 374, 403, 415], "feedback_poli": [20, 125, 126, 128, 129, 130, 138, 151, 152, 153, 154, 155, 163, 291], "feedforward": [62, 64, 84, 85, 88, 108, 110, 124, 149, 164, 167, 169, 181, 190, 191, 193, 230, 256, 258, 267, 270, 278, 280, 355, 356, 357, 358, 361, 362, 370, 374, 375, 414, 415], "fft": [62, 304, 350, 352, 360, 368, 395, 396, 399], "fibonacci": [19, 22, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 151, 163, 291, 332, 403, 423, 424], "fibonacci_lfsr": [138, 163], "field": [19, 125, 126, 131, 136, 138, 151, 152, 156, 161, 163, 288, 291, 315, 318, 322, 329, 332, 400, 403], "fieldarrai": [125, 126, 127, 131, 132, 135, 136, 137, 151, 152, 156, 157, 160, 161, 162, 288, 291, 318, 322, 329, 332, 400, 403, 407], "fig": [282, 347, 387], "figsiz": [228, 240, 248, 254, 354, 355, 373, 387, 414, 415, 419], "figur": [10, 24, 32, 62, 84, 88, 97, 99, 139, 149, 181, 190, 193, 220, 228, 230, 232, 240, 242, 248, 250, 251, 252, 253, 254, 274, 276, 278, 282, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 304, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 366, 367, 369, 370, 371, 372, 373, 374, 378, 379, 380, 381, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 410, 413, 414, 415, 417, 418, 419, 420, 421], "file": [407, 409], "fill": 342, "fill_betweenx": 62, "filler": 292, "fillstyl": 413, "filter": [42, 46, 52, 55, 62, 63, 64, 66, 67, 71, 72, 74, 76, 84, 85, 86, 87, 88, 89, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 139, 142, 143, 145, 146, 147, 148, 149, 150, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 190, 191, 192, 193, 194, 195, 200, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 228, 230, 231, 240, 248, 254, 256, 257, 258, 261, 264, 266, 267, 269, 270, 278, 279, 280, 281, 286, 287, 304, 312, 313, 314, 317, 323, 326, 331, 338, 354, 355, 356, 357, 358, 361, 362, 370, 374, 375, 378, 379, 383, 392, 397, 399, 405, 412, 421, 423, 424], "final": [63, 109, 257, 279], "find": [282, 291, 403], "finit": [3, 19, 108, 125, 131, 151, 156, 423, 424], "fir": [62, 63, 64, 84, 85, 87, 88, 89, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 139, 142, 149, 150, 190, 191, 193, 194, 228, 230, 231, 240, 248, 254, 256, 257, 258, 261, 264, 266, 267, 269, 270, 278, 279, 280, 286, 287, 314, 326, 331, 338, 354, 355, 356, 357, 358, 361, 362, 370, 374, 375, 412, 418, 423, 424], "fir_10": 88, "fir_2": 88, "fir_20": 88, "fir_40": 88, "fir_6": 88, "fir_80": 88, "firinterpol": 424, "first": [62, 84, 101, 136, 142, 190, 191, 228, 240, 261, 278, 280, 298, 312, 318, 328, 337, 342, 350, 357, 372, 377, 391, 392, 398, 407, 409, 410, 417, 424], "fit": 407, "fix": [315, 424, 425], "fixer": 407, "fl": [75, 77], "flag": 408, "flake8": 407, "flat": [149, 314], "flfsr": [19, 20, 22, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 151, 163, 291, 403, 424], "flip": [32, 294], "float": [2, 3, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 24, 28, 30, 31, 32, 36, 38, 39, 42, 43, 47, 50, 56, 60, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 99, 101, 103, 104, 105, 107, 108, 114, 115, 117, 119, 139, 140, 143, 149, 150, 164, 165, 170, 171, 173, 181, 190, 191, 193, 194, 195, 196, 204, 211, 213, 214, 216, 217, 218, 220, 221, 222, 224, 227, 228, 229, 230, 232, 234, 235, 236, 237, 240, 241, 242, 247, 248, 249, 251, 254, 255, 256, 268, 276, 278, 280, 283, 284, 285, 286, 287, 289, 294, 299, 311, 314, 316, 317, 320, 321, 326, 327, 331, 336, 337, 338, 339, 343, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 367, 368, 371, 372, 376, 378, 380, 381, 382, 383, 384, 390, 391, 404], "float64": [1, 2, 3, 4, 5, 6, 7, 8, 24, 29, 32, 37, 62, 84, 88, 90, 91, 96, 97, 98, 99, 100, 101, 106, 108, 114, 149, 164, 170, 181, 190, 193, 195, 197, 205, 207, 220, 225, 226, 228, 230, 232, 233, 240, 242, 243, 245, 246, 248, 250, 252, 254, 256, 271, 272, 273, 274, 275, 276, 277, 278, 282, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 300, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 322, 323, 326, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 344, 347, 351, 378, 379, 380, 381, 383, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 400, 401, 403], "fluctuat": 387, "flush": [62, 63, 84, 88, 108, 109, 113, 139, 143, 149, 190, 230, 256, 257, 278, 279, 424], "foa": [4, 313, 423, 424], "foa_crlb": [4, 313, 381, 424], "fold": 304, "follow": [96, 101, 327, 337, 349, 364, 368, 371, 373, 375, 410, 417, 419, 423], "form": [282, 292, 424], "format": [233, 288, 318, 322, 329, 332, 400, 424], "formula": 318, "forward": [181, 182, 232, 239, 424], "found": 318, "four": [390, 413], "fourier": [9, 62, 352, 353, 423, 424], "fourth": 413, "fox": 325, "fpsl": 424, "frac": [67, 75, 77, 80, 81, 88, 96, 97, 98, 100, 108, 112, 149, 164, 181, 191, 193, 211, 230, 240, 248, 254, 273, 274, 275, 280, 282, 283, 284, 285, 292, 297, 298, 299, 305, 306, 308, 309, 311, 312, 313, 315, 317, 327, 330, 336, 337, 343, 344, 347, 352, 378, 380, 381, 382, 383, 385, 386, 388, 389, 392, 394, 397, 401, 402, 410, 417, 419], "fraction": [3, 62, 84, 139, 145, 149, 150, 190, 256, 268, 278, 314, 317, 413, 423, 424], "fractional_delay_fir": [3, 314, 424], "fractionaldelai": [3, 149, 150, 424], "fred": [62, 84, 190, 278, 338, 375], "free": [5, 228, 240, 248, 254, 315, 423], "free_space_path_loss": [5, 315, 424], "freedom": [387, 410, 417], "freq": [2, 3, 5, 62, 84, 88, 108, 114, 149, 164, 170, 181, 190, 193, 230, 232, 233, 256, 278, 297, 315, 316, 336, 344, 352, 401, 413, 419], "freq_estim": 419, "freq_offset": [67, 75, 77, 334], "freq_rat": 316, "frequenc": [2, 5, 42, 43, 47, 51, 62, 67, 75, 77, 79, 84, 88, 108, 114, 115, 119, 139, 149, 164, 170, 181, 190, 193, 211, 228, 230, 232, 233, 256, 278, 286, 287, 297, 304, 312, 313, 314, 315, 316, 326, 331, 333, 334, 336, 344, 352, 353, 355, 356, 358, 360, 361, 362, 368, 392, 395, 396, 397, 399, 401, 404, 421, 423, 424], "frequency_lock_tim": [67, 75], "frequency_offset": [316, 404, 424], "frequency_respons": [62, 84, 88, 108, 114, 149, 164, 170, 181, 190, 193, 230, 256, 278, 424], "frequency_response_log": 424, "freqz": 421, "from": [1, 62, 101, 115, 119, 125, 126, 151, 152, 164, 165, 181, 191, 193, 209, 253, 256, 258, 262, 265, 280, 282, 298, 300, 305, 306, 308, 309, 312, 313, 329, 330, 332, 347, 352, 360, 368, 387, 388, 389, 392, 397, 403, 406, 410, 414, 415, 417, 419, 423], "fsk": 232, "fspl": [5, 315, 424], "full": [62, 63, 84, 109, 190, 256, 257, 278, 279, 350], "function": [9, 67, 76, 88, 108, 149, 164, 165, 193, 211, 232, 271, 272, 282, 285, 291, 292, 296, 297, 298, 304, 315, 317, 320, 321, 322, 333, 334, 339, 340, 341, 347, 348, 349, 351, 352, 353, 354, 357, 359, 360, 364, 365, 366, 368, 369, 370, 378, 383, 385, 386, 387, 393, 399, 400, 414, 415, 419, 421, 423, 424], "fundament": [96, 97, 98, 100, 273, 274, 275, 277], "furthermor": [315, 352], "futur": 419, "g": [5, 106, 328, 344, 377, 408], "g_": [282, 339, 347, 417], "g_c": [296, 410], "g_i": 327, "g_nc": [282, 339, 417], "g_q": 327, "gain": [2, 5, 10, 11, 12, 15, 17, 18, 67, 70, 71, 72, 73, 74, 164, 165, 171, 181, 193, 211, 213, 216, 218, 220, 227, 232, 234, 235, 242, 247, 282, 286, 287, 296, 297, 312, 313, 314, 315, 317, 323, 326, 331, 333, 334, 339, 344, 347, 378, 379, 383, 392, 397, 405, 410, 417, 419, 423, 424], "galoi": [19, 20, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 288, 291, 318, 322, 329, 332, 400, 403, 423, 424], "galois_lfsr": [138, 163], "gamma": [2, 96, 98, 100, 273, 275, 277, 282, 298, 312, 313, 340, 341, 351, 387, 392, 393, 394, 397], "gamma_1": [298, 312, 392], "gamma_2": [298, 312, 392], "gardner": [125, 151, 291], "gauss_0p1": 421, "gauss_0p2": 421, "gauss_0p3": 421, "gaussdesign": 317, "gaussian": [5, 8, 88, 181, 193, 230, 284, 285, 292, 317, 369, 404, 410, 417, 423, 424], "gca": [282, 320, 321, 410, 413, 417, 420], "gcd": 402, "ge": [249, 255, 282, 347, 378, 383, 387], "gener": [3, 28, 36, 58, 61, 95, 228, 240, 248, 254, 256, 284, 288, 289, 291, 293, 294, 303, 318, 319, 322, 328, 329, 332, 351, 365, 377, 400, 402, 403, 406, 410, 417, 420, 424], "get": 406, "get_window": [89, 286, 287, 326, 331, 352, 353, 360, 368, 424], "gf": [19, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 288, 291, 318, 322, 329, 332, 377, 400], "ghz": [315, 344, 401], "git": [406, 408], "github": [407, 423], "giusepp": 292, "given": [2, 56, 59, 90, 96, 101, 103, 104, 105, 107, 138, 139, 140, 163, 256, 267, 270, 271, 272, 273, 282, 292, 297, 298, 311, 312, 313, 340, 341, 347, 352, 381, 392, 397, 414, 415], "glfsr": [125, 138, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 291, 403, 424], "global": 407, "gmsk": 228, "go": [229, 241, 249, 255], "goal": 423, "gold": [318, 403, 423, 424], "gold_cod": [318, 328, 377, 403, 424], "good": 318, "googl": 407, "gouraud": 368, "grai": [43, 228, 229, 240, 241, 248, 249, 253, 254, 255, 319, 349, 371, 403, 420, 423], "gray_cod": [319, 403, 424], "greater": [83, 285, 298, 312, 313, 378, 383, 386, 392, 397], "grid": [220, 242, 373], "group": [9, 62, 84, 88, 108, 115, 149, 190, 230, 256, 278, 314, 356, 423], "group_delai": [9, 62, 84, 88, 108, 115, 149, 190, 230, 256, 278, 314, 356, 414, 415, 424], "guarante": [318, 425], "h": [2, 3, 9, 42, 43, 47, 51, 52, 55, 62, 64, 84, 85, 88, 96, 108, 110, 114, 116, 124, 149, 164, 170, 172, 181, 190, 191, 193, 195, 196, 205, 206, 210, 211, 228, 230, 240, 241, 248, 249, 254, 255, 256, 258, 264, 267, 270, 273, 278, 280, 286, 287, 292, 314, 317, 320, 321, 326, 331, 338, 340, 341, 351, 355, 357, 358, 362, 375, 378, 383, 394, 410, 417, 418, 419, 421], "h0": [2, 320, 321, 340, 341, 351, 393, 410, 417, 424], "h0_theori": 424, "h1": [2, 320, 321, 340, 351, 410, 417, 424], "h1_theori": 424, "h_": [67, 88, 419], "h_0p1": [317, 378, 383], "h_0p2": 317, "h_0p3": 317, "h_0p5": [378, 383], "h_0p9": [378, 383], "h_16": [314, 378, 383], "h_32": 314, "h_4": [378, 383], "h_64": 314, "h_8": [314, 378, 383], "h_b": [32, 295], "h_blackman": [286, 287, 326, 331], "h_blackman_harri": [286, 287, 326, 331], "h_chebyshev": [286, 287, 326, 331], "h_half_sin": 323, "h_ham": [286, 287, 326, 331], "h_hann": [286, 287, 326, 331], "h_i": [3, 62, 84, 190, 256, 266, 267, 270, 278, 375, 414], "h_kaiser": [286, 287, 326, 331], "h_pad": 373, "h_rc_0p1": 421, "h_rc_0p5": 421, "h_rc_0p9": 421, "h_rect": [379, 421], "h_srrc": [355, 356, 357, 358, 361, 362, 370, 374, 420], "h_srrc_0p1": 421, "h_srrc_0p5": 421, "h_srrc_0p9": 421, "h_theori": 181, "ha": [62, 109, 181, 190, 228, 240, 248, 257, 279, 284, 286, 287, 304, 314, 315, 317, 326, 331, 344, 352, 353, 367, 378, 383, 387, 399, 402, 410, 417, 419, 420, 421], "hadamard": [322, 400, 403, 423, 424], "hadamard_cod": [322, 400, 403, 424], "hadamardcod": 322, "half": [8, 228, 240, 323, 344, 423, 424], "half_sin": [8, 229, 323, 424], "ham": [6, 114, 286, 287, 324, 326, 331, 352, 423, 424], "hann": [286, 287, 326, 331, 360, 368], "hard": [32, 292], "harri": [62, 84, 190, 278, 286, 287, 326, 331, 338, 375], "hat": [6, 9, 42, 46, 103, 195, 199, 200, 220, 223, 228, 240, 242, 243, 248, 254, 311, 349, 371], "have": [63, 150, 288, 296, 304, 314, 322, 328, 342, 350, 352, 353, 372, 377, 398, 399, 400, 410, 417], "he": 325, "height": 182, "help": [282, 286, 287, 314, 317, 322, 326, 331, 338, 387, 400], "helper": 424, "here": [414, 415, 423], "heurist": [242, 405, 419, 424], "hexdump": [7, 101, 325, 423, 424], "high": [312, 313, 322, 339, 392, 397, 400], "higher": [315, 378, 383, 421], "highpass": [3, 326], "highpass_fir": [3, 326, 424], "hist": [311, 320, 321, 337, 390, 391, 410, 417], "histogram": [311, 349, 354, 364], "histogram2d": [349, 364], "histtyp": [320, 321, 337, 390, 391, 410, 417], "hold": [62, 84, 190, 191, 256, 258, 262, 278, 280, 312, 313, 342, 392, 397, 424], "home": [406, 415, 421], "hook": 407, "horizont": 327, "hostett": [423, 424], "hostetter_sdr_2023": 423, "how": [10, 317, 320, 321, 323, 335, 339, 340, 341, 350, 352, 353, 354, 363, 364, 372, 378, 379, 383, 393, 394, 400, 409], "howev": [24, 32, 63, 103, 104, 105, 107, 109, 149, 211, 257, 279, 282, 290, 292, 295, 322, 332, 339, 350, 400, 413], "html": [282, 286, 287, 314, 317, 322, 326, 331, 338, 387, 400, 406], "http": [19, 282, 286, 287, 299, 314, 317, 322, 326, 329, 331, 332, 338, 343, 387, 400, 402, 406, 407, 408, 423], "hypothes": [96, 273], "hypothesi": [2, 320, 321, 394, 410, 417], "hz": [67, 68, 74, 75, 77, 80, 114, 115, 117, 119, 170, 173, 213, 217, 285, 296, 297, 300, 304, 312, 313, 315, 316, 317, 330, 333, 334, 336, 344, 380, 392, 395, 396, 397, 401, 413], "i": [7, 10, 12, 13, 14, 18, 20, 24, 28, 32, 36, 43, 47, 58, 61, 62, 63, 64, 67, 74, 83, 84, 85, 88, 89, 90, 95, 96, 97, 98, 99, 100, 101, 106, 108, 109, 114, 116, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 139, 142, 147, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 167, 169, 170, 172, 178, 179, 181, 184, 188, 189, 190, 191, 193, 194, 196, 211, 213, 214, 217, 220, 228, 230, 233, 240, 241, 242, 248, 249, 254, 255, 256, 257, 258, 262, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 406, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423, 425], "id": 407, "ideal": [288, 380, 381, 420], "ident": [138, 163], "identifi": [312, 313, 392, 397], "idft": 62, "ieee": 19, "ignor": [354, 407], "iir": [9, 67, 76, 116, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 193, 194, 211, 215, 230, 355, 356, 357, 358, 361, 362, 370, 374, 412, 414, 419, 423, 424], "iir_back": 181, "iir_forw": 181, "iir_trap": 181, "im": 220, "imaginari": [350, 352, 353, 372], "imbal": [327, 404, 423], "immateri": 406, "immedi": 408, "impair": 424, "implement": [0, 2, 3, 8, 10, 19, 24, 32, 40, 42, 62, 84, 88, 90, 96, 108, 125, 139, 149, 151, 164, 181, 183, 190, 193, 195, 211, 215, 220, 228, 230, 232, 240, 242, 248, 254, 256, 273, 278, 282, 291, 347, 387, 403, 404, 405, 413], "impli": 315, "import": [43, 196, 220, 241, 249, 255, 408, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423], "improv": [2, 296, 312, 313, 339, 381, 392, 397, 424], "impuls": [3, 9, 62, 84, 88, 108, 116, 149, 164, 172, 181, 190, 193, 230, 256, 278, 286, 287, 314, 317, 326, 331, 338, 355, 357, 378, 383, 421, 423, 424], "impulse_respons": [9, 62, 84, 88, 108, 116, 149, 164, 172, 181, 190, 193, 230, 256, 278, 286, 287, 314, 317, 323, 326, 331, 338, 357, 378, 379, 383, 414, 415, 421, 424], "includ": [114, 170, 407, 408, 409, 423], "incorpor": [298, 312, 313, 392, 397], "increas": [62, 89, 285, 315, 344, 381, 386, 415, 424], "increment": [232, 233, 234, 236, 419], "independ": [7, 240, 285, 337, 386, 387, 390, 391], "index": [42, 43, 47, 139, 145, 195, 228, 240, 248, 254, 261, 318, 322, 329, 332, 354, 363, 364, 371, 400, 403, 406], "indic": [10, 12, 18, 43, 62, 64, 84, 85, 88, 89, 97, 98, 99, 100, 108, 110, 123, 139, 141, 147, 149, 164, 165, 167, 179, 181, 182, 188, 189, 190, 191, 193, 194, 196, 229, 230, 231, 240, 241, 248, 249, 250, 252, 254, 255, 256, 258, 261, 274, 275, 276, 277, 278, 280, 283, 307, 317, 318, 320, 321, 323, 327, 328, 332, 335, 336, 339, 340, 341, 345, 346, 349, 350, 351, 352, 353, 354, 362, 363, 364, 372, 376, 378, 379, 382, 383, 393, 394, 400, 410, 417], "inf": 334, "infinit": [3, 164, 181, 423, 424], "inform": [90, 248, 292, 305, 306, 308, 322, 388, 400], "infrastructur": 409, "infti": [284, 292, 298, 312, 313, 337, 353, 380, 381, 392, 397], "ini_opt": 409, "initi": [17, 20, 125, 126, 128, 132, 134, 136, 138, 151, 152, 153, 157, 159, 161, 163, 220, 224, 242, 244, 332, 410, 417, 419], "initial_st": [125, 126, 132, 138, 151, 152, 157, 163, 291], "inlin": [410, 413, 414, 415, 417, 418, 419, 420, 421], "inlinebackend": [410, 413, 414, 415, 417, 418, 419, 420, 421], "input": [2, 5, 8, 10, 11, 19, 21, 23, 24, 25, 27, 32, 33, 35, 40, 41, 56, 57, 62, 63, 64, 67, 75, 77, 80, 81, 84, 85, 88, 89, 90, 92, 94, 95, 108, 109, 110, 116, 121, 122, 125, 127, 139, 140, 141, 142, 145, 146, 149, 164, 165, 166, 167, 172, 178, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 211, 212, 230, 231, 232, 233, 240, 248, 250, 252, 254, 256, 257, 258, 261, 262, 271, 278, 279, 280, 282, 284, 285, 289, 290, 292, 294, 295, 298, 300, 301, 302, 303, 304, 320, 321, 330, 335, 339, 340, 341, 342, 357, 370, 387, 393, 394, 398, 399, 404, 414, 415, 417, 419, 424], "insert": [3, 190, 278, 399], "insid": 415, "insight": 354, "inst_evm": 311, "instanc": [103, 104, 105, 107, 228], "instantan": [6, 42, 43, 51, 311, 376, 424], "instanti": [24, 30, 32, 38, 56, 60, 90], "instead": [62, 84, 190, 278, 316], "instruct": 409, "int": [3, 7, 8, 9, 24, 28, 32, 36, 40, 41, 42, 43, 45, 49, 54, 56, 58, 61, 62, 64, 84, 85, 88, 89, 90, 95, 101, 103, 104, 107, 108, 111, 112, 114, 115, 116, 118, 119, 122, 125, 133, 136, 139, 141, 142, 144, 149, 150, 151, 158, 161, 164, 170, 172, 174, 178, 181, 183, 185, 190, 191, 193, 195, 196, 198, 203, 208, 225, 226, 228, 229, 230, 231, 232, 239, 240, 241, 245, 246, 248, 249, 254, 255, 256, 258, 259, 260, 261, 263, 264, 266, 278, 280, 282, 283, 284, 286, 287, 288, 289, 293, 294, 301, 302, 303, 304, 307, 310, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 332, 335, 338, 339, 340, 341, 342, 343, 345, 347, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 368, 370, 375, 377, 378, 379, 383, 387, 390, 393, 394, 398, 399, 400, 402, 403, 420], "int64": [101, 288, 318, 322, 329, 332, 400, 403], "int_": [6, 7, 8, 19, 21, 23, 24, 25, 26, 27, 32, 33, 34, 35, 40, 42, 46, 90, 92, 93, 94, 125, 127, 183, 188, 189, 195, 199, 200, 228, 240, 248, 254, 289, 292, 293, 294, 301, 302, 303, 312, 313, 319, 324, 337, 342, 380, 381, 392, 397, 398, 403, 404], "integ": [62, 84, 114, 170, 190, 256, 260, 263, 278, 332, 342], "integr": [3, 6, 67, 72, 97, 98, 99, 100, 181, 182, 193, 194, 211, 213, 216, 230, 282, 292, 296, 297, 312, 313, 320, 321, 333, 334, 335, 339, 340, 341, 347, 381, 392, 393, 394, 397, 405, 409, 411, 415, 423, 424], "integral_gain": [211, 216], "integration_tim": 333, "intens": 423, "intercept": 298, "interest": 10, "interfer": 354, "interleav": [40, 41, 183, 184, 185, 186, 187, 188, 189, 423, 424], "interoper": 423, "interpol": [3, 42, 55, 62, 84, 139, 190, 191, 192, 195, 210, 228, 240, 248, 254, 256, 258, 262, 263, 265, 278, 280, 338, 399, 418, 420, 423, 424], "interpret": 332, "intersymbol": 354, "introduc": 425, "invalid": 415, "invers": [7, 62, 272, 312, 313, 333, 334, 392, 397], "inverse_map": [40, 183, 188], "invok": 409, "ipykernel": 406, "ipykernel_6147": 419, "ipynb": 407, "iq": [327, 404, 423], "iq_imbal": [327, 404, 424], "irreducible_poli": [128, 153], "is_preferred_pair": [318, 328, 377, 403, 424], "isf": [410, 417], "isi": [240, 248, 254, 354], "iso": 315, "isort": 407, "isotrop": 315, "issu": 423, "iter": [136, 161, 377, 403], "its": [12, 13, 14, 108, 125, 126, 134, 136, 151, 152, 159, 164, 165, 181, 193, 282, 284, 347, 353, 380, 414, 415, 421], "j": [62, 84, 114, 164, 167, 168, 170, 181, 184, 188, 189, 190, 193, 228, 232, 240, 248, 254, 256, 267, 270, 278, 284, 303, 320, 321, 327, 329, 335, 336, 339, 340, 341, 352, 353, 393, 394, 402, 414, 415], "jame": 291, "januari": 424, "jason": 291, "jcharlong": 424, "jn_c": [320, 321, 335, 339, 340, 341, 393, 394], "john": [24, 32, 90, 250, 252, 318, 328, 377], "jq": 240, "json": [407, 409], "juli": 424, "jump": 325, "june": 424, "jupyt": 424, "just": 332, "justin": 424, "k": [6, 8, 9, 19, 42, 43, 45, 46, 48, 49, 62, 88, 103, 125, 151, 181, 195, 196, 198, 199, 200, 201, 202, 203, 220, 223, 228, 240, 242, 243, 248, 249, 254, 255, 282, 285, 301, 302, 305, 306, 308, 311, 337, 339, 347, 349, 352, 371, 372, 385, 386, 388, 410, 417, 418, 421], "k0": [67, 70, 74, 213, 232, 419], "k1": [67, 71, 211, 419], "k2": [67, 72, 211, 419], "k_0": [67, 70, 74, 213, 232, 234, 235, 419], "k_1": [67, 71, 211, 218, 419], "k_2": [67, 72, 211, 216, 419], "k_p": [67, 73, 74, 213, 220, 227, 242, 247, 419], "kai": [96, 97, 98, 100, 273, 274, 275, 277], "kaiser": [3, 62, 64, 66, 84, 85, 86, 190, 191, 192, 278, 280, 281, 286, 287, 314, 326, 331, 338, 424], "kasami": [329, 403, 423, 424], "kasami_cod": [329, 403, 424], "kei": [8, 228, 240, 248, 250, 251, 252, 253, 254, 416, 423, 424], "keyword": [348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 414, 415, 424], "khz": [297, 392, 397], "km": 315, "knee": 298, "knowledg": 273, "known": [220, 223, 242, 243, 284, 297, 322, 352, 400], "kp": [67, 73, 74, 213, 419], "ksp": [395, 396], "kwarg": [348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374], "l": [63, 109, 149, 150, 166, 194, 230, 231, 257, 279, 314], "l_": 314, "label": [43, 62, 84, 88, 97, 99, 139, 149, 181, 190, 193, 220, 229, 230, 241, 242, 249, 250, 252, 255, 274, 276, 278, 282, 284, 286, 287, 292, 297, 298, 311, 312, 313, 314, 315, 316, 317, 326, 327, 331, 333, 334, 335, 337, 339, 340, 347, 348, 350, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 372, 378, 380, 381, 383, 384, 387, 390, 391, 392, 394, 397, 410, 413, 417, 418, 419, 420, 421], "lack": 339, "lag": [332, 350], "lambda": [5, 315, 401, 410, 417], "lambda_": [410, 417], "larg": [322, 329, 332, 352, 400, 407], "larger": [287, 323, 327, 349, 371, 379], "last": [228, 240, 342, 406], "latest": [408, 423], "law": [282, 320, 321, 335, 339, 340, 341, 347, 393, 394, 424], "lazi": 325, "ldot": [95, 303, 390], "le": [88, 150, 230, 282, 314, 336, 344, 347, 378, 383, 387], "lead": [228, 327, 420], "leakag": 352, "leaki": [3, 193, 194, 230, 423, 424], "leakyintegr": [3, 193, 194, 230, 424], "least": 291, "left": [96, 97, 98, 125, 149, 151, 164, 240, 242, 248, 254, 273, 274, 275, 277, 282, 283, 284, 285, 292, 297, 298, 307, 310, 311, 312, 313, 315, 317, 318, 320, 321, 327, 335, 336, 339, 340, 341, 344, 345, 346, 347, 376, 378, 381, 382, 383, 385, 386, 393, 394, 402, 410, 417], "legend": [62, 88, 149, 181, 220, 242, 282, 292, 297, 298, 312, 313, 315, 333, 334, 335, 337, 339, 340, 347, 387, 390, 391, 392, 394, 397, 410, 417, 418, 419, 421], "len": 381, "length": [3, 9, 43, 46, 48, 62, 63, 64, 84, 85, 88, 89, 99, 108, 109, 111, 116, 122, 124, 149, 150, 166, 183, 186, 187, 190, 191, 194, 196, 200, 202, 229, 230, 231, 241, 249, 255, 256, 257, 278, 279, 280, 286, 287, 288, 293, 296, 297, 314, 316, 317, 318, 319, 322, 323, 326, 329, 331, 332, 338, 339, 350, 352, 355, 357, 360, 364, 368, 370, 378, 379, 383, 395, 400, 402, 407, 413, 418, 421, 424], "leq": [282, 292, 347, 387], "less": [83, 282, 285, 298, 312, 313, 318, 335, 347, 386, 387, 392, 397], "let": 339, "level": 424, "lf": [67, 419], "lfilter": 164, "lfloor": [88, 108, 112, 149, 230], "lfsr": [19, 22, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 291, 332, 403, 423, 424], "lib": [410, 415, 417], "librari": [407, 408, 409, 413, 420, 423, 425], "like": [9, 228, 292, 369, 408, 423, 424], "likelihood": [46, 199, 200, 220, 405, 419, 424], "limit": [5, 9, 285, 349, 367, 371, 385, 386, 420, 423, 424], "limits_": [96, 108, 164, 273], "line": [325, 350, 352, 353, 369, 372, 373, 407, 418], "linear": [1, 10, 15, 17, 62, 88, 125, 129, 131, 133, 137, 139, 151, 154, 156, 158, 162, 190, 191, 192, 195, 196, 225, 226, 228, 240, 245, 246, 248, 254, 278, 280, 281, 282, 284, 291, 292, 298, 300, 316, 320, 321, 330, 332, 335, 339, 340, 341, 350, 351, 358, 360, 365, 368, 371, 393, 394, 410, 417, 423, 424], "linearli": [24, 191, 280, 285, 386], "linearmodul": [8, 9, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 225, 226, 245, 246, 248, 371, 424], "linecollect": 364, "linestyl": [88, 181, 220, 228, 240, 242, 248, 254, 282, 285, 292, 347, 349, 364, 371, 373, 386, 402, 410, 413, 417, 420], "linewidth": [364, 373, 402], "link": [315, 423, 424], "linspac": [24, 32, 88, 97, 114, 170, 181, 250, 252, 274, 282, 285, 290, 292, 295, 297, 298, 315, 320, 321, 333, 334, 337, 339, 340, 347, 348, 366, 367, 381, 386, 390, 391, 410, 415, 417, 418, 419, 420], "lint": [407, 408], "list": 377, "ll": 315, "ln": [282, 317], "lo": [67, 419], "lobe": [352, 353, 421], "loc": [149, 315, 337, 339, 340, 390, 391], "local": [67, 406, 419], "localhost": 406, "locat": [298, 406, 409], "lock": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 211, 212, 213, 214, 215, 216, 217, 218, 219, 232, 233, 234, 235, 236, 237, 238, 239, 422, 423], "lock_tim": [67, 77, 419], "log": [10, 292, 355, 356, 358, 360, 361, 362, 364, 414, 415, 419], "log10": [114, 170, 421], "log2": 292, "log_": [282, 283, 296, 297, 300, 307, 315, 343, 345, 346, 347, 376, 382], "log_2": [42, 45, 195, 198, 228, 240, 248, 254, 285, 305, 306, 308, 385, 386, 388], "logarithm": [285, 355, 356, 358, 360, 361, 362, 386, 414, 415], "loglog": [312, 313, 365, 392, 397], "logspac": [99, 114, 170, 276, 282, 296, 312, 313, 335, 339, 340, 385, 387, 392, 394, 397], "long": [297, 353, 380, 381, 407], "longer": [351, 354, 378, 383, 395], "loop": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 211, 212, 213, 214, 215, 216, 217, 218, 219, 232, 233, 234, 235, 236, 237, 238, 239, 422, 423, 424], "loop_filt": 419, "loopfilt": [211, 212, 213, 214, 215, 216, 217, 218, 219, 405, 419, 424], "loss": [2, 297, 315, 333, 334, 352, 423, 424], "low": [332, 339], "lower": [4, 149, 228, 240, 254, 312, 313, 378, 383, 392, 397, 410, 417, 423, 424], "lowpass": [3, 331], "lowpass_fir": [3, 114, 331, 424], "lyon": 415, "m": [8, 42, 43, 45, 46, 48, 49, 62, 84, 95, 125, 151, 164, 167, 169, 181, 190, 193, 195, 196, 198, 199, 200, 201, 202, 203, 209, 220, 228, 240, 242, 248, 249, 253, 254, 255, 256, 264, 266, 278, 291, 293, 296, 297, 303, 305, 306, 308, 312, 313, 315, 318, 319, 322, 328, 329, 332, 333, 334, 350, 371, 377, 388, 400, 403, 406, 407, 408, 409, 410, 417, 423, 424], "m_sequenc": [332, 350, 403, 424], "made": 424, "mag": [350, 352, 353], "magic": 407, "magnitud": [6, 9, 10, 12, 16, 88, 149, 181, 193, 230, 311, 314, 332, 350, 355, 358, 402, 423, 424], "magnitude_respons": [9, 88, 114, 149, 170, 181, 193, 230, 286, 287, 314, 317, 323, 326, 331, 338, 358, 378, 379, 383, 414, 415, 419, 421, 424], "mai": [43, 229, 241, 249, 253, 255, 311, 349, 364, 368, 371, 373, 415, 424], "main": [352, 353, 408, 421], "major": 425, "make": [380, 381, 419, 425], "mani": [387, 400, 407], "manual": [228, 240, 248, 254, 407, 409], "map": [8, 9, 40, 183, 184, 188, 189, 195, 196, 201, 209, 228, 232, 240, 248, 253, 254, 311, 371, 423, 424], "map_symbol": [195, 201, 228, 240, 248, 254, 284, 311, 327, 349, 384, 418, 419, 420, 424], "mapsto": [184, 188, 189, 195, 196, 209, 228, 240, 248, 253, 254, 371], "march": 424, "margin": 292, "mark": [282, 347], "marker": [84, 139, 190, 232, 278, 349, 369, 371, 372, 413, 420], "markers": 371, "massei": [291, 424], "match": [42, 43, 46, 52, 195, 196, 200, 206, 228, 240, 241, 248, 249, 254, 255, 312, 313, 354, 392, 397, 424], "math": 406, "mathbb": [195, 196, 209, 228, 240, 248, 253, 254, 285, 292, 371, 402], "mathcal": [2, 7, 9, 24, 25, 26, 27, 32, 33, 34, 35, 90, 92, 93, 94, 95, 96, 271, 272, 273, 274, 275, 276, 277, 284, 292, 303, 320, 321, 340, 341, 351, 394, 410, 417], "mathrm": [125, 151, 273, 288, 291, 318, 320, 321, 322, 329, 332, 335, 339, 340, 341, 393, 394, 400, 410, 417], "mathwork": [282, 286, 287, 314, 317, 322, 326, 331, 338, 387, 400], "matlab": [9, 190, 191, 192, 278, 280, 281, 369, 423, 424], "matplotlib": [9, 348, 349, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 371, 372, 373, 374, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423], "matric": 375, "matrix": [3, 40, 90, 91, 95, 303, 375], "matt": [415, 421, 423, 424], "max": [298, 311, 345, 346, 410, 417], "max_": [90, 292], "max_f": [114, 170], "max_frequency_offset": [2, 333, 424], "max_integration_tim": [2, 334, 424], "max_open_warn": 373, "maximum": [2, 43, 46, 114, 170, 199, 200, 220, 292, 317, 323, 332, 333, 334, 349, 371, 378, 379, 383, 405, 419, 423, 424], "maximum_length_sequ": 332, "maxkb": 407, "mean": [6, 311, 312, 313, 360, 368, 380, 381, 382, 392, 394, 397, 410, 417, 421], "meant": [12, 13, 14, 67], "measur": [101, 103, 283, 284, 299, 300, 307, 310, 311, 312, 313, 324, 330, 343, 345, 346, 376, 380, 381, 382, 392, 397, 410, 417, 419, 423, 424], "median": 360, "memoryless": [90, 95, 303, 404, 423], "meter": [315, 344, 401], "method": [3, 9, 46, 66, 86, 182, 191, 192, 199, 200, 258, 262, 265, 280, 281, 286, 287, 292, 314, 326, 331, 338, 360, 368, 414, 415, 424], "methodologi": 387, "mf": [228, 240, 248, 254, 354], "mf_sampl": [228, 240, 248, 254], "mhostett": [408, 423, 424], "mhz": [297, 300, 330, 392, 397], "michael": [10, 67, 75, 77, 78, 79, 80, 81, 88, 139, 211, 220, 242, 378, 383], "mid": [340, 341, 394], "min": [410, 417], "min_snr": [2, 282, 335, 347, 387, 424], "minim": [133, 158, 282, 288, 291, 403], "minimum": [2, 8, 228, 282, 335, 387, 423, 424], "minor": [424, 425], "minut": 406, "minvers": 409, "misalign": [322, 400], "miscellan": 423, "mix": [3, 62, 336, 418, 423, 424], "ml": [220, 224, 405, 419], "mle": [195, 199, 228, 240, 248, 254], "mlped": [220, 221, 222, 223, 224, 225, 226, 227, 405, 419, 424], "mod": 402, "mode": [12, 17, 18, 63, 64, 85, 87, 89, 109, 110, 113, 120, 123, 141, 143, 147, 165, 167, 176, 179, 182, 191, 194, 231, 257, 258, 269, 279, 280, 288, 318, 322, 329, 332, 350, 354, 400, 402], "model": [2, 24, 32, 90, 125, 151, 291, 387, 424], "modem": [225, 226, 228, 240, 245, 246, 248, 254], "modifi": [134, 135, 159, 160, 424], "modul": [32, 42, 43, 47, 48, 49, 195, 196, 202, 203, 205, 220, 225, 226, 228, 232, 240, 241, 242, 245, 246, 248, 249, 250, 252, 254, 255, 305, 306, 308, 311, 348, 354, 363, 366, 367, 371, 372, 380, 381, 385, 386, 388, 406, 409, 420, 423, 424], "month": 423, "more": [9, 43, 136, 161, 229, 241, 249, 253, 255, 315, 337, 353, 369, 380, 390, 391, 424], "most": [2, 333, 334, 342, 398], "move": [3, 193, 194, 230, 231, 423, 424], "movingaverag": [3, 193, 230, 231, 424], "msk": [8, 228, 229, 363, 423, 424], "mu_f": [380, 392, 397], "mu_t": [312, 313, 381], "much": [298, 421], "multi": 407, "multipl": [7, 114, 170, 186, 187, 342, 369, 398, 420, 424], "multipli": [10, 67, 88, 190, 278], "multiply_distribut": [7, 337, 424], "multir": [3, 62, 63, 84, 190, 278, 338, 375, 424], "multirate_fir": [3, 64, 85, 191, 280, 338, 424], "multirate_tap": 424, "must": [20, 64, 85, 128, 141, 153, 186, 187, 191, 280, 284, 286, 287, 292, 312, 317, 326, 329, 331, 336, 338, 364, 378, 383, 392, 402, 410, 417], "mutual": [90, 292, 372], "mw": [300, 330], "myst": 406, "n": [1, 3, 5, 6, 7, 9, 10, 11, 19, 20, 21, 23, 40, 42, 43, 46, 48, 51, 52, 55, 62, 63, 64, 67, 84, 85, 88, 89, 95, 96, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 139, 140, 143, 146, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 162, 164, 166, 167, 168, 172, 174, 178, 181, 182, 183, 184, 186, 187, 190, 191, 193, 195, 196, 200, 202, 205, 206, 210, 211, 212, 228, 230, 232, 233, 239, 240, 241, 248, 249, 254, 255, 256, 257, 258, 262, 264, 265, 266, 267, 270, 271, 272, 273, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 316, 318, 319, 320, 321, 322, 324, 326, 327, 329, 331, 335, 336, 338, 339, 340, 341, 343, 345, 346, 347, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 368, 370, 372, 375, 376, 380, 381, 382, 384, 385, 386, 388, 389, 390, 393, 394, 395, 396, 399, 400, 402, 403, 404, 419, 421, 423, 424], "n0": 420, "n_": [2, 97, 98, 99, 100, 282, 320, 321, 335, 339, 340, 341, 347, 387, 393, 394, 417], "n_0": [1, 5, 9, 12, 13, 14, 42, 44, 53, 80, 103, 104, 105, 106, 107, 195, 197, 207, 228, 240, 248, 250, 252, 254, 284, 292, 305, 306, 308, 309, 311, 312, 313, 348, 349, 366, 367, 385, 388, 389, 392, 397, 420, 423, 424], "n_c": [296, 320, 321, 335, 339, 340, 341, 393, 394, 410, 424], "n_f": 355, "n_freq": 355, "n_nc": [2, 96, 97, 98, 99, 100, 282, 320, 321, 335, 339, 340, 341, 347, 387, 393, 394, 417, 424], "n_point": [225, 226, 245, 246], "n_symbol": [381, 418], "n_t": 355, "n_term": 390, "n_time": [355, 415], "name": 125, "nan": [312, 313, 339, 392, 397], "nand": 284, "narrow": [378, 380, 383], "natur": [67, 79], "nb": 406, "nc": [2, 97, 98, 99, 100, 282, 320, 321, 335, 339, 340, 341, 347, 387, 393, 394, 417], "nco": [67, 70, 74, 213, 232, 233, 234, 235, 236, 237, 238, 239, 405, 419, 423, 424], "ncx2": [410, 417], "ndarrai": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 19, 21, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 37, 40, 42, 44, 46, 48, 51, 53, 56, 57, 59, 62, 63, 84, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 106, 108, 109, 113, 114, 115, 116, 119, 121, 122, 124, 125, 127, 139, 140, 143, 146, 148, 149, 164, 166, 168, 169, 170, 172, 175, 177, 178, 180, 181, 183, 186, 187, 188, 189, 190, 193, 195, 197, 199, 200, 201, 202, 205, 207, 209, 211, 212, 220, 223, 225, 226, 228, 230, 232, 233, 239, 240, 242, 243, 245, 246, 248, 250, 252, 253, 254, 256, 257, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 347, 351, 369, 372, 375, 378, 379, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404], "ndim": 419, "ne": 402, "nearest": 353, "nearli": 421, "necessari": [339, 406], "need": [84, 190, 278, 406, 407, 409], "neg": [62, 136, 161, 298, 315, 327], "new": [24, 28, 32, 36, 42, 43, 56, 58, 61, 90, 95, 101, 102, 125, 128, 134, 139, 141, 151, 153, 159, 193, 195, 196, 228, 229, 240, 241, 248, 249, 254, 255, 316, 384], "new_sample_r": 413, "next": [125, 136, 151, 161, 352, 369, 377, 387, 408], "nfrom": 282, "nois": [2, 5, 9, 10, 44, 53, 62, 67, 68, 69, 74, 80, 84, 88, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 117, 149, 164, 173, 181, 190, 193, 197, 207, 211, 213, 217, 228, 230, 240, 248, 250, 252, 254, 256, 273, 274, 275, 276, 277, 278, 282, 284, 285, 292, 296, 298, 305, 306, 308, 309, 312, 313, 320, 321, 335, 339, 340, 341, 348, 351, 366, 367, 385, 386, 387, 388, 389, 392, 393, 394, 397, 404, 410, 417, 419, 423, 424], "noise_bandwidth": [62, 67, 74, 84, 88, 108, 117, 149, 164, 173, 181, 190, 193, 211, 213, 217, 230, 256, 278, 312, 313, 392, 397, 424], "noiseless": [228, 240, 248, 254, 311], "noisi": [42, 195, 228, 240, 248, 254, 284], "nomin": [367, 385, 386], "non": [63, 97, 98, 99, 100, 109, 257, 279, 282, 320, 321, 323, 332, 335, 339, 340, 341, 347, 350, 352, 372, 379, 387, 393, 394, 407, 410, 411, 423, 424], "non_coherent_gain": [2, 282, 339, 347, 417, 424], "none": [9, 19, 20, 24, 28, 32, 36, 42, 44, 56, 58, 61, 62, 84, 88, 89, 90, 95, 99, 108, 114, 116, 122, 125, 126, 128, 134, 139, 145, 149, 151, 152, 153, 159, 170, 190, 196, 211, 219, 230, 232, 233, 241, 249, 255, 256, 276, 278, 282, 283, 284, 285, 286, 287, 289, 294, 303, 307, 310, 312, 313, 318, 320, 321, 324, 326, 329, 331, 332, 335, 337, 340, 341, 342, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 377, 387, 392, 393, 394, 397, 398, 404, 410, 413, 417, 418, 420], "norm": [311, 317, 323, 337, 364, 378, 379, 383, 390, 391, 410, 417], "normal": [7, 43, 67, 69, 74, 211, 213, 217, 271, 272, 286, 287, 311, 317, 320, 321, 323, 326, 331, 337, 352, 353, 355, 356, 358, 360, 361, 362, 368, 378, 379, 380, 381, 383, 390, 391, 410, 417, 419, 421], "northeast": 327, "northwest": 327, "note": [10, 19, 24, 32, 40, 62, 84, 88, 90, 96, 97, 98, 100, 108, 125, 129, 130, 149, 151, 154, 155, 164, 181, 190, 193, 211, 220, 228, 230, 232, 240, 242, 248, 254, 256, 262, 265, 267, 270, 273, 274, 275, 277, 278, 282, 284, 285, 288, 290, 291, 295, 296, 297, 301, 302, 314, 317, 318, 327, 328, 333, 334, 337, 339, 340, 341, 344, 347, 352, 353, 354, 369, 375, 377, 378, 383, 385, 386, 387, 390, 391, 394, 402], "notebook": 424, "notic": [10, 136, 138, 161, 163, 298, 316, 332, 335, 339, 350, 352, 353, 381, 395, 396, 410, 413, 417, 421], "notion": 375, "novemb": 424, "now": [316, 335, 395, 396, 413, 424], "np": [10, 19, 24, 25, 26, 32, 33, 34, 40, 62, 84, 88, 90, 91, 92, 93, 97, 99, 101, 114, 139, 149, 170, 181, 183, 188, 189, 190, 193, 195, 205, 209, 228, 230, 232, 240, 248, 250, 252, 253, 254, 264, 266, 267, 270, 274, 276, 278, 282, 284, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 303, 304, 311, 312, 313, 315, 316, 320, 321, 322, 327, 333, 334, 335, 336, 337, 339, 340, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 366, 367, 370, 372, 374, 375, 380, 381, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 399, 400, 410, 413, 414, 415, 417, 418, 419, 420, 421], "npp_polyv": 415, "npt": [43, 64, 85, 114, 170, 191, 196, 229, 241, 249, 255, 280, 355, 356, 357, 358, 361, 362, 370, 374], "npy": 407, "nstandard": [312, 313, 392, 397], "nu": [410, 417], "nuisanc": 424, "null": [2, 96, 273, 320, 353, 394, 410, 417, 421], "numba": [423, 424], "number": [28, 36, 41, 42, 43, 45, 54, 58, 61, 62, 63, 64, 65, 84, 95, 97, 98, 99, 100, 101, 103, 104, 107, 114, 115, 116, 119, 122, 136, 161, 170, 172, 178, 190, 195, 196, 198, 208, 225, 226, 228, 229, 239, 240, 241, 245, 246, 248, 249, 254, 255, 256, 258, 259, 267, 270, 278, 282, 284, 289, 294, 296, 303, 305, 306, 308, 317, 320, 321, 323, 325, 335, 339, 340, 341, 342, 347, 349, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 368, 370, 375, 378, 379, 383, 387, 388, 390, 393, 394, 398], "numer": [7, 67, 232, 234, 292, 333, 334, 337, 390, 391, 405, 415, 419, 423, 424], "numpi": [28, 36, 58, 61, 95, 232, 233, 284, 289, 294, 303, 349, 350, 398, 407, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424], "nyquist": [240, 248, 254, 286, 287, 304, 326, 331, 354, 399, 421], "o": [84, 139, 190, 278, 413], "object": [42, 43, 67, 74, 101, 102, 195, 196, 228, 229, 240, 241, 248, 249, 254, 255, 291, 322, 355, 356, 357, 358, 361, 362, 370, 374, 400, 419, 424], "observ": [220, 242, 314, 340, 341, 344, 354, 393], "obtain": 101, "occur": 297, "odd": [64, 85, 150, 191, 254, 280, 314, 318, 328, 338, 377, 395], "off": [196, 241, 249, 255], "offset": [2, 8, 42, 43, 50, 75, 77, 84, 139, 190, 195, 196, 204, 228, 229, 232, 233, 234, 237, 240, 241, 248, 249, 251, 254, 255, 278, 285, 297, 316, 333, 334, 336, 357, 372, 384, 386, 404, 419, 423, 424], "offset_r": 316, "often": 413, "old": [316, 384], "omega": [9, 62, 84, 88, 108, 114, 115, 119, 139, 149, 164, 170, 181, 190, 193, 230, 232, 234, 236, 256, 278, 355, 356, 358, 361, 362, 419], "omega_": [67, 78], "omega_3db": [67, 78], "omega_n": [67, 79, 419], "omnidirect": 315, "one": [43, 108, 136, 161, 164, 229, 240, 241, 249, 253, 255, 298, 315, 317, 325, 355, 356, 358, 360, 361, 362, 368, 377, 387, 395, 407, 414, 415, 418, 421], "ones": [20, 126, 128, 152, 153, 191, 280, 410, 417, 419], "onli": [17, 43, 63, 64, 67, 85, 87, 109, 113, 114, 120, 143, 170, 176, 191, 196, 220, 229, 241, 249, 253, 255, 257, 269, 279, 280, 284, 288, 312, 313, 315, 320, 321, 322, 323, 328, 332, 335, 339, 340, 341, 349, 350, 352, 354, 364, 377, 379, 385, 392, 393, 394, 397, 400, 409, 410, 417, 419, 420], "onto": [75, 77, 81], "oo": 424, "open": [354, 423], "oper": [9, 12, 96, 99, 273, 276, 318, 340, 365, 419, 423, 424], "oplu": [301, 302, 318, 324], "optim": 424, "optimum": [250, 252], "option": [233, 355, 356, 358, 360, 361, 362, 368, 424], "oqpsk": [8, 228, 240, 241, 424], "order": [3, 42, 43, 49, 62, 63, 64, 67, 84, 85, 88, 89, 101, 106, 108, 109, 118, 125, 126, 132, 133, 134, 135, 136, 137, 138, 139, 141, 144, 149, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 174, 181, 190, 191, 193, 195, 196, 203, 211, 213, 228, 230, 240, 248, 249, 254, 255, 256, 257, 264, 266, 278, 279, 280, 284, 286, 287, 288, 291, 305, 306, 308, 311, 317, 318, 322, 326, 329, 331, 332, 338, 349, 354, 363, 378, 380, 381, 383, 384, 388, 400, 405, 415, 418, 419, 420, 424], "org": [19, 299, 329, 332, 343, 402], "origin": [12, 13, 14, 136, 161, 240, 254, 298, 312, 313, 392, 397, 399, 413], "oscil": [67, 232, 234, 405, 419, 423, 424], "other": [103, 104, 105, 107, 298, 332, 387, 413, 425], "otherwis": 318, "out": [19, 24, 32, 40, 62, 84, 90, 101, 114, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 170, 183, 190, 220, 228, 240, 248, 251, 253, 254, 256, 264, 266, 267, 268, 270, 271, 272, 278, 288, 289, 291, 293, 294, 296, 297, 300, 301, 302, 303, 305, 306, 308, 309, 311, 315, 318, 319, 320, 321, 322, 328, 329, 330, 332, 333, 334, 335, 339, 340, 341, 342, 344, 373, 375, 377, 380, 381, 385, 388, 389, 393, 398, 400, 401], "output": [10, 11, 12, 16, 19, 21, 23, 24, 26, 27, 32, 34, 35, 40, 41, 57, 62, 63, 84, 90, 93, 94, 95, 109, 116, 122, 125, 127, 136, 138, 139, 142, 151, 161, 163, 165, 167, 172, 178, 182, 184, 188, 189, 190, 191, 193, 194, 200, 211, 212, 230, 232, 233, 239, 256, 257, 258, 261, 265, 268, 278, 279, 280, 282, 284, 285, 288, 289, 290, 291, 292, 294, 295, 296, 302, 303, 311, 312, 313, 318, 322, 329, 330, 332, 339, 340, 341, 342, 347, 350, 357, 370, 392, 394, 397, 398, 400, 403, 406, 413, 414, 415, 417, 419, 424], "outsid": [149, 415], "over": [10, 125, 129, 130, 131, 132, 134, 135, 136, 137, 151, 154, 155, 156, 157, 159, 160, 161, 162, 250, 252, 288, 291, 296, 318, 322, 325, 329, 332, 400, 424], "overdamp": [74, 83, 213, 214], "overlai": 62, "overlap": [360, 368, 418], "oversampl": [352, 353, 381], "overwritten": [349, 364, 368, 371], "p": [5, 7, 24, 28, 29, 31, 32, 36, 37, 39, 62, 84, 90, 91, 95, 125, 151, 190, 191, 232, 233, 256, 263, 268, 271, 272, 278, 280, 289, 290, 291, 292, 294, 295, 303, 337, 338, 340, 341, 376, 390, 391, 404], "p_": [2, 9, 96, 97, 98, 99, 100, 250, 252, 273, 274, 275, 276, 277, 282, 283, 284, 300, 303, 311, 312, 313, 330, 335, 339, 340, 341, 343, 345, 347, 348, 360, 365, 366, 387, 392, 393, 394, 397, 410, 417], "p_b": [44, 197], "p_d": [2, 9, 96, 97, 99, 273, 274, 276, 282, 320, 321, 335, 340, 347, 359, 365, 387, 410, 417, 424], "p_d_mea": [410, 417], "p_e": [53, 207], "p_fa": [2, 9, 96, 97, 98, 99, 100, 273, 274, 275, 276, 277, 282, 320, 321, 335, 339, 340, 341, 347, 351, 365, 387, 393, 394, 410, 417, 424], "p_fa_mea": [410, 417], "p_h0": 351, "p_h1": 351, "p_rc_0p1": 421, "p_rc_0p5": 421, "p_rc_0p9": 421, "p_rect": 421, "p_srrc_0p1": 421, "p_srrc_0p5": 421, "p_srrc_0p9": 421, "pacf": 424, "pack": [7, 101, 103, 228, 240, 248, 254, 325, 342, 423, 424], "packag": [408, 415, 423], "pad": 297, "page": 406, "pair": [318, 328, 377, 403, 423, 424], "papr": [6, 228, 240, 254, 343, 418, 424], "papr_bb_0p1": 418, "papr_bb_0p5": 418, "papr_bb_0p9": 418, "papr_bb_rect": 418, "papr_pb_0p1": 418, "papr_pb_0p5": 418, "papr_pb_0p9": 418, "papr_pb_rect": 418, "par": 315, "parabol": [5, 315, 344, 381], "parabolic_antenna": [5, 315, 344, 424], "parallel": [62, 84, 190, 256, 258, 265, 278], "paramet": [11, 12, 17, 20, 21, 23, 27, 28, 35, 36, 41, 43, 44, 46, 48, 53, 57, 58, 61, 63, 64, 74, 75, 77, 80, 85, 89, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 114, 115, 116, 117, 119, 122, 126, 127, 128, 134, 136, 140, 141, 143, 145, 150, 152, 153, 159, 161, 165, 166, 167, 170, 172, 173, 178, 182, 184, 186, 187, 191, 194, 196, 197, 199, 200, 201, 202, 207, 212, 213, 223, 224, 225, 226, 229, 231, 233, 234, 239, 241, 243, 245, 246, 249, 250, 252, 255, 257, 258, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 410, 417], "parameter": 339, "parser": 406, "part": [291, 350, 352, 353, 372, 419], "partit": [256, 258, 262, 265], "pass": [24, 27, 28, 32, 35, 36, 43, 56, 57, 58, 61, 62, 84, 88, 90, 94, 95, 108, 113, 139, 143, 149, 190, 230, 256, 258, 262, 278, 284, 289, 294, 303, 311, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 404, 406, 408, 414, 415, 424], "passband": [3, 149, 286, 287, 314, 317, 323, 326, 331, 378, 379, 383, 395, 396, 418, 424], "patch": 425, "path": [315, 423], "pb": 418, "pb_papr": 418, "pccf": 424, "pcolormesh": [349, 364, 368], "pdf": [9, 292, 337, 340, 341, 351, 387, 390, 391, 393, 410, 417, 423, 424], "peak": [6, 228, 240, 254, 299, 311, 312, 313, 343, 345, 346, 352, 392, 397, 416], "peak_pow": [6, 343, 345, 424], "peak_voltag": [6, 299, 346, 424], "ped": [67, 73, 74, 213, 220, 224, 225, 226, 242, 243, 244, 245, 246, 247, 405, 419, 423, 424], "peebl": [2, 339, 347, 424], "pei": 292, "pep585": 407, "per": [7, 42, 43, 45, 46, 47, 48, 54, 63, 109, 195, 196, 198, 200, 202, 208, 228, 229, 233, 240, 241, 248, 249, 254, 255, 257, 279, 284, 285, 292, 305, 306, 308, 309, 316, 317, 323, 325, 342, 349, 354, 363, 378, 379, 383, 388, 389, 398, 407, 418, 421, 424], "percent": 424, "percentil": [311, 368], "perf": 407, "perfect": 273, "perfectli": 149, "perflint": 407, "perform": [10, 11, 63, 67, 109, 150, 250, 252, 257, 279, 296, 304, 314, 339, 340, 380, 381, 399, 405, 410, 414, 415, 417, 420, 423, 424], "period": [74, 213, 217, 228, 328, 377, 402, 424], "periodogram": [9, 62, 304, 360, 380, 395, 396, 399, 418, 423, 424], "permut": [40, 183, 184, 188, 189], "persist": [240, 248, 254, 349, 354, 364, 420, 424], "phase": [3, 9, 42, 43, 47, 50, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 108, 119, 149, 190, 195, 196, 204, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 278, 282, 316, 327, 332, 336, 354, 361, 362, 363, 375, 387, 404, 410, 416, 417, 422, 423, 424], "phase_delai": [9, 62, 84, 88, 108, 119, 149, 190, 230, 256, 278, 361, 424], "phase_err": [67, 419], "phase_error": 419, "phase_error_vari": [67, 80], "phase_est": [67, 419], "phase_lock_tim": [67, 81], "phase_offset": [42, 43, 50, 195, 196, 204, 228, 229, 240, 241, 248, 249, 251, 254, 255, 284, 311, 327, 349, 354, 371, 372, 384, 418, 419, 420], "phase_respons": [9, 114, 170, 362, 424], "phase_tre": [9, 228, 363, 424], "phi": [9, 42, 43, 50, 62, 84, 88, 108, 119, 149, 190, 195, 196, 204, 228, 229, 230, 240, 241, 248, 249, 251, 254, 255, 256, 278, 316, 327, 336, 361], "physic": 315, "pi": [8, 10, 40, 43, 47, 62, 84, 88, 139, 170, 181, 183, 184, 188, 189, 190, 220, 232, 240, 242, 248, 254, 255, 278, 284, 292, 297, 304, 312, 313, 315, 316, 317, 327, 336, 344, 352, 353, 355, 356, 357, 358, 361, 362, 370, 374, 378, 383, 392, 395, 396, 397, 399, 402, 413, 414, 415, 419, 423, 424], "pi4_qpsk": 254, "pickleshar": 406, "piecewis": [3, 139, 141, 144], "pimpsk": [8, 254, 255, 424], "pin": 424, "pip": [406, 407, 408, 409, 423], "pixel": [285, 386], "pl": [77, 81, 407], "place": [184, 188, 189], "plane": 415, "pleas": 423, "pll": [67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 405, 423, 424], "plot": [10, 24, 32, 62, 84, 88, 97, 99, 114, 115, 116, 119, 122, 139, 149, 170, 172, 178, 181, 190, 193, 220, 228, 230, 232, 240, 242, 248, 250, 251, 252, 253, 254, 274, 276, 278, 282, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 304, 311, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 381, 383, 384, 385, 386, 390, 391, 393, 395, 396, 399, 400, 402, 410, 413, 414, 415, 417, 419, 420, 421, 423, 424], "plr0912": 407, "plr0913": 407, "plr0915": 407, "plr2004": 407, "plr5501": 407, "plt": [10, 24, 32, 62, 84, 88, 97, 99, 139, 149, 181, 190, 193, 220, 228, 230, 232, 240, 242, 248, 250, 251, 252, 253, 254, 274, 276, 278, 282, 284, 285, 286, 287, 288, 290, 292, 295, 296, 297, 298, 304, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 366, 367, 369, 370, 371, 372, 374, 378, 379, 380, 381, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 410, 413, 414, 415, 417, 418, 419, 420, 421], "plu": [67, 211, 213, 405, 424], "plw0603": 407, "pm": [353, 421], "pn": [318, 328, 377], "point": [114, 170, 225, 226, 245, 246, 339, 349, 351, 352, 353, 360, 368], "pole": [9, 164, 165, 170, 175, 181, 193, 355, 356, 357, 358, 361, 362, 370, 374, 414, 423], "poli": [19, 125, 126, 129, 130, 131, 134, 137, 138, 151, 152, 154, 155, 156, 159, 162, 163, 291, 329, 332, 377, 403], "poly1": [318, 328, 403], "poly2": [318, 328, 403], "polylik": [19, 20, 125, 128, 151, 153, 318, 328, 329, 332, 377, 403], "polynomi": [3, 20, 128, 129, 130, 133, 139, 141, 144, 153, 154, 155, 158, 291, 318, 328, 329, 332, 377, 403, 424], "polyphas": [62, 63, 64, 66, 84, 85, 86, 190, 191, 192, 256, 257, 258, 259, 261, 262, 265, 266, 267, 270, 278, 279, 280, 281, 304, 338, 375, 399, 423, 424], "polyphase_decompos": [3, 375, 424], "polyphase_matrix": 424, "polyphase_ord": [62, 64, 84, 85, 190, 191, 256, 264, 266, 278, 280, 338, 424], "polyphase_tap": [62, 84, 190, 256, 264, 266, 267, 270, 278], "polyphasefir": [3, 62, 84, 190, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 278, 424], "posit": [62, 184, 188, 189, 298, 318, 327], "possibl": [315, 423], "post": [282, 347], "power": [5, 9, 228, 240, 248, 254, 283, 284, 285, 292, 300, 311, 312, 313, 317, 320, 321, 323, 330, 343, 344, 345, 352, 353, 360, 376, 378, 379, 380, 383, 385, 386, 392, 397, 410, 416, 417, 421, 423, 424], "ppb": 424, "ppi": [211, 213, 405], "ppm": [384, 424], "pr": [95, 303], "pre": 408, "precis": [312, 313, 322, 339, 381, 392, 397, 400], "prefer": [318, 328, 377, 403, 423, 424], "preferred_pair": [318, 328, 377, 403, 424], "present": [240, 248, 254, 340, 410, 417], "preserv": [12, 18, 64, 84, 85, 89, 110, 123, 141, 147, 165, 167, 179, 182, 190, 191, 194, 231, 258, 278, 280], "prevent": [84, 190, 240, 254, 278], "previou": [62, 64, 84, 85, 88, 89, 108, 110, 121, 139, 141, 145, 146, 149, 165, 167, 182, 190, 191, 193, 194, 230, 231, 256, 258, 278, 280, 301, 302], "prime": 402, "primit": [125, 151, 318, 328, 329, 332, 377, 403, 424], "primitive_poli": [20, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 329, 332], "print": [125, 126, 138, 151, 152, 163, 291, 325, 410, 413, 414, 415, 417, 419], "print_figure_kwarg": [410, 413, 414, 415, 417, 418, 419, 420, 421], "proaki": [24, 32, 90, 250, 252, 318, 328, 377], "probabl": [2, 9, 24, 28, 31, 32, 36, 39, 90, 91, 95, 96, 97, 98, 99, 100, 271, 272, 273, 274, 275, 276, 277, 282, 289, 290, 292, 294, 295, 303, 320, 321, 335, 337, 339, 340, 341, 347, 351, 354, 359, 365, 387, 390, 391, 393, 394, 410, 417, 423, 424], "process": [62, 84, 96, 97, 98, 100, 125, 127, 190, 193, 230, 273, 274, 275, 277, 278, 298, 338, 375, 415, 419, 423], "produc": [2, 62, 63, 109, 125, 133, 136, 138, 151, 158, 161, 163, 190, 256, 257, 258, 265, 278, 279, 291, 296, 317, 332, 333, 334, 350, 377, 403, 421], "product": [4, 7, 296, 298, 312, 313, 317, 337, 392, 397, 421, 423, 424], "progress": 423, "propag": 387, "properti": [13, 14, 15, 16, 18, 22, 25, 26, 30, 31, 33, 34, 38, 39, 45, 47, 49, 50, 51, 52, 54, 55, 60, 65, 66, 68, 69, 70, 71, 72, 73, 76, 78, 79, 82, 83, 86, 91, 92, 93, 112, 118, 121, 123, 124, 129, 130, 131, 132, 133, 135, 137, 142, 144, 146, 147, 148, 154, 155, 156, 157, 158, 160, 162, 168, 169, 171, 174, 175, 177, 179, 180, 188, 189, 192, 198, 203, 204, 205, 206, 208, 209, 210, 214, 215, 216, 217, 218, 221, 222, 227, 235, 236, 237, 247, 251, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 281, 318, 424], "proport": [63, 67, 71, 211, 213, 218, 257, 279, 312, 313, 315, 344, 392, 397, 405, 424], "proportional_gain": [211, 218], "prototyp": [3, 62, 64, 84, 85, 190, 191, 256, 257, 258, 264, 267, 270, 278, 279, 280, 375, 424], "provid": [2, 42, 44, 53, 106, 195, 197, 207, 228, 240, 248, 250, 252, 254, 292, 318, 333, 334, 339, 351, 354, 364, 407, 423], "psd": [9, 44, 53, 197, 207, 250, 252, 305, 306, 308, 309, 348, 366, 367, 380, 385, 388, 389, 392, 397], "psk": [8, 220, 240, 242, 248, 249, 250, 251, 252, 253, 254, 255, 284, 311, 327, 348, 349, 354, 366, 367, 371, 372, 380, 381, 384, 418, 419, 423, 424], "psk16": [250, 252, 348, 366, 420], "psk16_bb_papr": 418, "psk16_ber": 420, "psk16_pb_papr": 418, "psk16_ser": 420, "psk8": [250, 252, 348, 366, 420], "psk8_bb_papr": 418, "psk8_ber": 420, "psk8_bin": 420, "psk8_grai": 420, "psk8_pb_papr": 418, "psk8_ser": 420, "public": 424, "puls": [42, 43, 46, 48, 51, 52, 55, 88, 181, 195, 196, 200, 202, 205, 206, 210, 228, 240, 241, 248, 249, 254, 255, 317, 323, 354, 372, 378, 379, 380, 381, 383, 387, 416, 423, 424], "pulse_shap": [42, 43, 46, 48, 51, 195, 196, 200, 202, 205, 228, 240, 241, 248, 249, 254, 255, 354, 372, 380, 381, 418, 420], "purpos": 424, "py": [407, 409, 415, 419, 421], "pycodestyl": 407, "pydocstyl": 407, "pyflak": 407, "pylint": [407, 424], "pypi": 423, "pyplot": [9, 348, 349, 350, 351, 356, 358, 359, 360, 361, 362, 364, 366, 368, 369, 371, 372, 373, 374, 410, 413, 414, 415, 417, 418, 419, 420, 421], "pyproject": [407, 409], "pytest": [408, 409], "python": [406, 423, 424], "python3": [406, 407, 408, 409, 415, 423], "pyupgrad": 407, "q": [7, 62, 84, 85, 190, 228, 240, 256, 260, 268, 271, 272, 273, 274, 275, 277, 278, 280, 292, 332, 338, 402, 424], "q_": [96, 97, 98, 100], "qam": [305, 306, 308, 388], "qasim": [10, 139], "qinv": [7, 271, 272, 424], "qpsk": [220, 240, 242, 248, 250, 251, 252, 254, 284, 311, 348, 349, 354, 366, 371, 372, 384, 419, 423, 424], "qpsk_bb_papr": 418, "qpsk_ber": 420, "qpsk_pb_papr": 418, "qpsk_ser": 420, "quad": [88, 230], "quadrat": [139, 316, 424], "quadratur": [8, 240, 327, 354], "quantiti": [103, 104, 105, 106, 107], "quartic": [139, 424], "quick": 325, "quickli": 10, "quit": [322, 400], "r": [3, 10, 40, 41, 62, 84, 139, 140, 142, 143, 190, 256, 257, 268, 278, 279, 292, 298, 304, 305, 306, 308, 311, 312, 313, 317, 336, 378, 383, 388, 392, 394, 395, 396, 397, 399, 406, 407, 408, 409, 415, 418, 419, 421], "rad": [114, 170], "rad2deg": 419, "radar": 387, "radian": [67, 78, 79, 80, 220, 223, 225, 226, 232, 233, 234, 236, 237, 242, 243, 245, 246, 254, 419], "radio": 423, "rainbow": [349, 364], "rais": [8, 88, 181, 196, 241, 249, 255, 354, 372, 378, 380, 381, 383, 414, 423], "raised_cosin": [8, 196, 241, 249, 255, 369, 378, 421, 424], "ramp": [191, 211, 280], "randint": [19, 24, 32, 90, 228, 240, 248, 254, 284, 289, 294, 303, 311, 327, 349, 354, 363, 372, 380, 381, 384, 418, 419, 420], "randn": [10, 62, 193, 230, 372], "random": [7, 10, 19, 24, 28, 32, 36, 58, 61, 62, 90, 95, 96, 193, 228, 230, 240, 248, 254, 271, 284, 289, 294, 303, 311, 327, 337, 349, 354, 363, 372, 380, 381, 384, 390, 391, 410, 417, 418, 419, 420, 423, 424], "rang": [62, 220, 242, 349, 419, 420], "rao": [4, 312, 313, 392, 397, 423, 424], "raster": [9, 354, 363, 364, 423, 424], "rate": [3, 6, 9, 10, 12, 13, 14, 42, 43, 44, 47, 53, 62, 63, 64, 67, 74, 82, 84, 85, 101, 102, 103, 105, 106, 114, 115, 117, 119, 139, 140, 142, 143, 170, 173, 190, 191, 195, 197, 207, 228, 240, 248, 250, 252, 254, 256, 257, 260, 263, 268, 278, 279, 280, 296, 304, 305, 306, 308, 316, 336, 338, 339, 348, 350, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 366, 367, 368, 372, 380, 381, 384, 385, 388, 394, 395, 396, 399, 404, 410, 417, 423, 424], "ratio": [2, 5, 6, 9, 43, 44, 47, 53, 80, 97, 99, 101, 103, 104, 105, 106, 107, 197, 207, 228, 240, 250, 252, 254, 274, 276, 282, 284, 285, 292, 298, 305, 306, 308, 309, 312, 313, 320, 321, 335, 339, 340, 343, 348, 351, 366, 367, 385, 386, 387, 388, 389, 392, 394, 397], "ration": [3, 278, 280, 338, 424], "rayleigh": [387, 390, 391], "rc": [8, 196, 240, 241, 248, 249, 254, 255, 354, 378], "rc_0p1": 421, "rc_0p5": 421, "rc_0p9": 421, "rc_param": 373, "rcdefault": 373, "rcparam": [9, 373], "re": [220, 273, 320, 321, 335, 339, 340, 341, 393, 394, 410, 417], "read": 40, "real": [3, 97, 98, 100, 271, 272, 274, 275, 277, 284, 292, 320, 321, 335, 336, 339, 340, 341, 350, 352, 353, 356, 358, 360, 361, 362, 364, 368, 372, 381, 393, 394, 395, 396, 410, 414, 415, 417, 418, 419, 423, 424], "rearrang": [298, 312, 313, 392, 397], "reason": [315, 323, 379, 406], "receiv": [9, 10, 42, 46, 52, 96, 97, 99, 101, 103, 195, 199, 200, 206, 220, 221, 223, 224, 228, 240, 242, 243, 248, 250, 252, 254, 273, 274, 275, 276, 277, 311, 315, 340, 354, 359, 365, 423, 424], "reciproc": [125, 129, 130, 151, 154, 155], "recommend": [190, 423], "rect": [43, 196, 241, 249, 255, 380, 381, 421], "rectangular": [8, 43, 182, 196, 241, 249, 255, 312, 313, 379, 380, 381, 392, 397, 418, 421, 423, 424], "recurr": [125, 129, 133, 137, 151, 154, 158, 162, 291], "reduc": [12, 13, 14, 297, 352], "reduct": [296, 297, 339, 410, 417], "ref": [6, 220, 222, 224, 282, 286, 287, 311, 314, 317, 322, 326, 331, 338, 387, 400], "refactor": 424, "refer": [10, 12, 16, 19, 24, 32, 62, 67, 75, 77, 78, 79, 80, 81, 84, 88, 90, 96, 97, 98, 100, 101, 125, 139, 151, 190, 211, 220, 222, 223, 224, 242, 243, 250, 252, 273, 274, 275, 277, 278, 282, 284, 286, 287, 291, 292, 297, 298, 299, 311, 314, 316, 317, 318, 322, 326, 328, 329, 331, 332, 338, 339, 343, 347, 375, 377, 378, 383, 384, 387, 400, 402, 415, 417, 421, 423], "referenc": 339, "reflector": [5, 315, 344], "regim": [285, 386], "regist": [125, 126, 137, 151, 152, 162, 291, 332, 403], "rel": [254, 402, 421], "relat": [62, 84, 137, 162, 190, 256, 267, 270, 278, 317], "releas": [408, 424], "relev": 423, "reli": 423, "remain": [113, 143, 304, 342], "rememb": 193, "remov": [240, 248, 254, 298, 312, 313, 336, 360, 368, 369, 392, 397, 424], "renam": 424, "render": 407, "repeat": 232, "replac": 424, "replic": 423, "replica": [2, 273], "replicacorrel": [2, 273, 274, 275, 276, 277, 424], "repo": [407, 408, 415, 421], "repres": [24, 26, 27, 67, 76, 289, 290, 332], "represent": [371, 424], "reproduc": 291, "requir": [2, 63, 109, 257, 279, 282, 291, 335, 337, 339, 387, 390, 391, 394, 406, 407, 408, 409, 424], "resampl": [62, 84, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 256, 257, 268, 278, 279, 280, 281, 338, 375, 412, 423, 424], "resample_sign": 413, "research": 423, "resembl": 353, "reset": [10, 17, 24, 32, 56, 61, 62, 84, 87, 88, 90, 108, 120, 125, 134, 139, 145, 149, 151, 159, 164, 176, 181, 190, 193, 211, 219, 230, 232, 238, 256, 269, 278], "resolut": [352, 406], "respons": [3, 9, 62, 84, 88, 108, 114, 116, 122, 149, 164, 170, 172, 178, 181, 190, 193, 230, 256, 278, 286, 287, 314, 317, 326, 331, 338, 354, 355, 356, 357, 358, 362, 370, 378, 383, 421, 423, 424], "result": [228, 240, 254, 283, 307, 315, 337, 344, 345, 346, 376, 378, 382, 383, 390, 391, 410, 417, 420], "return": [7, 8, 11, 21, 23, 27, 29, 35, 37, 44, 46, 48, 53, 57, 59, 62, 63, 67, 75, 77, 80, 81, 84, 88, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 119, 122, 126, 127, 136, 138, 140, 143, 149, 152, 161, 163, 164, 166, 170, 172, 173, 178, 181, 186, 187, 190, 193, 197, 199, 200, 201, 202, 207, 212, 223, 225, 226, 230, 233, 239, 243, 245, 246, 250, 252, 256, 257, 271, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 410, 414, 415, 417, 418, 420, 424], "rev": 407, "revers": [125, 129, 130, 136, 154, 155, 161], "revert": 373, "rework": 424, "rf": [315, 418, 419], "rfloor": [88, 108, 112, 149, 230], "rho": [5, 9, 367, 385, 386], "rice": [10, 67, 75, 77, 78, 79, 80, 81, 88, 139, 211, 220, 242, 378, 383, 390, 391], "richard": [282, 347], "rician": [390, 391], "right": [96, 97, 98, 125, 151, 164, 240, 242, 248, 254, 273, 274, 275, 277, 282, 283, 284, 285, 292, 297, 298, 307, 310, 311, 312, 313, 315, 317, 320, 321, 327, 335, 336, 339, 340, 341, 344, 345, 346, 347, 376, 378, 381, 382, 383, 385, 386, 393, 394, 402, 410, 417], "rm": [6, 220, 221, 222, 224, 299, 311, 312, 313, 380, 381, 382, 392, 397, 423, 424], "rms_bandwidth": [6, 380, 392, 397, 424], "rms_integration_tim": [6, 312, 313, 381, 424], "rms_voltag": [6, 299, 382, 424], "rng": [320, 321, 410, 417], "roc": [9, 96, 99, 273, 276, 340, 365, 423, 424], "roll": [196, 241, 249, 255, 421], "root": [6, 8, 196, 241, 249, 255, 311, 312, 313, 354, 372, 380, 381, 382, 383, 392, 397, 402, 403, 414, 423], "root_raised_cosin": [8, 88, 181, 196, 241, 249, 255, 355, 356, 357, 358, 361, 362, 370, 374, 383, 414, 418, 420, 421, 424], "rotat": [254, 285, 316, 336, 386, 419], "roughli": [24, 32, 289, 294, 315, 413], "row": [40, 41, 364], "rrc": 369, "ruf": 407, "ruff": [407, 408, 424], "rule": 407, "run": [139, 406], "runtimewarn": [415, 421], "rv": [337, 390, 391], "rv_continu": [2, 320, 321, 337, 351, 390, 391], "rv_histogram": [7, 337, 390, 391], "rx": [220, 221, 224], "rx_complex_symbol": [228, 240, 248, 254], "rx_filter": [42, 52, 195, 206, 228, 240, 248, 254], "rx_sampl": [228, 240, 248, 254, 354], "rx_symbol": [228, 240, 248, 254], "s_": [20, 125, 126, 128, 132, 134, 135, 151, 152, 153, 157, 159, 160], "s_0": [20, 125, 126, 128, 132, 134, 135, 151, 152, 153, 157, 159, 160], "s_1": [20, 125, 126, 128, 132, 134, 135, 151, 152, 153, 157, 159, 160, 312, 392, 410, 417], "s_2": [312, 392], "s_hat": [46, 200, 419, 420], "sach": 291, "same": [88, 109, 125, 136, 138, 151, 161, 163, 220, 242, 296, 312, 339, 350, 352, 353, 354, 369, 372, 380, 381, 387, 392, 414], "sampl": [2, 3, 12, 13, 14, 42, 43, 46, 48, 54, 62, 63, 67, 74, 82, 84, 88, 97, 98, 99, 100, 108, 109, 112, 114, 115, 116, 117, 119, 122, 139, 142, 145, 149, 170, 172, 173, 178, 190, 191, 195, 196, 200, 202, 208, 213, 217, 228, 229, 230, 232, 233, 234, 236, 239, 240, 241, 248, 249, 254, 255, 256, 257, 261, 268, 278, 279, 280, 282, 284, 296, 304, 306, 309, 316, 317, 320, 321, 323, 335, 336, 339, 340, 341, 347, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 368, 370, 372, 378, 379, 380, 381, 383, 384, 388, 389, 393, 394, 395, 396, 399, 404, 410, 413, 417, 418, 419, 421, 423, 424], "sample_r": [6, 9, 62, 67, 74, 82, 84, 88, 108, 114, 115, 117, 119, 139, 149, 164, 170, 173, 181, 190, 193, 230, 256, 278, 304, 316, 336, 350, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 368, 372, 380, 381, 384, 395, 396, 399, 413, 419, 421], "sample_rate_offset": [384, 404, 424], "satisfi": 336, "scalar": 419, "scale": [193, 220, 312, 313, 320, 321, 337, 352, 353, 355, 356, 358, 360, 361, 362, 368, 390, 391, 392, 397, 410, 414, 415, 417], "scallop": [297, 352], "scatter": [349, 387], "scheme": [220, 225, 226, 228, 240, 242, 245, 246, 248, 254, 424], "scipi": [7, 89, 108, 164, 286, 287, 326, 331, 337, 351, 352, 353, 360, 368, 390, 391, 410, 415, 417, 421, 423, 424], "scrambl": [19, 22, 23, 424], "scrambler": [19, 20, 423, 424], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 420, 421, 424, 425], "se": [252, 366], "second": [74, 75, 77, 81, 101, 211, 213, 217, 296, 297, 298, 312, 313, 317, 318, 328, 333, 334, 337, 350, 381, 391, 392, 397, 407, 410, 417], "section": [10, 88, 96, 103, 104, 105, 106, 107, 139, 220, 242, 273, 415, 419], "see": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 120, 121, 123, 124, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 179, 180, 182, 194, 211, 212, 213, 214, 215, 216, 217, 218, 219, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 248, 251, 253, 254, 269, 278, 286, 287, 296, 304, 315, 317, 323, 326, 331, 355, 356, 357, 358, 360, 361, 362, 368, 370, 374, 378, 379, 383, 423], "seed": [24, 28, 32, 36, 56, 58, 61, 90, 95, 284, 289, 294, 303, 424], "seen": 408, "segment": [360, 368], "select": [356, 358, 360, 361, 362, 368, 407], "self": [125, 126, 151, 152, 164, 165, 181, 193], "semant": 425, "semilogi": [285, 348, 365, 366, 385, 386], "semilogx": [282, 296, 335, 339, 347, 365, 387, 394], "sensibl": 424, "separ": [41, 228, 350, 354], "septemb": 424, "sequenc": [19, 21, 23, 24, 27, 32, 35, 40, 56, 57, 90, 94, 125, 129, 133, 136, 138, 151, 154, 158, 161, 163, 183, 186, 187, 288, 289, 291, 294, 303, 318, 322, 328, 329, 332, 350, 377, 400, 402, 404, 423, 424], "ser": [6, 9, 42, 53, 101, 195, 207, 228, 240, 248, 252, 254, 366, 420, 423, 424], "server": 406, "set": [284, 312, 313, 315, 318, 322, 329, 349, 352, 360, 364, 368, 369, 371, 373, 387, 392, 397, 400, 407, 409, 415], "set_prop_cycl": [282, 320, 321, 410, 413, 417, 420], "set_titl": [282, 347, 387], "set_xlabel": [282, 347, 387], "set_ylabel": [282, 347, 387], "settabl": [10, 13, 14, 16, 220, 221, 222, 232, 235, 236, 237], "sever": [114, 170, 318, 329], "seymour": 298, "sf": [410, 417], "sh": 407, "shade": [351, 368], "shannon": [5, 9, 367, 385, 386, 423, 424], "shannon_limit_ebn0": [5, 9, 367, 385, 424], "shannon_limit_snr": [5, 285, 386, 424], "shape": [42, 43, 46, 48, 51, 52, 55, 62, 195, 196, 200, 202, 205, 206, 210, 228, 240, 241, 248, 249, 254, 255, 317, 323, 354, 372, 378, 379, 380, 381, 383, 415, 416, 423, 424], "share": [350, 352, 353, 372], "sharei": [282, 347], "shift": [8, 125, 126, 137, 151, 152, 162, 228, 240, 248, 250, 251, 252, 253, 254, 291, 318, 332, 402, 403, 414, 415, 416, 423, 424], "shnidman": [2, 387, 424], "should": [145, 220, 228, 380, 381, 408], "show": [410, 413, 414, 415, 417, 418, 419, 420, 421], "show_zero": [349, 364], "showloc": 409, "shown": 385, "side": [286, 287, 317, 318, 337, 355, 356, 358, 360, 361, 362, 368, 390, 391, 414, 415, 418, 421], "sidelob": [288, 322, 332, 350, 352, 378, 383, 400, 402], "sigma": [96, 97, 98, 99, 100, 273, 274, 275, 276, 277, 284, 285, 292, 320, 321, 340, 341, 393, 410, 417], "sigma1": [410, 417], "sigma2": [2, 98, 100, 275, 277, 320, 321, 340, 341, 351, 393, 410, 417], "sigma_": [80, 96, 97, 99, 312, 313, 392, 397], "sigma_1": [410, 417], "sigma_2": 410, "signal": [2, 5, 6, 9, 10, 11, 12, 13, 14, 42, 43, 51, 62, 63, 67, 75, 77, 80, 81, 84, 88, 89, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 113, 139, 140, 143, 149, 164, 166, 181, 190, 193, 195, 196, 205, 211, 212, 220, 221, 222, 224, 228, 230, 232, 233, 239, 240, 241, 248, 249, 254, 255, 256, 257, 258, 262, 265, 273, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 292, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 320, 321, 324, 326, 327, 330, 331, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 358, 360, 361, 362, 363, 364, 368, 372, 375, 376, 380, 381, 382, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 401, 410, 414, 415, 417, 419, 421, 423, 424], "signific": [342, 398], "significantli": 421, "sim": [96, 273, 284, 292, 407, 410, 417], "similar": [228, 240, 254, 297, 421], "similarli": 410, "simon": [250, 252], "simpl": 292, "simpli": 296, "simplifi": [292, 407], "simul": [220, 225, 226, 242, 245, 246, 420, 423], "sin": [232, 284, 297, 378, 383, 395], "sinc": [292, 297, 333, 334, 344, 380, 406, 420], "sine": [8, 139, 228, 232, 233, 323, 423, 424], "sing": 291, "singl": [99, 114, 170, 250, 252, 352, 354, 419], "sinusoid": [3, 248, 284, 336, 395, 396, 415, 424], "site": [406, 415], "size": [10, 40, 41, 46, 48, 95, 136, 161, 183, 185, 186, 187, 200, 202, 291, 303, 315, 320, 321, 332, 352, 353, 372, 413, 419, 420, 421], "sliding_window_view": [410, 417], "slightli": 339, "slope": [220, 242, 298], "small": [329, 421], "smaller": [298, 317, 337, 339, 351, 378, 383, 390, 391, 421], "smallest": 342, "snr": [1, 2, 4, 5, 9, 96, 97, 99, 101, 103, 104, 105, 106, 107, 228, 240, 248, 254, 282, 284, 285, 292, 296, 297, 298, 312, 313, 320, 321, 335, 339, 340, 341, 347, 351, 359, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 404, 410, 417, 420, 424], "snr1": [4, 298, 312, 392, 410, 417], "snr2": [4, 298, 312, 392, 410, 417], "snr_ref": [282, 339, 347, 417], "snr_to_ebn0": [1, 44, 197, 250, 388, 424], "snr_to_esn0": [1, 53, 207, 252, 389, 424], "so": [62, 240, 248, 254, 282, 298, 315, 317, 323, 378, 379, 383, 423], "soft": 292, "softwar": 423, "solid": [282, 350, 352, 353, 364, 372], "solv": [292, 339], "some": 406, "someth": 423, "sourc": 311, "sp": [8, 9, 42, 43, 46, 48, 54, 195, 196, 200, 202, 208, 228, 229, 240, 241, 248, 249, 254, 255, 306, 309, 317, 323, 354, 363, 372, 378, 379, 380, 381, 383, 388, 389, 395, 396, 418, 420, 421], "space": [5, 62, 114, 170, 297, 315, 423], "span": [8, 9, 43, 196, 241, 249, 255, 317, 323, 354, 363, 378, 379, 383, 418, 421, 424], "specif": [64, 85, 106, 114, 170, 191, 280, 409, 421], "specifi": [7, 20, 101, 104, 105, 107, 125, 128, 134, 151, 153, 159, 220, 225, 226, 242, 245, 246, 284, 285, 303, 325, 339, 406, 414, 415, 424], "spectra": 380, "spectral": [5, 228, 292, 304, 352, 360, 367, 380, 385, 386, 392, 397, 418, 421], "spectrogram": [9, 368, 423, 424], "spectrum": [304, 355, 356, 358, 360, 361, 362, 368, 380, 392, 395, 396, 397, 399], "sphinx": 406, "split": 62, "spread": [62, 322, 352, 380, 381, 400], "sqrt": [273, 274, 275, 277, 282, 292, 310, 311, 312, 313, 317, 320, 321, 380, 381, 382, 383, 392, 397, 402, 410, 417, 418, 419, 421], "squar": [6, 8, 196, 241, 249, 255, 282, 311, 312, 313, 315, 320, 321, 335, 339, 340, 341, 344, 347, 354, 372, 380, 381, 382, 383, 387, 392, 393, 394, 397, 414, 424], "src": [407, 421], "srrc": [8, 196, 240, 241, 248, 249, 254, 255, 354, 372, 380, 381, 383, 418, 420], "srrc_0p1": 421, "srrc_0p5": 421, "srrc_0p9": 421, "standard": [7, 271, 272, 312, 313, 369, 392, 397, 410, 417, 423, 424], "start": [229, 241, 249, 255, 406], "stat": [7, 337, 351, 390, 391, 410, 417], "state": [19, 20, 62, 63, 67, 80, 84, 87, 88, 108, 109, 113, 120, 121, 123, 126, 128, 132, 134, 135, 136, 138, 139, 143, 145, 146, 147, 149, 152, 153, 157, 159, 160, 161, 163, 164, 176, 177, 179, 181, 190, 193, 230, 256, 257, 269, 278, 279, 291, 332, 424], "statement": 407, "static": [24, 29, 32, 37, 56, 59, 90, 96, 97, 98, 99, 100, 273, 274, 275, 276, 277, 407], "statist": [2, 96, 97, 98, 100, 273, 274, 275, 277, 320, 321, 351, 424], "steadi": [67, 80], "stein": [298, 312, 313, 392, 397], "stem": [9, 352, 353, 357, 369, 370, 423, 424], "step": [9, 62, 84, 88, 108, 122, 125, 132, 134, 135, 136, 138, 149, 151, 157, 159, 160, 161, 163, 164, 178, 181, 190, 193, 230, 232, 233, 239, 256, 278, 291, 320, 321, 337, 370, 390, 391, 410, 417, 423], "step_respons": [9, 62, 84, 88, 108, 122, 149, 164, 178, 181, 190, 193, 230, 256, 278, 370, 414, 415, 419, 424], "steven": [96, 97, 98, 100, 273, 274, 275, 277], "stop": [64, 85, 191, 280, 338], "stopband": [64, 85, 191, 280, 338, 378, 383], "store": [406, 408, 409], "str": [7, 89, 286, 287, 325, 326, 331, 352, 353, 354, 360, 363, 364, 368, 369], "straddl": 352, "stream": [12, 17, 18, 63, 64, 85, 87, 89, 109, 110, 113, 120, 123, 141, 143, 147, 165, 167, 176, 179, 182, 191, 194, 228, 231, 240, 248, 254, 257, 258, 269, 279, 280, 415], "stretch": 327, "stride": 364, "stride_trick": [410, 417], "string": [43, 196, 241, 249, 255, 325, 424], "strong": [12, 13], "structur": 139, "style": [9, 369, 373, 424], "subclass": [125, 131, 151, 156], "subplot": [282, 327, 347, 354, 387, 419, 420], "suffici": [312, 313, 392, 397], "sum": [7, 62, 84, 96, 108, 164, 190, 256, 258, 265, 273, 278, 390, 391, 410, 417, 421, 423, 424], "sum_": [108, 164, 275, 277, 283, 284, 285, 296, 307, 310, 311, 320, 321, 324, 335, 339, 340, 341, 352, 353, 382, 393, 394, 410, 417], "sum_distribut": [7, 390, 391, 424], "summari": 407, "summat": [84, 256], "superflu": 424, "support": [108, 164, 424], "suppos": [297, 335], "suppress": 424, "suptitl": [228, 240, 248, 254, 354, 387, 419, 420], "surround": 10, "sweep_alpha": 418, "swerl": [2, 387], "switch": 406, "sym": [42, 43, 47, 54, 195, 196, 208, 228, 229, 240, 241, 248, 249, 254, 255, 306, 309, 317, 378, 383, 388, 389, 421], "symbol": [6, 9, 42, 43, 45, 46, 47, 48, 53, 54, 101, 103, 106, 125, 127, 136, 151, 161, 190, 195, 196, 198, 199, 200, 201, 202, 207, 208, 209, 220, 223, 228, 229, 240, 241, 242, 243, 248, 249, 250, 252, 253, 254, 255, 284, 291, 292, 305, 306, 308, 309, 311, 317, 323, 349, 354, 363, 366, 371, 372, 378, 379, 380, 381, 383, 388, 389, 418, 419, 421, 423, 424], "symbol_label": [43, 228, 229, 240, 241, 248, 249, 253, 254, 255, 420], "symbol_map": [9, 195, 196, 209, 228, 240, 248, 251, 253, 254, 311, 371, 420, 424], "symbol_r": [380, 381], "symmetr": [5, 32, 36, 90, 294, 295, 303, 395, 396, 404, 423], "symmetri": 149, "synchron": 423, "synthes": 424, "synthesi": [291, 423, 424], "system": [62, 84, 190, 278, 309, 315, 322, 338, 375, 389, 400, 407, 409, 419, 423], "t": [9, 19, 67, 69, 74, 96, 125, 126, 137, 151, 152, 162, 211, 213, 217, 273, 291, 297, 312, 313, 316, 317, 318, 320, 321, 325, 328, 333, 335, 337, 339, 340, 341, 353, 372, 377, 378, 381, 383, 390, 391, 392, 393, 394, 397, 406, 413, 424], "t_": [6, 75, 77, 81, 125, 140, 151, 312, 313, 317, 378, 381, 383, 421], "t_0": [125, 151], "t_1": [125, 151], "t_c": [296, 297, 333, 334], "t_lock": 419, "tabul": [101, 102], "tail": 351, "take": [75, 77, 81, 406], "taken": [240, 248, 254, 256], "tap": [3, 19, 62, 64, 84, 85, 88, 108, 124, 125, 126, 137, 138, 139, 148, 149, 151, 152, 162, 163, 164, 168, 169, 181, 190, 191, 193, 230, 256, 258, 264, 266, 267, 270, 278, 280, 291, 375, 414, 415], "target": [2, 387], "tau": 314, "tau_": [9, 62, 84, 88, 108, 119, 149, 190, 230, 256, 278, 361], "tau_g": [9, 62, 84, 88, 108, 115, 149, 190, 230, 256, 278, 356], "tdoa": [4, 392, 423, 424], "tdoa_crlb": [4, 380, 392, 424], "techniqu": [333, 334], "ted": [74, 213], "tensor": 415, "term": [298, 312, 313, 392, 397], "test": [96, 273, 407, 408, 423, 424], "test_psk": 409, "testpath": 409, "text": [6, 24, 32, 64, 85, 90, 96, 191, 254, 273, 280, 282, 283, 284, 285, 290, 292, 295, 296, 297, 299, 300, 311, 312, 313, 315, 316, 318, 328, 330, 338, 339, 343, 345, 346, 377, 380, 381, 382, 384, 385, 386, 392, 397], "textcoord": [285, 386], "textrm": [67, 78], "th": [184, 188, 189, 352], "than": [43, 83, 136, 161, 228, 229, 241, 249, 253, 255, 282, 285, 298, 312, 313, 318, 323, 327, 335, 347, 349, 371, 379, 386, 387, 392, 397, 410, 417], "thei": [322, 332, 400, 425], "them": [181, 425], "theme": 406, "theoret": [99, 250, 252, 282, 335, 340, 341, 347, 348, 366, 367, 387, 393, 394, 410, 417, 420, 423, 424], "theori": [88, 96, 97, 98, 100, 181, 273, 274, 275, 277, 282, 410, 417], "therefor": [240, 248, 254, 318, 380, 421], "theta": [5, 232, 234, 237, 344], "theta_": [80, 220, 223, 242, 243], "theta_0": 419, "thi": [24, 28, 32, 36, 43, 46, 58, 61, 67, 84, 95, 103, 104, 105, 107, 108, 136, 161, 164, 190, 191, 196, 199, 200, 209, 220, 228, 233, 240, 241, 249, 253, 254, 255, 278, 280, 282, 284, 289, 291, 292, 294, 297, 298, 303, 304, 311, 312, 313, 315, 320, 321, 322, 335, 337, 339, 340, 341, 347, 349, 352, 354, 360, 364, 368, 369, 372, 380, 381, 385, 387, 390, 391, 392, 393, 394, 397, 399, 400, 406, 408, 409, 410, 413, 415, 417, 419, 420, 421, 423], "think": 315, "thought": [317, 425], "three": [145, 390, 413, 421], "threshold": [2, 96, 98, 100, 273, 275, 277, 320, 321, 339, 340, 341, 351, 387, 393, 394, 410, 417, 423, 424], "threshold_factor": [2, 394, 424], "through": [24, 27, 32, 35, 56, 57, 62, 84, 88, 90, 94, 108, 113, 125, 127, 139, 143, 149, 190, 230, 240, 254, 256, 278, 289, 294, 303, 316, 404, 414, 415, 419], "thu": 353, "tild": [42, 46, 195, 199, 200, 220, 223, 228, 240, 242, 243, 248, 254], "time": [2, 3, 6, 10, 40, 41, 67, 74, 75, 77, 78, 79, 80, 81, 88, 95, 108, 136, 139, 161, 164, 181, 193, 211, 213, 220, 230, 240, 242, 248, 254, 283, 284, 296, 297, 299, 303, 304, 307, 309, 310, 312, 313, 316, 317, 322, 324, 327, 333, 334, 335, 336, 343, 345, 346, 350, 352, 353, 355, 360, 364, 368, 372, 376, 378, 380, 381, 382, 383, 384, 389, 392, 395, 396, 397, 399, 400, 404, 410, 413, 414, 415, 417, 421, 423, 424], "time_bandwidth": [2, 8, 296, 317], "time_domain": [9, 10, 84, 88, 139, 181, 190, 193, 228, 230, 232, 240, 248, 254, 278, 284, 304, 316, 318, 322, 329, 336, 372, 381, 395, 396, 399, 400, 410, 413, 417, 418, 419, 420, 421, 424], "titl": [10, 24, 32, 62, 84, 88, 139, 181, 190, 220, 232, 242, 250, 252, 278, 282, 284, 285, 290, 292, 295, 296, 297, 298, 304, 311, 312, 313, 315, 316, 320, 321, 327, 333, 334, 335, 336, 337, 339, 340, 341, 347, 348, 351, 366, 367, 369, 372, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 399, 402, 410, 413, 417, 418, 419, 420, 421, 423], "titleweight": 373, "tmp": 419, "to_complex_baseband": [3, 395, 424], "to_complex_bb": 424, "to_fibonacci_lfsr": [151, 163], "to_galois_lfsr": [125, 138], "to_real_passband": [3, 396, 424], "to_real_pb": 424, "toa": [4, 397, 423, 424], "toa_crlb": [4, 380, 397, 424], "toml": [407, 408, 409], "tom\u00e1\u0161": 292, "tone": [62, 352, 353], "too": 407, "tool": [407, 409, 423], "toolbox": 423, "top": [62, 84, 190, 256, 258, 262, 265, 278], "total": [101, 315, 317, 323, 378, 379, 383, 421], "track": 211, "trail": 407, "trajectori": 228, "transfer": [67, 76, 108, 164, 165, 193, 211, 317, 378, 383, 414, 415, 419], "transform": [9, 62, 352, 353, 423, 424], "transient": 354, "transit": [32, 36, 39, 90, 91, 95, 240, 254, 294, 295, 303, 400], "translat": 424, "transmit": [42, 55, 103, 195, 210, 220, 223, 228, 240, 242, 243, 248, 254, 311, 354, 381], "transmitt": 315, "trapezoid": [181, 182, 424], "tree": [9, 363, 423, 424], "trend": [360, 368], "true": [19, 84, 97, 98, 99, 100, 114, 129, 130, 139, 154, 155, 170, 190, 220, 225, 226, 228, 240, 242, 245, 246, 248, 250, 252, 254, 274, 275, 276, 277, 278, 282, 283, 289, 291, 294, 303, 307, 318, 320, 321, 322, 328, 335, 336, 337, 339, 340, 341, 345, 346, 347, 349, 351, 352, 353, 354, 362, 364, 371, 372, 373, 376, 382, 390, 391, 393, 394, 400, 410, 417, 419, 420], "truncat": 88, "tupl": [5, 62, 84, 88, 89, 96, 99, 101, 103, 106, 108, 114, 115, 119, 149, 164, 170, 181, 190, 193, 195, 199, 200, 220, 225, 226, 228, 230, 240, 242, 245, 246, 248, 254, 256, 273, 276, 278, 283, 286, 287, 307, 310, 324, 326, 329, 331, 343, 344, 345, 349, 352, 353, 355, 356, 357, 358, 360, 361, 362, 368, 370, 371, 374, 377, 403], "turn": 315, "twice": 297, "two": [4, 6, 7, 9, 10, 193, 230, 240, 248, 254, 286, 287, 297, 298, 310, 318, 324, 328, 332, 337, 350, 352, 355, 356, 358, 360, 361, 362, 368, 377, 390, 391, 402, 403, 410, 413, 414, 415, 417, 424], "tx": 413, "tx_filter": [42, 55, 195, 210, 228, 240, 248, 254], "tx_mf": 420, "tx_sampl": [228, 240, 248, 254, 354], "txt": [406, 407, 408, 409], "ty": 413, "type": [125, 131, 136, 151, 156, 161, 232, 233, 291, 300, 311, 320, 321, 330, 335, 339, 340, 341, 342, 352, 353, 357, 360, 365, 368, 370, 393, 394, 398, 407, 419, 424], "u": [122, 178, 318, 370, 402, 403, 414, 415, 423], "ub": 292, "uint8": [228, 240, 248, 254, 342, 398], "unaffect": [132, 157], "unalias": 304, "unambigu": [220, 242], "uncod": 302, "under": [2, 9, 96, 273, 320, 321, 351, 394, 410, 417], "underdamp": [74, 83, 213, 214], "underli": [211, 215], "understand": 415, "uniform": [322, 400], "uniformli": 372, "uniniti": 291, "uninstal": 407, "unit": [1, 122, 178, 211, 229, 232, 241, 249, 255, 284, 285, 292, 300, 301, 302, 320, 321, 330, 341, 370, 372, 393, 408, 414, 415, 419, 423, 424], "unitless": 296, "unknown": [410, 417], "unpack": [7, 101, 103, 325, 398, 420, 423, 424], "unread": 369, "unsign": 342, "unstabl": 415, "unwindow": 297, "unwrap": [316, 362, 419], "up": [315, 407], "up006": 407, "updat": [406, 424], "upon": 408, "upper": [292, 339, 340], "upsampl": [3, 190, 278, 399, 424], "url": 423, "us": [3, 9, 10, 17, 19, 22, 24, 29, 30, 32, 37, 38, 43, 62, 64, 66, 84, 85, 86, 87, 88, 89, 90, 108, 110, 113, 114, 120, 139, 141, 143, 149, 164, 165, 167, 170, 176, 181, 182, 190, 191, 192, 193, 194, 196, 199, 200, 211, 215, 220, 225, 226, 230, 231, 240, 241, 242, 245, 246, 248, 249, 254, 255, 256, 258, 262, 265, 269, 278, 280, 281, 282, 285, 286, 287, 290, 291, 292, 295, 311, 314, 315, 318, 322, 325, 326, 329, 331, 332, 333, 334, 335, 337, 338, 339, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 387, 390, 391, 398, 400, 406, 407, 408, 409, 414, 415, 417, 419, 420, 421, 423, 424, 425], "use_styl": [9, 373, 410, 413, 414, 415, 417, 418, 419, 420, 421], "user": [103, 104, 105, 107, 414, 415], "v": [19, 84, 125, 151, 232, 256, 300, 318, 330, 406], "v0": 407, "v2": [407, 424], "v_": [299, 300, 330, 346, 382], "valid": [109, 315, 332, 350, 354, 363, 364], "valu": [12, 13, 14, 42, 43, 44, 53, 96, 184, 195, 196, 197, 207, 228, 229, 240, 241, 248, 249, 250, 252, 254, 255, 271, 272, 288, 291, 300, 301, 302, 312, 313, 317, 318, 322, 327, 328, 329, 330, 332, 337, 339, 349, 351, 356, 358, 360, 361, 362, 368, 371, 377, 390, 391, 392, 397, 400, 407, 415, 424], "vari": [139, 233], "variabl": [7, 232, 233, 271, 325, 337, 390, 391, 419, 423, 424], "varianc": [67, 80, 96, 98, 100, 275, 277, 284, 320, 321, 335, 339, 340, 341, 351, 393, 394, 410, 417], "variou": [99, 149, 282, 296, 297, 333, 334, 339, 340, 347, 385, 407, 421], "vector": [6, 19, 20, 101, 114, 125, 126, 128, 132, 134, 135, 145, 151, 152, 153, 157, 159, 160, 170, 311, 423, 424], "venv": 415, "veri": [220, 332, 380, 381, 423], "verif": 424, "verifi": 318, "version": [352, 353, 406, 408, 423, 424], "vertic": 327, "vi": 291, "view": [134, 159, 407, 423], "vmax": 368, "vmin": 368, "voltag": [300, 330, 346, 382, 410, 417, 423], "vsat": 315, "vscode": [407, 409], "w": [96, 273, 284, 292, 407, 410, 413, 414, 415, 417, 418, 419, 420, 421], "w_1": [410, 417], "w_pad": 373, "wa": [106, 285, 298, 312, 313, 315, 381, 392, 397, 423], "wai": [190, 408], "walsh": [322, 400, 403, 423, 424], "walsh_cod": [322, 400, 403, 424], "walshcod": 400, "warn": [407, 424], "wave": [5, 139, 228, 401], "wavelength": [5, 401, 424], "we": [344, 354, 410, 417, 423], "weak": [12, 14], "web": 406, "webpag": 406, "webserv": 406, "welch": [9, 360, 368], "well": [297, 315], "were": [250, 252, 298, 312, 313, 392, 397], "what": 315, "whatev": 106, "when": [10, 17, 24, 32, 62, 64, 84, 85, 87, 88, 108, 113, 116, 120, 122, 139, 143, 149, 164, 172, 176, 178, 181, 190, 191, 193, 194, 230, 256, 269, 278, 280, 284, 285, 289, 290, 292, 294, 295, 298, 309, 322, 339, 352, 355, 356, 357, 358, 361, 362, 369, 370, 385, 386, 389, 400, 402, 410, 413, 414, 415, 417], "where": [63, 74, 90, 95, 109, 142, 196, 213, 249, 255, 257, 273, 279, 284, 285, 292, 297, 303, 305, 306, 308, 312, 313, 317, 318, 352, 353, 380, 381, 388, 392, 397, 402, 414, 415, 423], "wherev": 408, "whether": [10, 12, 18, 62, 64, 84, 85, 88, 89, 97, 98, 99, 100, 108, 110, 123, 139, 141, 147, 149, 164, 165, 167, 179, 181, 182, 190, 191, 193, 194, 230, 231, 250, 252, 256, 258, 274, 275, 276, 277, 278, 280, 283, 307, 318, 320, 321, 335, 336, 339, 340, 341, 345, 346, 349, 351, 352, 353, 354, 362, 364, 372, 376, 382, 393, 394], "which": [20, 126, 128, 134, 141, 152, 153, 159, 228, 240, 254, 283, 284, 285, 307, 310, 312, 313, 316, 324, 327, 329, 332, 337, 343, 344, 345, 349, 354, 356, 358, 360, 361, 362, 367, 368, 371, 373, 384, 392, 397, 410, 417, 421], "while": [327, 421], "white": [5, 284, 285, 292, 404, 410, 417, 423, 424], "whitespac": 407, "whole": [114, 170, 421], "whose": [43, 196, 229, 241, 248, 249, 255, 332, 352], "why": 315, "wide": 282, "widen": 352, "wider": [317, 352], "widget": [410, 413, 414, 415, 417, 418, 419, 420, 421], "width": [7, 149, 314, 325, 353], "wiki": [19, 299, 329, 332, 343, 402], "wikipedia": [19, 299, 329, 332, 343, 402], "win": 88, "window": [3, 84, 88, 89, 114, 190, 278, 286, 287, 314, 326, 331, 338, 352, 353, 360, 368, 424], "wireless": [56, 404], "within": [387, 421], "without": [240, 248, 254, 312, 313, 392, 397, 424], "work": 10, "worn": 421, "wors": 420, "worst": [149, 297], "wrap": [9, 62, 369], "wrapper": [108, 164, 369], "wrong": 407, "www": [282, 286, 287, 314, 317, 322, 326, 331, 338, 387, 400], "x": [1, 3, 6, 7, 8, 9, 10, 11, 19, 20, 21, 23, 24, 25, 27, 32, 33, 35, 40, 42, 46, 48, 56, 57, 62, 63, 67, 84, 88, 90, 92, 94, 95, 96, 101, 103, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 181, 182, 183, 186, 187, 190, 193, 195, 200, 202, 211, 212, 228, 230, 240, 248, 254, 256, 257, 258, 262, 271, 272, 273, 278, 279, 283, 284, 288, 289, 291, 292, 294, 296, 297, 299, 300, 301, 302, 303, 304, 307, 310, 311, 312, 313, 316, 320, 321, 324, 327, 328, 330, 332, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 371, 372, 376, 377, 380, 381, 382, 384, 390, 391, 393, 394, 398, 399, 403, 404, 408, 410, 417, 418, 419, 420, 424, 425], "x1": [304, 318, 322, 329, 400], "x1_h0": [410, 417], "x1_h0_real_theori": [410, 417], "x1_h1": [410, 417], "x1_h1_real_theori": [410, 417], "x2": [304, 318, 322, 329, 400], "x2_h0": [410, 417], "x2_h0_real_theori": [410, 417], "x2_h1": [410, 417], "x2_h1_real_theori": [410, 417], "x3": [304, 318, 322, 329, 400, 402], "x5": 402, "x_": [300, 330], "x_1": 390, "x_2": 390, "x_3": 402, "x_5": 402, "x_axi": [352, 355, 356, 358, 360, 361, 362, 414, 415, 418, 419, 424], "x_bb_0p1": 418, "x_bb_0p5": 418, "x_bb_0p9": 418, "x_bb_rect": 418, "x_c": [3, 395, 396], "x_h0": [320, 321, 410, 417], "x_h1": [320, 321, 410, 417], "x_hat": [6, 9, 101, 103, 311, 349, 420], "x_i": [7, 24, 27, 32, 35, 90, 94, 95, 285, 289, 290, 292, 294, 295, 303, 327, 390], "x_label": 359, "x_n": 390, "x_pb_0p1": 418, "x_pb_0p5": 418, "x_pb_0p9": 418, "x_pb_rect": 418, "x_q": 327, "x_r": [3, 395, 396], "x_rect": [380, 381], "x_srrc": [380, 381], "x_srrc_env": 381, "x_tild": [42, 46, 200], "x_u": 402, "xdist": 408, "xlabel": [24, 32, 220, 242, 282, 285, 290, 292, 295, 296, 297, 298, 311, 312, 313, 315, 333, 334, 335, 337, 339, 385, 386, 390, 391, 392, 394, 397, 410, 417, 418, 419, 421], "xlim": [139, 298, 304, 312, 313, 320, 321, 392, 397, 399, 418, 419, 421], "xor": 318, "xtick": 62, "xx": [9, 19, 360], "xytext": [285, 386], "y": [6, 7, 8, 9, 10, 11, 19, 21, 23, 24, 26, 27, 32, 34, 35, 40, 57, 62, 84, 88, 90, 93, 94, 95, 108, 109, 113, 125, 127, 139, 140, 143, 151, 164, 166, 181, 183, 186, 187, 190, 193, 211, 212, 232, 233, 239, 256, 257, 258, 265, 278, 279, 284, 289, 291, 292, 294, 296, 301, 302, 303, 304, 310, 316, 324, 327, 332, 336, 337, 349, 350, 352, 353, 358, 360, 368, 369, 371, 384, 391, 399, 403, 419, 420], "y1": [84, 139, 190, 278, 327], "y2": [84, 139, 190, 278, 327], "y2_h0": 410, "y2_h0_real_theori": 410, "y2_h1": 410, "y2_h1_real_theori": 410, "y3": [84, 139, 190, 278], "y4": [84, 139, 190, 278], "y5": [84, 139, 190, 278], "y_": [125, 151, 291], "y_1": [84, 190, 278, 327], "y_2": [84, 190, 278, 327, 410], "y_3": [84, 190, 278], "y_4": [84, 190, 278], "y_5": [84, 190, 278], "y_axi": [88, 350, 352, 353, 358, 360, 368, 424], "y_back": 181, "y_fir": [193, 230], "y_forw": 181, "y_i": [24, 27, 32, 35, 62, 63, 90, 94, 256, 285, 289, 290, 292, 294, 295, 303], "y_iir": [193, 230], "y_j": [95, 303], "y_prev": [8, 301, 302], "y_t": [125, 151, 291], "y_trap": 181, "yaml": 407, "yang": 292, "year": 423, "yield": 377, "ylabel": [24, 32, 220, 242, 282, 285, 290, 292, 295, 296, 297, 298, 311, 312, 313, 315, 316, 333, 334, 335, 337, 339, 385, 386, 390, 391, 392, 394, 397, 410, 417, 418, 419, 421], "ylim": [10, 139, 149, 193, 230, 286, 287, 297, 298, 304, 312, 313, 314, 318, 320, 321, 322, 326, 329, 331, 332, 333, 334, 339, 367, 392, 397, 399, 400, 402, 414, 419, 420, 421], "you": [315, 407, 408, 409, 419, 423], "your": [407, 409, 419, 423], "z": [10, 67, 108, 164, 181, 193, 211, 232, 291, 301, 302, 337, 390, 391, 402, 414, 415, 419], "z1_h0": [410, 417], "z1_h0_theori": [410, 417], "z1_h1": [410, 417], "z1_h1_theori": [410, 417], "z2_h0": [410, 417], "z2_h0_theori": [410, 417], "z2_h1": [410, 417], "z2_h1_theori": [410, 417], "z_1": [410, 417], "z_2": [410, 417], "z_h0": [320, 321], "z_h1": [320, 321], "zadoff": [402, 403, 423, 424], "zadoff_chu": 424, "zadoff_chu_sequ": [402, 403, 424], "zero": [3, 9, 62, 84, 88, 108, 113, 139, 143, 145, 149, 150, 164, 165, 170, 180, 181, 190, 191, 193, 211, 230, 233, 256, 278, 280, 297, 314, 322, 323, 332, 342, 350, 352, 355, 356, 357, 358, 361, 362, 370, 374, 379, 394, 395, 399, 400, 414, 418, 419, 421, 423, 424], "zeros_pol": [9, 374, 415, 424], "zerospol": [164, 165, 170, 181, 193, 355, 356, 357, 358, 361, 362, 370, 374, 415], "zeta": [67, 74, 83, 211, 213, 214], "zm1": 415, "zoh": [190, 191, 192, 278, 280, 281], "zorder": [284, 384], "\u03b1": 193, "\u03bc": [297, 312, 313]}, "titles": ["Coding", "Conversions", "Detection", "Digital signal processing", "Estimation", "Link budgets", "Measurement", "Miscellaneous", "Modulation", "Plotting", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.AdditiveScrambler", "sdr.AdditiveScrambler.__init__", "sdr.AdditiveScrambler.descramble", "sdr.AdditiveScrambler.lfsr", "sdr.AdditiveScrambler.scramble", "sdr.BinaryErasureChannel", "sdr.BinaryErasureChannel.X", "sdr.BinaryErasureChannel.Y", "sdr.BinaryErasureChannel.__call__", "sdr.BinaryErasureChannel.__init__", "sdr.BinaryErasureChannel.capacities", "sdr.BinaryErasureChannel.capacity", "sdr.BinaryErasureChannel.p", "sdr.BinarySymmetricChannel", "sdr.BinarySymmetricChannel.X", "sdr.BinarySymmetricChannel.Y", "sdr.BinarySymmetricChannel.__call__", "sdr.BinarySymmetricChannel.__init__", "sdr.BinarySymmetricChannel.capacities", "sdr.BinarySymmetricChannel.capacity", "sdr.BinarySymmetricChannel.p", "sdr.BlockInterleaver", "sdr.BlockInterleaver.__init__", "sdr.CPM", "sdr.CPM.__init__", "sdr.CPM.ber", "sdr.CPM.bps", "sdr.CPM.demodulate", "sdr.CPM.index", "sdr.CPM.modulate", "sdr.CPM.order", "sdr.CPM.phase_offset", "sdr.CPM.pulse_shape", "sdr.CPM.rx_filter", "sdr.CPM.ser", "sdr.CPM.sps", "sdr.CPM.tx_filter", "sdr.Channel", "sdr.Channel.__call__", "sdr.Channel.__init__", "sdr.Channel.capacities", "sdr.Channel.capacity", "sdr.Channel.reset", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__init__", "sdr.Decimator.method", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.DiscreteMemorylessChannel", "sdr.DiscreteMemorylessChannel.P", "sdr.DiscreteMemorylessChannel.X", "sdr.DiscreteMemorylessChannel.Y", "sdr.DiscreteMemorylessChannel.__call__", "sdr.DiscreteMemorylessChannel.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.noise_bandwidth", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FLFSR", "sdr.FLFSR.Taps", "sdr.FLFSR.__call__", "sdr.FLFSR.__init__", "sdr.FLFSR.characteristic_poly", "sdr.FLFSR.feedback_poly", "sdr.FLFSR.field", "sdr.FLFSR.initial_state", "sdr.FLFSR.order", "sdr.FLFSR.reset", "sdr.FLFSR.state", "sdr.FLFSR.step", "sdr.FLFSR.taps", "sdr.FLFSR.to_galois_lfsr", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.GLFSR", "sdr.GLFSR.Taps", "sdr.GLFSR.__init__", "sdr.GLFSR.characteristic_poly", "sdr.GLFSR.feedback_poly", "sdr.GLFSR.field", "sdr.GLFSR.initial_state", "sdr.GLFSR.order", "sdr.GLFSR.reset", "sdr.GLFSR.state", "sdr.GLFSR.step", "sdr.GLFSR.taps", "sdr.GLFSR.to_fibonacci_lfsr", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.noise_bandwidth", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interleaver", "sdr.Interleaver.__init__", "sdr.Interleaver.__len__", "sdr.Interleaver.deinterleave", "sdr.Interleaver.interleave", "sdr.Interleaver.inverse_map", "sdr.Interleaver.map", "sdr.Interpolator", "sdr.Interpolator.__init__", "sdr.Interpolator.method", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.decimation", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.interpolation", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.rate", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.method", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.bandpass_fir", "sdr.bandstop_fir", "sdr.barker_code", "sdr.bec", "sdr.bec_capacity", "sdr.berlekamp_massey", "sdr.biawgn_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.coherent_gain", "sdr.coherent_gain_loss", "sdr.composite_snr", "sdr.crest_factor", "sdr.db", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.fdoa_crlb", "sdr.foa_crlb", "sdr.fractional_delay_fir", "sdr.free_space_path_loss", "sdr.frequency_offset", "sdr.gaussian", "sdr.gold_code", "sdr.gray_code", "sdr.h0", "sdr.h1", "sdr.hadamard_code", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.highpass_fir", "sdr.iq_imbalance", "sdr.is_preferred_pair", "sdr.kasami_code", "sdr.linear", "sdr.lowpass_fir", "sdr.m_sequence", "sdr.max_frequency_offset", "sdr.max_integration_time", "sdr.min_snr", "sdr.mix", "sdr.multiply_distributions", "sdr.multirate_fir", "sdr.non_coherent_gain", "sdr.p_d", "sdr.p_fa", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.peebles", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.correlation", "sdr.plot.detector_pdfs", "sdr.plot.dft", "sdr.plot.dtft", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.shannon_limit_ebn0", "sdr.plot.spectrogram", "sdr.plot.stem", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.power", "sdr.preferred_pairs", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_bandwidth", "sdr.rms_integration_time", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.shannon_limit_ebn0", "sdr.shannon_limit_snr", "sdr.shnidman", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.sum_distribution", "sdr.sum_distributions", "sdr.tdoa_crlb", "sdr.threshold", "sdr.threshold_factor", "sdr.to_complex_baseband", "sdr.to_real_passband", "sdr.toa_crlb", "sdr.unpack", "sdr.upsample", "sdr.walsh_code", "sdr.wavelength", "sdr.zadoff_chu_sequence", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Coherent integration", "Detection", "Digital signal processing", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Modulation", "Non-coherent integration", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "Synchronization", "sdr", "v0.0", "Versioning"], "titleterms": {"": [414, 415], "0": 424, "1": 424, "10": 424, "11": 424, "12": 424, "13": 424, "14": 424, "15": 424, "16": [420, 424], "17": 424, "18": 424, "19": 424, "2": 424, "20": 424, "21": 424, "22": 424, "23": 424, "3": 424, "4": 424, "5": 424, "6": 424, "7": 424, "8": [420, 424], "9": 424, "across": [418, 419], "alpha": 425, "also": [20, 43, 44, 53, 101, 103, 114, 115, 116, 119, 122, 125, 128, 151, 153, 170, 172, 178, 196, 197, 207, 229, 241, 249, 250, 252, 255, 271, 272, 282, 299, 312, 313, 318, 320, 321, 328, 335, 339, 343, 347, 351, 352, 353, 377, 380, 381, 385, 386, 387, 392, 397, 399], "amplitud": 405, "an": [413, 414, 415], "analysi": 9, "analyz": [414, 415, 419], "antenna": 5, "applic": 3, "approxim": 2, "arbitrari": [3, 413], "averag": 418, "b_n": 419, "bandwidth": 418, "beta": 425, "bit": 420, "bpsk": 420, "budget": 5, "build": 406, "capac": 5, "chang": 424, "channel": [5, 404], "citat": 423, "close": 419, "code": [0, 407, 409], "coher": [2, 410, 417], "command": 409, "commit": 407, "compar": 419, "configur": [407, 409], "constel": 420, "construct": 413, "constructor": [10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 101, 108, 125, 139, 149, 151, 164, 181, 183, 190, 193, 195, 211, 220, 228, 230, 232, 240, 242, 248, 254, 256, 278], "continu": 8, "contributor": 424, "control": 405, "convers": 1, "correl": [3, 403], "cosin": 421, "creat": [414, 415], "curv": 420, "data": 7, "decibel": 1, "delai": [414, 415], "depend": 408, "design": 419, "detect": [2, 9, 410, 411, 417], "detector": [2, 405], "dev": 408, "digit": [3, 412, 415], "distanc": 6, "doc": 406, "document": 406, "domain": [4, 9, 418, 419], "downsampl": 413, "edit": 408, "encod": 8, "energi": 6, "error": [405, 420], "estim": [4, 9], "examin": [414, 415, 418], "excess": 418, "farrow": 413, "featur": 423, "filter": [3, 9, 414, 415, 419], "fir": [3, 414], "folder": 408, "format": 407, "formatt": 407, "frac": 413, "frequenc": [4, 9, 414, 415, 418, 419], "from": [407, 408, 409], "fulli": [414, 415], "gaussian": 421, "github": 408, "group": [414, 415], "h": [414, 415], "iir": [3, 415], "impair": 404, "implement": 419, "impuls": [414, 415], "input": 413, "instal": [406, 407, 408, 409, 423], "integ": 413, "integr": [2, 410, 417, 419], "interleav": 0, "irrat": 413, "kei": 420, "length": 403, "line": 409, "linear": [8, 403], "link": 5, "linter": 407, "local": 408, "lock": [405, 419], "loop": [405, 419], "loss": 5, "manipul": [3, 7], "map": [403, 420], "maximum": 403, "measur": 6, "method": [10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 96, 101, 108, 125, 139, 149, 151, 164, 181, 183, 190, 193, 195, 211, 220, 228, 230, 232, 240, 242, 248, 254, 256, 273, 278], "miscellan": 7, "mode": [10, 62, 84, 88, 108, 139, 149, 164, 181, 190, 193, 230, 256, 278], "model": 404, "modul": [6, 8, 9, 416], "n": [410, 413, 414, 415, 417], "nois": [1, 4], "nomenclatur": [42, 195, 228, 240, 248, 254], "non": [2, 417], "note": [20, 67, 128, 153, 292, 298, 312, 313, 315, 360, 368, 380, 381, 392, 397], "omega": [414, 415], "onli": [10, 62, 84, 88, 108, 139, 149, 164, 181, 190, 193, 230, 256, 278], "orthogon": 8, "path": 5, "peak": 418, "perform": [2, 419], "phase": [8, 405, 419, 420], "pll": 419, "plot": [9, 418], "plu": 419, "pole": 415, "polynomi": [125, 151], "polyphas": 3, "power": [6, 418], "ppi": 419, "pre": 407, "probabl": 7, "process": [3, 412], "properti": [10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 108, 125, 139, 149, 151, 164, 181, 183, 190, 193, 195, 211, 220, 228, 230, 232, 240, 242, 248, 254, 256, 278], "proport": 419, "psk": 420, "puls": [8, 418, 421], "pypi": 408, "qpsk": [418, 420], "r": 413, "rais": 421, "rate": [413, 420], "ratio": [1, 4], "recurr": 403, "releas": 425, "resampl": [3, 413], "respons": [414, 415, 419], "root": 421, "run": [407, 409], "scrambler": 0, "sdr": 423, "see": [20, 43, 44, 53, 101, 103, 114, 115, 116, 119, 122, 125, 128, 151, 153, 170, 172, 178, 196, 197, 207, 229, 241, 249, 250, 252, 255, 271, 272, 282, 299, 312, 313, 318, 320, 321, 328, 335, 339, 343, 347, 351, 352, 353, 377, 380, 381, 385, 386, 387, 392, 397, 399], "sequenc": 403, "serv": 406, "shape": [8, 418, 421], "shift": 420, "signal": [1, 3, 4, 404, 412, 413, 418], "simul": 404, "special": [10, 24, 32, 40, 56, 62, 84, 88, 90, 108, 125, 139, 149, 164, 181, 183, 190, 193, 211, 220, 230, 232, 242, 256, 278], "spectral": 9, "squar": 421, "stabil": 415, "state": [125, 151], "step": [414, 415, 419], "stream": [10, 62, 84, 88, 108, 139, 149, 164, 181, 190, 193, 230, 256, 278], "symbol": [8, 403, 420], "synchron": [405, 422], "t": 419, "t_": 413, "tau_g": [414, 415], "test": 409, "theoret": 2, "time": [4, 9, 418, 419], "unit": 409, "upsampl": 413, "util": 9, "v": [407, 409], "v0": 424, "variabl": [42, 195, 228, 240, 248, 254], "variou": 418, "version": 425, "voltag": 6, "warn": [304, 312, 313, 392, 397, 399], "x": 413, "x_1": [410, 417], "x_2": [410, 417], "y": 413, "zero": 415, "zeta": 419}})