Search.setIndex({"titles": ["Coding", "Conversions", "Detection", "Digital signal processing", "Estimation", "Link budgets", "Measurement", "Miscellaneous", "Modulation", "Plotting", "sdr.AGC", "sdr.AGC.__call__", "sdr.AGC.__init__", "sdr.AGC.attack", "sdr.AGC.decay", "sdr.AGC.gain", "sdr.AGC.reference", "sdr.AGC.reset", "sdr.AGC.streaming", "sdr.AdditiveScrambler", "sdr.AdditiveScrambler.__init__", "sdr.AdditiveScrambler.descramble", "sdr.AdditiveScrambler.lfsr", "sdr.AdditiveScrambler.scramble", "sdr.BinaryErasureChannel", "sdr.BinaryErasureChannel.X", "sdr.BinaryErasureChannel.Y", "sdr.BinaryErasureChannel.__call__", "sdr.BinaryErasureChannel.__init__", "sdr.BinaryErasureChannel.capacities", "sdr.BinaryErasureChannel.capacity", "sdr.BinaryErasureChannel.p", "sdr.BinarySymmetricChannel", "sdr.BinarySymmetricChannel.X", "sdr.BinarySymmetricChannel.Y", "sdr.BinarySymmetricChannel.__call__", "sdr.BinarySymmetricChannel.__init__", "sdr.BinarySymmetricChannel.capacities", "sdr.BinarySymmetricChannel.capacity", "sdr.BinarySymmetricChannel.p", "sdr.BlockInterleaver", "sdr.BlockInterleaver.__init__", "sdr.CPM", "sdr.CPM.__init__", "sdr.CPM.ber", "sdr.CPM.bps", "sdr.CPM.demodulate", "sdr.CPM.index", "sdr.CPM.modulate", "sdr.CPM.order", "sdr.CPM.phase_offset", "sdr.CPM.pulse_shape", "sdr.CPM.rx_filter", "sdr.CPM.ser", "sdr.CPM.sps", "sdr.CPM.tx_filter", "sdr.Channel", "sdr.Channel.__call__", "sdr.Channel.__init__", "sdr.Channel.capacities", "sdr.Channel.capacity", "sdr.Channel.reset", "sdr.Channelizer", "sdr.Channelizer.__call__", "sdr.Channelizer.__init__", "sdr.Channelizer.channels", "sdr.Channelizer.method", "sdr.ClosedLoopPLL", "sdr.ClosedLoopPLL.Bn", "sdr.ClosedLoopPLL.BnT", "sdr.ClosedLoopPLL.K0", "sdr.ClosedLoopPLL.K1", "sdr.ClosedLoopPLL.K2", "sdr.ClosedLoopPLL.Kp", "sdr.ClosedLoopPLL.__init__", "sdr.ClosedLoopPLL.frequency_lock_time", "sdr.ClosedLoopPLL.iir", "sdr.ClosedLoopPLL.lock_time", "sdr.ClosedLoopPLL.omega_3dB", "sdr.ClosedLoopPLL.omega_n", "sdr.ClosedLoopPLL.phase_error_variance", "sdr.ClosedLoopPLL.phase_lock_time", "sdr.ClosedLoopPLL.sample_rate", "sdr.ClosedLoopPLL.zeta", "sdr.Decimator", "sdr.Decimator.__init__", "sdr.Decimator.method", "sdr.Decimator.reset", "sdr.Differentiator", "sdr.Differentiator.__init__", "sdr.DiscreteMemorylessChannel", "sdr.DiscreteMemorylessChannel.P", "sdr.DiscreteMemorylessChannel.X", "sdr.DiscreteMemorylessChannel.Y", "sdr.DiscreteMemorylessChannel.__call__", "sdr.DiscreteMemorylessChannel.__init__", "sdr.EnergyDetector", "sdr.EnergyDetector.p_d", "sdr.EnergyDetector.p_fa", "sdr.EnergyDetector.roc", "sdr.EnergyDetector.threshold", "sdr.ErrorRate", "sdr.ErrorRate.__init__", "sdr.ErrorRate.add", "sdr.ErrorRate.counts", "sdr.ErrorRate.error_rate", "sdr.ErrorRate.error_rates", "sdr.ErrorRate.errors", "sdr.FIR", "sdr.FIR.__call__", "sdr.FIR.__init__", "sdr.FIR.__len__", "sdr.FIR.delay", "sdr.FIR.flush", "sdr.FIR.frequency_response", "sdr.FIR.group_delay", "sdr.FIR.impulse_response", "sdr.FIR.order", "sdr.FIR.phase_delay", "sdr.FIR.reset", "sdr.FIR.state", "sdr.FIR.step_response", "sdr.FIR.streaming", "sdr.FIR.taps", "sdr.FLFSR", "sdr.FLFSR.Taps", "sdr.FLFSR.__call__", "sdr.FLFSR.__init__", "sdr.FLFSR.characteristic_poly", "sdr.FLFSR.feedback_poly", "sdr.FLFSR.field", "sdr.FLFSR.initial_state", "sdr.FLFSR.order", "sdr.FLFSR.reset", "sdr.FLFSR.state", "sdr.FLFSR.step", "sdr.FLFSR.taps", "sdr.FLFSR.to_galois_lfsr", "sdr.FarrowResampler", "sdr.FarrowResampler.__call__", "sdr.FarrowResampler.__init__", "sdr.FarrowResampler.delay", "sdr.FarrowResampler.flush", "sdr.FarrowResampler.order", "sdr.FarrowResampler.reset", "sdr.FarrowResampler.state", "sdr.FarrowResampler.streaming", "sdr.FarrowResampler.taps", "sdr.FractionalDelay", "sdr.FractionalDelay.__init__", "sdr.GLFSR", "sdr.GLFSR.Taps", "sdr.GLFSR.__init__", "sdr.GLFSR.characteristic_poly", "sdr.GLFSR.feedback_poly", "sdr.GLFSR.field", "sdr.GLFSR.initial_state", "sdr.GLFSR.order", "sdr.GLFSR.reset", "sdr.GLFSR.state", "sdr.GLFSR.step", "sdr.GLFSR.taps", "sdr.GLFSR.to_fibonacci_lfsr", "sdr.IIR", "sdr.IIR.ZerosPoles", "sdr.IIR.__call__", "sdr.IIR.__init__", "sdr.IIR.a_taps", "sdr.IIR.b_taps", "sdr.IIR.frequency_response", "sdr.IIR.gain", "sdr.IIR.impulse_response", "sdr.IIR.order", "sdr.IIR.poles", "sdr.IIR.reset", "sdr.IIR.state", "sdr.IIR.step_response", "sdr.IIR.streaming", "sdr.IIR.zeros", "sdr.Integrator", "sdr.Integrator.__init__", "sdr.Interleaver", "sdr.Interleaver.__init__", "sdr.Interleaver.__len__", "sdr.Interleaver.deinterleave", "sdr.Interleaver.interleave", "sdr.Interleaver.inverse_map", "sdr.Interleaver.map", "sdr.Interpolator", "sdr.Interpolator.__init__", "sdr.Interpolator.method", "sdr.LeakyIntegrator", "sdr.LeakyIntegrator.__init__", "sdr.LinearModulation", "sdr.LinearModulation.__init__", "sdr.LinearModulation.ber", "sdr.LinearModulation.bps", "sdr.LinearModulation.decide_symbols", "sdr.LinearModulation.demodulate", "sdr.LinearModulation.map_symbols", "sdr.LinearModulation.modulate", "sdr.LinearModulation.order", "sdr.LinearModulation.phase_offset", "sdr.LinearModulation.pulse_shape", "sdr.LinearModulation.rx_filter", "sdr.LinearModulation.ser", "sdr.LinearModulation.sps", "sdr.LinearModulation.symbol_map", "sdr.LinearModulation.tx_filter", "sdr.LoopFilter", "sdr.LoopFilter.__call__", "sdr.LoopFilter.__init__", "sdr.LoopFilter.damping_factor", "sdr.LoopFilter.iir", "sdr.LoopFilter.integral_gain", "sdr.LoopFilter.noise_bandwidth", "sdr.LoopFilter.proportional_gain", "sdr.LoopFilter.reset", "sdr.MLPED", "sdr.MLPED.A_received", "sdr.MLPED.A_reference", "sdr.MLPED.__call__", "sdr.MLPED.__init__", "sdr.MLPED.data_aided_error", "sdr.MLPED.decision_directed_error", "sdr.MLPED.gain", "sdr.MSK", "sdr.MSK.__init__", "sdr.MovingAverager", "sdr.MovingAverager.__init__", "sdr.NCO", "sdr.NCO.__call__", "sdr.NCO.__init__", "sdr.NCO.gain", "sdr.NCO.increment", "sdr.NCO.offset", "sdr.NCO.reset", "sdr.NCO.step", "sdr.OQPSK", "sdr.OQPSK.__init__", "sdr.PED", "sdr.PED.__call__", "sdr.PED.__init__", "sdr.PED.data_aided_error", "sdr.PED.decision_directed_error", "sdr.PED.gain", "sdr.PSK", "sdr.PSK.__init__", "sdr.PSK.ber", "sdr.PSK.phase_offset", "sdr.PSK.ser", "sdr.PSK.symbol_map", "sdr.PiMPSK", "sdr.PiMPSK.__init__", "sdr.PolyphaseFIR", "sdr.PolyphaseFIR.__call__", "sdr.PolyphaseFIR.__init__", "sdr.PolyphaseFIR.branches", "sdr.PolyphaseFIR.decimation", "sdr.PolyphaseFIR.delay", "sdr.PolyphaseFIR.input", "sdr.PolyphaseFIR.interpolation", "sdr.PolyphaseFIR.order", "sdr.PolyphaseFIR.output", "sdr.PolyphaseFIR.polyphase_order", "sdr.PolyphaseFIR.polyphase_taps", "sdr.PolyphaseFIR.rate", "sdr.PolyphaseFIR.reset", "sdr.PolyphaseFIR.taps", "sdr.Q", "sdr.Qinv", "sdr.ReplicaCorrelator", "sdr.ReplicaCorrelator.p_d", "sdr.ReplicaCorrelator.p_fa", "sdr.ReplicaCorrelator.roc", "sdr.ReplicaCorrelator.threshold", "sdr.Resampler", "sdr.Resampler.__call__", "sdr.Resampler.__init__", "sdr.Resampler.method", "sdr.albersheim", "sdr.average_power", "sdr.awgn", "sdr.awgn_capacity", "sdr.barker_code", "sdr.bec", "sdr.bec_capacity", "sdr.berlekamp_massey", "sdr.biawgn_capacity", "sdr.binary_code", "sdr.bsc", "sdr.bsc_capacity", "sdr.coherent_gain", "sdr.coherent_gain_loss", "sdr.composite_snr", "sdr.crest_factor", "sdr.db", "sdr.design_bandpass_fir", "sdr.design_bandstop_fir", "sdr.design_frac_delay_fir", "sdr.design_highpass_fir", "sdr.design_lowpass_fir", "sdr.design_multirate_fir", "sdr.diff_decode", "sdr.diff_encode", "sdr.dmc", "sdr.downsample", "sdr.ebn0_to_esn0", "sdr.ebn0_to_snr", "sdr.energy", "sdr.esn0_to_ebn0", "sdr.esn0_to_snr", "sdr.euclidean", "sdr.evm", "sdr.fdoa_crlb", "sdr.foa_crlb", "sdr.free_space_path_loss", "sdr.frequency_offset", "sdr.gaussian", "sdr.gold_code", "sdr.gray_code", "sdr.h0", "sdr.h1", "sdr.hadamard_code", "sdr.half_sine", "sdr.hamming", "sdr.hexdump", "sdr.iq_imbalance", "sdr.is_preferred_pair", "sdr.kasami_code", "sdr.linear", "sdr.m_sequence", "sdr.max_frequency_offset", "sdr.max_integration_time", "sdr.min_snr", "sdr.mix", "sdr.non_coherent_gain", "sdr.p_d", "sdr.p_fa", "sdr.pack", "sdr.papr", "sdr.parabolic_antenna", "sdr.peak_power", "sdr.peak_voltage", "sdr.peebles", "sdr.plot.ber", "sdr.plot.constellation", "sdr.plot.correlation", "sdr.plot.detector_pdfs", "sdr.plot.eye", "sdr.plot.filter", "sdr.plot.group_delay", "sdr.plot.impulse_response", "sdr.plot.magnitude_response", "sdr.plot.p_d", "sdr.plot.periodogram", "sdr.plot.phase_delay", "sdr.plot.phase_response", "sdr.plot.phase_tree", "sdr.plot.raster", "sdr.plot.roc", "sdr.plot.ser", "sdr.plot.shannon_limit_ebn0", "sdr.plot.spectrogram", "sdr.plot.step_response", "sdr.plot.symbol_map", "sdr.plot.time_domain", "sdr.plot.use_style", "sdr.plot.zeros_poles", "sdr.polyphase_decompose", "sdr.preferred_pairs", "sdr.raised_cosine", "sdr.rectangular", "sdr.rms_bandwidth", "sdr.rms_integration_time", "sdr.rms_voltage", "sdr.root_raised_cosine", "sdr.sample_rate_offset", "sdr.shannon_limit_ebn0", "sdr.shannon_limit_snr", "sdr.shnidman", "sdr.snr_to_ebn0", "sdr.snr_to_esn0", "sdr.tdoa_crlb", "sdr.threshold", "sdr.to_complex_baseband", "sdr.to_real_passband", "sdr.toa_crlb", "sdr.unpack", "sdr.upsample", "sdr.walsh_code", "sdr.wavelength", "sdr.zadoff_chu_sequence", "Sequences", "Simulation", "Synchronization", "Documentation", "Formatting", "Installation", "Unit Tests", "Coherent integration", "Detection", "Digital signal processing", "Farrow arbitrary resampler", "FIR filters", "IIR filters", "Modulation", "Non-coherent integration", "Peak-to-average power", "Phase-locked loops", "Phase-shift keying", "Pulse shapes", "Synchronization", "sdr", "v0.0", "Versioning"], "terms": {"class": [0, 2, 3, 6, 8, 10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 96, 101, 103, 104, 105, 106, 107, 108, 124, 130, 138, 148, 150, 155, 163, 179, 181, 188, 191, 193, 209, 218, 226, 228, 230, 238, 240, 246, 252, 254, 271, 276, 393, 394, 395, 404, 405, 410, 413, 414], "sdr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 414, 415], "implement": [0, 2, 3, 8, 10, 19, 24, 32, 40, 42, 62, 84, 88, 90, 96, 108, 124, 138, 148, 150, 163, 179, 181, 188, 191, 193, 209, 213, 218, 226, 228, 230, 238, 240, 246, 252, 254, 271, 276, 280, 287, 344, 380, 393, 394, 395, 403], "an": [0, 2, 3, 5, 7, 10, 12, 19, 20, 32, 43, 62, 84, 88, 96, 108, 110, 114, 116, 133, 135, 137, 149, 158, 160, 162, 163, 164, 166, 169, 171, 179, 180, 181, 182, 188, 191, 192, 194, 227, 228, 230, 239, 247, 248, 250, 253, 271, 276, 283, 293, 299, 332, 333, 339, 345, 352, 361, 366, 370, 388, 391, 395, 398, 409, 413, 414], "arbitrari": [0, 8, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 181, 182, 193, 402, 413, 414], "blockinterleav": [0, 40, 41, 414], "block": [0, 10, 19, 40, 41, 62, 67, 84, 108, 188, 191, 209, 230, 276, 303, 304, 413], "additivescrambl": [0, 19, 20, 21, 22, 23, 414], "addit": [0, 5, 19, 20, 282, 283, 288, 319, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 389, 394, 400, 407, 413, 414], "db": [1, 5, 6, 44, 53, 62, 64, 67, 78, 80, 85, 97, 99, 101, 103, 104, 105, 107, 179, 189, 195, 205, 226, 238, 246, 248, 250, 252, 272, 274, 278, 280, 281, 282, 283, 288, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 321, 322, 327, 330, 332, 333, 334, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 354, 361, 375, 378, 379, 380, 381, 382, 383, 387, 400, 407, 408, 410, 411, 414], "x": [1, 3, 6, 7, 8, 9, 10, 11, 19, 20, 21, 23, 24, 25, 27, 32, 33, 35, 40, 42, 46, 48, 56, 57, 62, 63, 67, 84, 88, 90, 92, 94, 95, 96, 101, 103, 108, 109, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 179, 180, 181, 184, 185, 188, 191, 193, 198, 200, 209, 210, 226, 228, 238, 246, 252, 254, 255, 256, 260, 269, 270, 271, 276, 277, 281, 282, 284, 285, 287, 288, 290, 292, 293, 295, 296, 303, 304, 305, 306, 309, 312, 313, 314, 315, 317, 321, 322, 325, 327, 328, 330, 331, 334, 335, 336, 337, 338, 339, 340, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 365, 366, 370, 373, 374, 375, 377, 384, 388, 389, 393, 394, 398, 400, 407, 408, 409, 410, 414, 415], "arraylik": [1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 24, 29, 32, 37, 42, 43, 44, 46, 48, 53, 62, 63, 64, 84, 85, 88, 90, 95, 96, 97, 98, 99, 100, 101, 103, 108, 109, 110, 124, 125, 127, 133, 138, 144, 148, 150, 151, 152, 158, 163, 164, 165, 166, 179, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 205, 218, 221, 226, 227, 228, 238, 239, 246, 247, 248, 250, 252, 253, 254, 255, 256, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 283, 285, 286, 288, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 326, 330, 332, 333, 334, 336, 337, 338, 339, 341, 344, 350, 351, 352, 353, 354, 355, 356, 357, 360, 363, 364, 368, 369, 373, 374, 378, 379, 380, 381, 382, 383, 384, 387, 388, 391, 394], "ndarrai": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 19, 21, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 37, 40, 42, 44, 46, 48, 51, 53, 56, 57, 59, 62, 63, 84, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 106, 108, 109, 113, 114, 115, 116, 118, 120, 121, 123, 124, 126, 138, 139, 142, 145, 147, 148, 163, 165, 167, 168, 169, 171, 173, 175, 176, 178, 179, 181, 182, 184, 185, 186, 187, 188, 191, 193, 195, 197, 198, 199, 200, 203, 205, 207, 209, 210, 218, 221, 223, 224, 226, 228, 230, 231, 237, 238, 240, 241, 243, 244, 246, 248, 250, 251, 252, 254, 255, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 358, 359, 361, 365, 366, 369, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "float64": [1, 2, 3, 4, 5, 6, 7, 8, 9, 24, 29, 32, 37, 62, 84, 88, 90, 91, 96, 97, 98, 99, 100, 101, 106, 108, 114, 148, 163, 169, 179, 188, 191, 193, 195, 203, 205, 218, 223, 224, 226, 228, 230, 231, 238, 240, 241, 243, 244, 246, 248, 250, 252, 254, 269, 270, 271, 272, 273, 274, 275, 276, 280, 283, 284, 286, 288, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 307, 308, 309, 310, 311, 314, 315, 316, 318, 319, 323, 324, 329, 330, 331, 332, 333, 334, 336, 337, 338, 341, 344, 345, 348, 361, 371, 372, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 393], "convert": [1, 3, 124, 137, 150, 162, 193, 197, 199, 226, 238, 246, 252, 296, 307, 308, 310, 311, 321, 322, 326, 330, 334, 336, 337, 338, 381, 382, 384, 385, 386], "from": [1, 62, 101, 115, 118, 124, 125, 150, 151, 163, 164, 179, 189, 191, 207, 251, 254, 256, 260, 263, 278, 280, 294, 296, 307, 308, 310, 311, 314, 315, 329, 330, 331, 344, 355, 363, 380, 381, 382, 383, 387, 393, 396, 400, 404, 405, 407, 409, 413], "linear": [1, 10, 15, 17, 62, 88, 124, 128, 130, 132, 136, 138, 150, 153, 155, 157, 161, 188, 189, 190, 193, 194, 223, 224, 226, 238, 243, 244, 246, 252, 276, 278, 279, 280, 282, 287, 288, 294, 296, 317, 321, 322, 330, 331, 334, 336, 337, 338, 347, 348, 353, 355, 360, 363, 365, 384, 400, 407, 413, 414], "unit": [1, 121, 176, 209, 227, 230, 239, 247, 253, 282, 283, 288, 296, 303, 304, 321, 322, 330, 338, 364, 366, 384, 398, 404, 405, 409, 413, 414], "ebn0_to_esn0": [1, 53, 205, 250, 307, 410, 414], "ebn0": [1, 9, 42, 44, 193, 195, 226, 238, 246, 248, 252, 307, 308, 345, 362, 378, 410], "bp": [1, 42, 45, 193, 196, 226, 238, 246, 252, 307, 308, 310, 381, 410], "int": [1, 3, 7, 8, 9, 24, 27, 28, 32, 35, 36, 40, 41, 42, 43, 45, 49, 54, 56, 58, 61, 62, 64, 84, 85, 88, 89, 90, 94, 95, 101, 103, 104, 107, 108, 111, 112, 114, 115, 116, 117, 118, 121, 124, 132, 135, 138, 140, 141, 143, 148, 149, 150, 157, 160, 163, 169, 171, 172, 176, 179, 181, 183, 188, 189, 191, 193, 194, 196, 201, 206, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 243, 244, 246, 247, 252, 253, 254, 256, 257, 258, 259, 261, 262, 264, 276, 278, 280, 281, 282, 284, 285, 289, 290, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 334, 336, 337, 338, 339, 340, 342, 344, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 369, 370, 371, 372, 376, 380, 381, 382, 384, 388, 389, 390, 392, 393, 410], "e_b": [1, 5, 9, 42, 44, 103, 104, 105, 106, 107, 193, 195, 226, 238, 246, 248, 252, 307, 308, 310, 345, 362, 378, 381, 413, 414], "n_0": [1, 5, 9, 12, 13, 14, 42, 44, 53, 80, 103, 104, 105, 106, 107, 193, 195, 205, 226, 238, 246, 248, 250, 252, 282, 288, 307, 308, 310, 311, 313, 314, 315, 345, 346, 361, 362, 378, 381, 382, 383, 387, 410, 413, 414], "e_": [1, 9, 42, 53, 103, 104, 105, 106, 107, 193, 205, 226, 238, 246, 250, 252, 282, 288, 307, 310, 311, 313, 346, 361, 382, 410, 413], "ebn0_to_snr": [1, 226, 238, 246, 252, 308, 414], "": [1, 5, 9, 19, 20, 42, 46, 48, 62, 67, 75, 77, 78, 79, 81, 82, 84, 88, 96, 103, 104, 105, 106, 107, 108, 114, 115, 118, 121, 124, 125, 127, 131, 133, 134, 148, 150, 151, 152, 156, 158, 159, 163, 169, 176, 179, 188, 191, 193, 194, 197, 198, 199, 200, 218, 226, 228, 238, 246, 252, 254, 266, 271, 273, 275, 276, 280, 282, 283, 288, 293, 294, 308, 311, 313, 314, 315, 317, 322, 327, 337, 344, 346, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 363, 364, 366, 367, 373, 374, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 399, 400, 403, 407, 408, 410, 413, 414], "n": [1, 3, 5, 6, 7, 9, 10, 11, 19, 20, 21, 23, 40, 42, 43, 46, 48, 51, 52, 55, 62, 63, 64, 67, 84, 85, 88, 89, 95, 96, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 138, 139, 142, 145, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 166, 167, 171, 172, 176, 179, 180, 181, 182, 184, 185, 188, 189, 191, 193, 194, 198, 200, 203, 204, 208, 209, 210, 226, 228, 230, 231, 237, 238, 239, 246, 247, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289, 292, 295, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 321, 322, 323, 325, 327, 329, 334, 335, 336, 337, 338, 340, 342, 343, 344, 347, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 366, 369, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 386, 389, 390, 392, 393, 394, 409, 411, 413, 414], "esn0_to_ebn0": [1, 44, 195, 248, 310, 414], "esn0": [1, 9, 42, 53, 193, 205, 226, 238, 246, 250, 252, 310, 311, 361, 410], "esn0_to_snr": [1, 311, 410, 414], "sp": [1, 8, 9, 42, 43, 46, 48, 54, 193, 194, 198, 200, 206, 226, 227, 238, 239, 246, 247, 252, 253, 308, 311, 318, 324, 349, 358, 366, 371, 372, 373, 374, 376, 381, 382, 385, 386, 408, 410, 411], "1": [1, 2, 3, 6, 7, 8, 10, 12, 13, 14, 17, 19, 20, 24, 25, 26, 27, 32, 33, 34, 35, 40, 43, 46, 48, 62, 64, 67, 74, 77, 81, 83, 84, 85, 88, 89, 90, 95, 96, 97, 99, 100, 101, 108, 111, 112, 114, 115, 118, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 169, 179, 180, 181, 186, 188, 189, 191, 192, 193, 194, 197, 198, 199, 200, 207, 209, 211, 212, 218, 222, 226, 227, 228, 230, 232, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 262, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 400, 403, 404, 405, 407, 408, 409, 410, 411, 415], "snr_to_ebn0": [1, 44, 195, 248, 381, 414], "snr": [1, 2, 4, 5, 9, 96, 97, 99, 101, 103, 104, 105, 106, 107, 226, 238, 246, 252, 280, 282, 283, 288, 292, 293, 294, 314, 315, 321, 322, 334, 336, 337, 338, 344, 348, 354, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 400, 407, 410, 414], "snr_to_esn0": [1, 53, 205, 250, 382, 414], "replicacorrel": [2, 271, 272, 273, 274, 275, 414], "clairvoy": [2, 271], "replica": [2, 271], "correl": [2, 9, 271, 284, 314, 315, 319, 323, 328, 329, 331, 347, 370, 380, 383, 387, 390, 392], "energydetector": [2, 96, 97, 98, 99, 100, 414], "energi": [2, 5, 9, 44, 53, 96, 195, 205, 248, 250, 271, 272, 273, 274, 275, 288, 307, 308, 309, 310, 311, 318, 324, 345, 361, 362, 371, 372, 373, 374, 376, 378, 381, 382, 413, 414], "h0": [2, 321, 322, 337, 338, 348, 384, 400, 407, 414], "sigma2": [2, 98, 100, 273, 275, 321, 322, 337, 338, 348, 384, 400, 407], "float": [2, 3, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 24, 28, 30, 31, 32, 36, 38, 39, 42, 43, 47, 50, 56, 60, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 99, 101, 103, 104, 105, 107, 108, 114, 115, 118, 138, 139, 142, 148, 149, 163, 164, 169, 170, 179, 188, 189, 191, 192, 193, 194, 202, 209, 211, 212, 214, 215, 216, 218, 219, 220, 222, 225, 226, 227, 228, 230, 232, 233, 234, 235, 238, 239, 240, 245, 246, 247, 249, 252, 253, 254, 266, 274, 276, 278, 281, 282, 283, 285, 290, 295, 297, 298, 299, 300, 301, 302, 313, 317, 318, 321, 322, 327, 335, 336, 340, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 362, 363, 365, 366, 371, 373, 374, 375, 376, 377, 394], "0": [2, 3, 6, 7, 8, 10, 12, 17, 19, 20, 24, 25, 26, 27, 32, 33, 34, 35, 40, 42, 43, 46, 48, 62, 63, 74, 84, 88, 90, 95, 96, 99, 101, 108, 109, 114, 115, 118, 124, 125, 127, 128, 129, 131, 134, 135, 136, 137, 138, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 179, 181, 182, 188, 189, 191, 193, 194, 197, 198, 199, 200, 207, 211, 218, 222, 226, 227, 228, 230, 232, 238, 239, 246, 247, 249, 251, 252, 253, 254, 255, 262, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 346, 348, 349, 350, 351, 352, 353, 356, 357, 358, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 403, 404, 405, 407, 408, 409, 410, 411, 415], "rv_continu": [2, 321, 322, 348], "comput": [2, 7, 42, 44, 53, 56, 59, 84, 90, 96, 97, 98, 99, 100, 114, 169, 193, 195, 205, 218, 226, 238, 240, 246, 248, 250, 252, 269, 270, 271, 272, 273, 274, 275, 281, 282, 292, 293, 309, 312, 316, 321, 322, 325, 332, 333, 334, 336, 337, 338, 340, 342, 347, 384, 404, 405, 409, 411, 413, 414], "statist": [2, 96, 97, 98, 100, 271, 272, 273, 275, 321, 322, 348, 414], "distribut": [2, 7, 269, 270, 321, 322, 348, 400, 407, 414], "under": [2, 9, 96, 271, 321, 322, 348, 400, 407], "null": [2, 96, 271, 321, 400, 407, 411], "hypothesi": [2, 321, 322, 400, 407], "mathcal": [2, 7, 9, 24, 25, 26, 27, 32, 33, 34, 35, 90, 92, 93, 94, 95, 96, 269, 270, 271, 272, 273, 274, 275, 282, 288, 305, 321, 322, 337, 338, 348, 400, 407], "h": [2, 3, 9, 42, 43, 47, 51, 52, 55, 62, 64, 84, 85, 88, 96, 108, 110, 114, 116, 123, 148, 163, 169, 171, 179, 188, 189, 191, 193, 194, 203, 204, 208, 209, 226, 228, 238, 239, 246, 247, 252, 253, 254, 256, 262, 265, 268, 271, 276, 278, 288, 297, 298, 299, 300, 301, 302, 318, 321, 322, 337, 338, 348, 350, 352, 353, 357, 369, 371, 376, 400, 407, 408, 409, 411], "_0": [2, 9, 96, 271, 321, 338, 348, 400, 407], "h1": [2, 321, 322, 337, 348, 400, 407, 414], "altern": [2, 96, 271, 280, 322, 400, 405, 407], "_1": [2, 9, 96, 271, 322, 337, 348, 400, 407], "p_d": [2, 9, 96, 97, 99, 271, 272, 274, 280, 321, 322, 334, 337, 344, 354, 360, 380, 400, 407, 414], "p_fa": [2, 9, 96, 97, 98, 99, 100, 271, 272, 273, 274, 275, 280, 321, 322, 334, 336, 337, 338, 344, 348, 360, 380, 384, 400, 407, 414], "probabl": [2, 9, 24, 28, 31, 32, 36, 39, 90, 91, 95, 96, 97, 98, 99, 100, 269, 270, 271, 272, 273, 274, 275, 280, 285, 286, 288, 290, 291, 305, 321, 322, 334, 336, 337, 338, 344, 348, 349, 354, 360, 380, 384, 400, 407, 413, 414], "threshold": [2, 96, 98, 100, 271, 273, 275, 321, 322, 336, 337, 338, 348, 380, 384, 400, 407, 413, 414], "fals": [2, 6, 12, 62, 64, 84, 85, 89, 96, 97, 98, 99, 100, 108, 110, 114, 138, 140, 163, 164, 166, 169, 180, 188, 189, 191, 192, 226, 228, 229, 238, 246, 248, 250, 252, 256, 271, 272, 273, 274, 275, 276, 278, 280, 281, 285, 290, 305, 309, 321, 322, 328, 334, 335, 336, 337, 338, 342, 343, 344, 346, 348, 349, 355, 359, 360, 363, 366, 375, 380, 384, 400, 405, 407, 411, 413, 414], "alarm": [2, 96, 97, 98, 99, 100, 271, 272, 273, 274, 275, 280, 321, 322, 334, 336, 337, 338, 344, 348, 360, 380, 384, 400, 407, 413, 414], "p_": [2, 9, 96, 97, 98, 99, 100, 248, 250, 271, 272, 273, 274, 275, 280, 281, 282, 296, 305, 313, 314, 315, 330, 334, 336, 337, 338, 340, 342, 344, 345, 355, 360, 361, 380, 383, 384, 387, 400, 407], "fa": [2, 9, 96, 97, 98, 99, 100, 271, 272, 273, 274, 275, 280, 314, 315, 334, 336, 337, 338, 344, 360, 380, 383, 384, 387, 400, 407], "gamma": [2, 96, 98, 100, 271, 273, 275, 280, 294, 314, 315, 337, 338, 348, 380, 383, 384, 387], "min_snr": [2, 280, 334, 344, 380, 414], "minimum": [2, 8, 226, 280, 334, 380, 413, 414], "input": [2, 5, 8, 10, 11, 19, 21, 23, 24, 25, 27, 32, 33, 35, 40, 41, 56, 57, 62, 63, 64, 67, 75, 77, 80, 81, 84, 85, 88, 89, 90, 92, 94, 95, 108, 109, 110, 116, 120, 121, 124, 126, 138, 139, 140, 141, 144, 145, 148, 163, 164, 165, 166, 171, 176, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 209, 210, 228, 229, 230, 231, 238, 246, 248, 250, 252, 254, 255, 256, 259, 260, 269, 276, 277, 278, 280, 282, 283, 285, 286, 288, 290, 291, 294, 296, 303, 304, 305, 306, 321, 322, 330, 334, 336, 337, 338, 339, 352, 364, 380, 384, 388, 389, 394, 404, 405, 407, 409, 414], "signal": [2, 5, 6, 9, 10, 11, 12, 13, 14, 42, 43, 51, 62, 63, 67, 75, 77, 80, 81, 84, 88, 89, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 113, 138, 139, 142, 148, 163, 165, 179, 188, 191, 193, 194, 203, 209, 210, 218, 219, 220, 222, 226, 228, 230, 231, 237, 238, 239, 246, 247, 252, 253, 254, 255, 256, 260, 263, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 288, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 322, 325, 327, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 363, 366, 369, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 400, 404, 405, 407, 409, 411, 413, 414], "nois": [2, 5, 9, 10, 44, 53, 67, 68, 69, 74, 80, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 195, 205, 209, 211, 215, 226, 238, 246, 248, 250, 252, 271, 272, 273, 274, 275, 280, 282, 283, 288, 294, 307, 308, 310, 311, 314, 315, 321, 322, 334, 336, 337, 338, 345, 348, 361, 362, 378, 379, 380, 381, 382, 383, 384, 387, 394, 400, 407, 409, 413, 414], "ratio": [2, 5, 6, 9, 43, 44, 47, 53, 80, 97, 99, 101, 103, 104, 105, 106, 107, 195, 205, 226, 238, 248, 250, 252, 272, 274, 280, 282, 283, 288, 294, 307, 308, 310, 311, 314, 315, 321, 322, 334, 336, 337, 340, 345, 348, 361, 362, 378, 379, 380, 381, 382, 383, 387], "requir": [2, 63, 109, 255, 277, 280, 287, 334, 336, 380, 396, 397, 398, 399, 414], "achiev": [2, 280, 288, 334, 336, 337, 338, 374, 378, 380, 384, 400, 407, 410, 411, 414], "desir": [2, 10, 12, 16, 280, 282, 334, 336, 344, 380, 384, 407, 410], "albersheim": [2, 280, 334, 414], "estim": [2, 46, 67, 197, 198, 280, 314, 315, 344, 355, 363, 380, 383, 387, 409, 413], "peebl": [2, 336, 344, 414], "gain": [2, 5, 10, 11, 12, 15, 17, 18, 67, 70, 71, 72, 73, 74, 163, 164, 170, 179, 191, 209, 211, 214, 216, 218, 225, 230, 232, 233, 240, 245, 280, 292, 293, 297, 298, 299, 300, 301, 314, 315, 316, 318, 324, 332, 333, 336, 341, 344, 371, 372, 376, 383, 387, 395, 400, 407, 409, 413, 414], "given": [2, 56, 59, 90, 96, 101, 103, 104, 105, 107, 137, 138, 139, 162, 254, 265, 268, 269, 270, 271, 280, 288, 293, 294, 313, 314, 315, 337, 338, 344, 374, 383, 387, 404, 405], "shnidman": [2, 380, 414], "swerl": [2, 380], "target": [2, 380], "model": [2, 24, 32, 90, 124, 150, 287, 380, 414], "coherent_gain": [2, 280, 292, 336, 344, 400, 414], "time_bandwidth": [2, 8, 292, 318], "improv": [2, 292, 314, 315, 336, 374, 383, 387, 414], "coherent_gain_loss": [2, 293, 414], "time": [2, 3, 6, 10, 40, 41, 67, 74, 75, 77, 78, 79, 80, 81, 88, 95, 108, 135, 138, 160, 163, 179, 191, 209, 211, 218, 228, 238, 240, 246, 252, 281, 282, 292, 293, 295, 297, 298, 300, 301, 305, 306, 309, 311, 312, 314, 315, 317, 318, 323, 325, 327, 332, 333, 334, 335, 340, 342, 343, 347, 350, 355, 359, 363, 366, 371, 373, 374, 375, 376, 377, 382, 383, 385, 386, 387, 389, 390, 394, 400, 403, 404, 405, 407, 411, 413, 414], "freq": [2, 3, 5, 62, 84, 88, 108, 114, 148, 163, 169, 179, 188, 191, 228, 230, 231, 254, 276, 293, 316, 317, 335, 341, 391, 403, 409], "loss": [2, 293, 316, 332, 333, 413, 414], "cgl": [2, 293, 332, 333, 413], "frequenc": [2, 5, 42, 43, 47, 51, 62, 67, 75, 77, 79, 84, 88, 108, 114, 115, 118, 138, 148, 163, 169, 179, 188, 191, 209, 226, 228, 230, 231, 254, 276, 293, 297, 298, 299, 300, 301, 306, 314, 315, 316, 317, 332, 333, 335, 341, 350, 351, 353, 355, 356, 357, 363, 383, 385, 386, 387, 389, 391, 394, 411, 413, 414], "offset": [2, 8, 42, 43, 50, 75, 77, 84, 138, 188, 193, 194, 202, 226, 227, 230, 231, 232, 235, 238, 239, 246, 247, 249, 252, 253, 276, 283, 293, 317, 332, 333, 335, 352, 366, 377, 379, 394, 409, 413, 414], "max_integration_tim": [2, 333, 414], "maximum": [2, 43, 46, 114, 169, 197, 198, 218, 288, 318, 324, 331, 332, 333, 346, 365, 371, 372, 376, 395, 409, 413, 414], "produc": [2, 62, 63, 109, 124, 132, 135, 137, 150, 157, 160, 162, 188, 254, 255, 256, 263, 276, 277, 287, 292, 318, 331, 332, 333, 347, 370, 393, 411], "most": [2, 332, 333, 339, 388], "provid": [2, 42, 44, 53, 106, 193, 195, 205, 226, 238, 246, 248, 250, 252, 288, 319, 332, 333, 336, 348, 349, 359, 397, 413], "max_frequency_offset": [2, 332, 414], "non_coherent_gain": [2, 280, 336, 344, 407, 414], "n_nc": [2, 96, 97, 98, 99, 100, 280, 321, 322, 334, 336, 337, 338, 344, 380, 384, 407, 414], "n_": [2, 97, 98, 99, 100, 280, 321, 322, 334, 336, 337, 338, 344, 380, 384, 407], "nc": [2, 97, 98, 99, 100, 280, 321, 322, 334, 336, 337, 338, 344, 380, 384, 407], "sampl": [2, 3, 12, 13, 14, 42, 43, 46, 48, 54, 62, 63, 67, 74, 82, 84, 88, 97, 98, 99, 100, 108, 109, 112, 114, 115, 116, 118, 121, 138, 141, 144, 148, 169, 171, 176, 188, 189, 193, 194, 198, 200, 206, 211, 215, 226, 227, 228, 230, 231, 232, 234, 237, 238, 239, 246, 247, 252, 253, 254, 255, 259, 266, 276, 277, 278, 280, 282, 292, 306, 308, 311, 317, 318, 321, 322, 324, 334, 335, 336, 337, 338, 344, 347, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 366, 371, 372, 373, 374, 376, 377, 381, 382, 384, 385, 386, 389, 394, 400, 403, 407, 408, 409, 411, 413, 414], "finit": [3, 19, 108, 124, 130, 150, 155, 413, 414], "impuls": [3, 9, 62, 84, 88, 108, 116, 148, 163, 171, 179, 188, 191, 228, 254, 276, 297, 298, 299, 300, 301, 302, 318, 350, 352, 371, 376, 411, 413, 414], "respons": [3, 9, 62, 84, 88, 108, 114, 116, 121, 148, 163, 169, 171, 176, 179, 188, 191, 228, 254, 276, 297, 298, 299, 300, 301, 302, 318, 349, 350, 351, 352, 353, 357, 364, 371, 376, 411, 413, 414], "design_lowpass_fir": [3, 114, 301, 414], "order": [3, 42, 43, 49, 62, 63, 64, 67, 84, 85, 88, 89, 101, 106, 108, 109, 117, 124, 125, 131, 132, 133, 134, 135, 136, 137, 138, 140, 143, 148, 150, 151, 156, 157, 158, 159, 160, 161, 162, 163, 172, 179, 188, 189, 191, 193, 194, 201, 209, 211, 226, 228, 238, 246, 247, 252, 253, 254, 255, 262, 264, 276, 277, 278, 282, 284, 287, 297, 298, 300, 301, 302, 307, 308, 310, 313, 318, 319, 323, 329, 331, 346, 349, 358, 371, 373, 374, 376, 377, 381, 390, 395, 405, 408, 409, 410, 414], "design": [3, 43, 62, 64, 66, 84, 85, 86, 148, 188, 189, 190, 194, 239, 247, 253, 276, 278, 279, 297, 298, 299, 300, 301, 302, 396, 413, 414], "lowpass": [3, 301], "us": [3, 9, 10, 17, 19, 22, 24, 29, 30, 32, 37, 38, 43, 62, 64, 66, 84, 85, 86, 87, 88, 89, 90, 108, 110, 113, 114, 119, 138, 140, 142, 148, 163, 164, 166, 169, 174, 179, 180, 188, 189, 190, 191, 192, 194, 197, 198, 209, 213, 218, 223, 224, 228, 229, 238, 239, 240, 243, 244, 246, 247, 252, 253, 254, 256, 260, 263, 267, 276, 278, 279, 280, 283, 286, 287, 288, 291, 297, 298, 299, 300, 301, 302, 313, 319, 323, 326, 329, 331, 332, 333, 334, 336, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 380, 388, 390, 396, 397, 398, 399, 404, 405, 407, 409, 410, 411, 413, 414, 415], "window": [3, 84, 88, 89, 114, 188, 276, 297, 298, 299, 300, 301, 302, 355, 363, 414], "method": [3, 9, 46, 66, 86, 180, 189, 190, 197, 198, 256, 260, 263, 278, 279, 288, 297, 298, 299, 300, 301, 302, 355, 363, 404, 405, 414], "design_highpass_fir": [3, 300, 414], "highpass": [3, 300], "design_bandpass_fir": [3, 297, 414], "bandpass": [3, 297], "design_bandstop_fir": [3, 298, 414], "bandstop": [3, 298], "infinit": [3, 163, 179, 413, 414], "polyphasefir": [3, 62, 84, 188, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 276, 414], "gener": [3, 28, 36, 58, 61, 95, 226, 238, 246, 252, 254, 282, 284, 285, 287, 289, 290, 305, 319, 320, 323, 328, 329, 331, 348, 360, 370, 390, 392, 393, 396, 400, 407, 410, 414], "interpol": [3, 42, 55, 62, 84, 138, 188, 189, 190, 193, 208, 226, 238, 246, 252, 254, 256, 260, 261, 263, 276, 278, 302, 389, 408, 410, 413, 414], "decim": [3, 42, 43, 46, 48, 52, 62, 84, 85, 86, 87, 188, 193, 194, 197, 198, 199, 200, 204, 207, 226, 227, 238, 239, 246, 247, 251, 252, 253, 254, 256, 258, 260, 263, 276, 278, 302, 306, 331, 410, 413, 414], "ration": [3, 276, 278, 302, 414], "channel": [3, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 90, 91, 92, 93, 94, 95, 226, 238, 248, 250, 254, 256, 263, 283, 285, 286, 288, 290, 291, 305, 345, 361, 378, 379, 413, 414], "design_multirate_fir": [3, 64, 85, 189, 278, 302, 414], "multir": [3, 62, 63, 84, 188, 276, 302, 369, 414], "kaiser": [3, 62, 64, 66, 84, 85, 86, 188, 189, 190, 276, 278, 279, 297, 298, 299, 300, 301, 302, 414], "polyphase_decompos": [3, 369, 414], "branch": [3, 62, 84, 188, 254, 256, 257, 265, 268, 276, 369, 397, 398], "tap": [3, 19, 62, 64, 84, 85, 88, 108, 123, 124, 125, 136, 137, 138, 147, 148, 150, 151, 161, 162, 163, 167, 168, 179, 188, 189, 191, 228, 254, 256, 262, 264, 265, 268, 276, 278, 287, 369, 404, 405], "decompos": [3, 62, 84, 188, 276, 369], "prototyp": [3, 62, 64, 84, 85, 188, 189, 254, 255, 256, 262, 265, 268, 276, 277, 278, 369, 414], "matrix": [3, 40, 90, 91, 95, 305, 369], "h_i": [3, 62, 84, 188, 254, 264, 265, 268, 276, 369, 404], "b": [3, 62, 84, 163, 166, 188, 254, 256, 257, 262, 264, 265, 268, 276, 280, 283, 314, 315, 318, 326, 350, 352, 364, 369, 396, 397, 405, 411], "phase": [3, 9, 42, 43, 47, 50, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 108, 118, 148, 188, 193, 194, 202, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 276, 280, 317, 327, 331, 335, 349, 356, 357, 358, 369, 380, 394, 400, 406, 407, 412, 413, 414], "movingaverag": [3, 191, 228, 229, 414], "move": [3, 191, 192, 228, 229, 413, 414], "averag": [3, 6, 101, 191, 192, 218, 223, 224, 226, 228, 229, 238, 240, 243, 244, 252, 281, 282, 283, 313, 340, 355, 373, 406, 413, 414], "differenti": [3, 8, 88, 89, 226, 248, 250, 288, 303, 304, 347, 366, 413, 414], "integr": [3, 6, 67, 72, 97, 98, 99, 100, 179, 180, 191, 192, 209, 211, 214, 228, 280, 288, 292, 293, 314, 315, 321, 322, 332, 333, 334, 336, 337, 338, 344, 374, 383, 384, 387, 395, 399, 401, 405, 413, 414], "leakyintegr": [3, 191, 192, 228, 414], "leaki": [3, 191, 192, 228, 413, 414], "farrowresampl": [3, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 403, 414], "piecewis": [3, 138, 140, 143], "polynomi": [3, 20, 127, 128, 129, 132, 138, 140, 143, 152, 153, 154, 157, 287, 319, 328, 329, 331, 370, 393, 414], "farrow": [3, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 402, 413, 414], "fractionaldelai": [3, 148, 149, 414], "fraction": [3, 62, 84, 138, 144, 148, 149, 188, 254, 266, 276, 299, 318, 403, 413, 414], "delai": [3, 9, 62, 63, 84, 88, 108, 109, 112, 115, 118, 138, 141, 148, 149, 188, 209, 228, 230, 254, 255, 259, 276, 277, 299, 303, 304, 324, 351, 356, 372, 409, 413, 414], "design_frac_delay_fir": [3, 299, 414], "length": [3, 9, 43, 46, 48, 62, 63, 64, 84, 85, 88, 89, 99, 108, 109, 111, 116, 121, 123, 148, 149, 165, 181, 184, 185, 188, 189, 192, 194, 198, 200, 227, 228, 229, 239, 247, 253, 254, 255, 276, 277, 278, 284, 289, 292, 293, 297, 298, 299, 300, 301, 302, 317, 318, 319, 320, 323, 324, 329, 331, 336, 347, 350, 352, 355, 359, 363, 364, 371, 372, 376, 385, 390, 392, 397, 403, 408, 411, 414], "mix": [3, 62, 335, 408, 413, 414], "domain": [3, 6, 281, 282, 295, 297, 298, 300, 301, 306, 309, 312, 317, 325, 327, 335, 340, 342, 343, 347, 350, 355, 359, 363, 366, 373, 374, 375, 377, 385, 386, 389, 394, 400, 407, 413, 414], "complex": [3, 6, 9, 42, 43, 46, 48, 62, 67, 84, 88, 96, 97, 98, 99, 100, 108, 114, 148, 163, 169, 179, 188, 191, 193, 194, 197, 198, 199, 200, 207, 218, 221, 226, 227, 228, 230, 231, 237, 238, 239, 240, 241, 246, 247, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 282, 283, 306, 313, 321, 322, 327, 334, 335, 336, 337, 338, 346, 347, 349, 351, 353, 355, 356, 357, 363, 365, 366, 384, 385, 386, 389, 394, 400, 403, 404, 405, 407, 409, 410, 413, 414], "exponenti": [3, 62, 231, 306, 335, 385, 386, 389, 403, 404, 405, 414], "real": [3, 97, 98, 100, 269, 270, 272, 273, 275, 282, 288, 321, 322, 334, 335, 336, 337, 338, 347, 351, 353, 355, 356, 357, 359, 363, 366, 374, 384, 385, 386, 400, 404, 405, 407, 408, 409, 413, 414], "sinusoid": [3, 246, 282, 335, 385, 386, 405, 414], "to_complex_baseband": [3, 385, 414], "x_r": [3, 385, 386], "complex128": [3, 9, 10, 11, 42, 48, 62, 84, 88, 108, 114, 148, 163, 169, 179, 188, 191, 193, 197, 198, 199, 200, 207, 226, 228, 230, 231, 237, 238, 240, 241, 246, 251, 252, 254, 276, 346, 365, 385, 386, 392, 393], "passband": [3, 148, 297, 298, 299, 300, 301, 318, 324, 371, 372, 376, 385, 386, 408, 414], "baseband": [3, 9, 67, 226, 238, 246, 252, 335, 349, 358, 385, 386, 408, 409, 414], "to_real_passband": [3, 386, 414], "x_c": [3, 385, 386], "upsampl": [3, 188, 276, 389, 414], "rate": [3, 6, 9, 10, 12, 13, 14, 42, 43, 44, 47, 53, 62, 63, 64, 67, 74, 82, 84, 85, 101, 102, 103, 105, 106, 114, 115, 118, 138, 139, 141, 142, 169, 188, 189, 193, 195, 205, 226, 238, 246, 248, 250, 252, 254, 255, 258, 261, 266, 276, 277, 278, 292, 302, 306, 307, 308, 310, 317, 335, 336, 345, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 361, 362, 363, 366, 373, 374, 377, 378, 381, 385, 386, 389, 394, 400, 407, 413, 414], "factor": [3, 6, 67, 74, 83, 191, 192, 194, 209, 211, 212, 239, 247, 253, 294, 295, 306, 314, 315, 383, 387, 389, 409], "r": [3, 10, 40, 41, 62, 84, 138, 139, 141, 142, 188, 254, 255, 266, 276, 277, 288, 294, 306, 307, 308, 310, 313, 314, 315, 318, 335, 371, 376, 381, 383, 385, 386, 387, 389, 396, 397, 398, 399, 405, 408, 409, 411], "insert": [3, 188, 276, 389], "zero": [3, 9, 62, 84, 88, 108, 113, 138, 142, 144, 148, 149, 163, 164, 169, 178, 179, 188, 189, 191, 209, 228, 231, 254, 276, 278, 293, 299, 323, 324, 331, 339, 347, 350, 351, 352, 353, 356, 357, 364, 368, 372, 385, 389, 390, 404, 408, 409, 411, 413, 414], "between": [3, 6, 9, 12, 18, 64, 84, 85, 89, 90, 110, 122, 140, 146, 164, 166, 177, 180, 188, 189, 192, 229, 240, 256, 276, 278, 280, 288, 293, 312, 316, 325, 347, 355, 359, 363, 389, 409, 413], "each": [3, 62, 63, 64, 84, 85, 109, 188, 189, 254, 255, 256, 260, 263, 264, 276, 277, 278, 302, 313, 326, 331, 337, 355, 359, 363, 380, 389, 414], "downsampl": [3, 62, 84, 276, 306, 414], "discard": [3, 62, 84, 276, 306], "everi": [3, 62, 84, 101, 276, 306, 403], "composite_snr": [4, 294, 414], "snr1": [4, 294, 314, 383, 400, 407], "snr2": [4, 294, 314, 383, 400, 407], "calcul": [4, 5, 24, 29, 32, 37, 283, 286, 288, 291, 294, 313, 314, 315, 316, 332, 333, 341, 373, 374, 378, 379, 383, 387, 391, 400, 407, 414], "product": [4, 292, 294, 314, 315, 318, 383, 387, 411, 414], "two": [4, 6, 9, 10, 191, 228, 238, 246, 252, 293, 294, 297, 298, 312, 319, 325, 328, 331, 347, 350, 351, 353, 355, 356, 357, 363, 370, 392, 393, 400, 403, 404, 405, 407, 414], "toa_crlb": [4, 373, 387, 414], "cram\u00e9r": [4, 314, 315, 383, 387, 413, 414], "rao": [4, 314, 315, 383, 387, 413, 414], "lower": [4, 148, 226, 238, 252, 314, 315, 371, 376, 383, 387, 400, 407, 413, 414], "bound": [4, 288, 314, 315, 383, 387, 413, 414], "crlb": [4, 294, 314, 315, 383, 387, 414], "arriv": [4, 314, 315, 383, 387], "toa": [4, 387, 413, 414], "tdoa_crlb": [4, 373, 383, 414], "differ": [4, 43, 137, 162, 163, 191, 227, 239, 247, 251, 253, 280, 294, 297, 298, 299, 300, 301, 314, 323, 331, 336, 347, 352, 366, 383, 390, 392, 411], "tdoa": [4, 383, 413, 414], "foa_crlb": [4, 315, 374, 414], "foa": [4, 315, 413, 414], "fdoa_crlb": [4, 314, 374, 414], "fdoa": [4, 314, 413, 414], "bsc_capac": [5, 288, 291, 414], "p": [5, 7, 24, 28, 29, 31, 32, 36, 37, 39, 62, 84, 90, 91, 95, 124, 150, 188, 189, 230, 231, 254, 261, 266, 269, 270, 276, 278, 285, 286, 287, 288, 290, 291, 302, 305, 337, 338, 394], "binari": [5, 7, 24, 27, 28, 32, 35, 36, 43, 90, 227, 239, 247, 251, 253, 284, 285, 286, 288, 289, 290, 291, 305, 319, 323, 329, 339, 365, 378, 388, 390, 393, 394, 410, 413, 414], "symmetr": [5, 32, 36, 90, 290, 291, 305, 385, 386, 394, 413], "bsc": [5, 32, 33, 34, 36, 37, 39, 90, 288, 290, 291, 305, 394, 413, 414], "bec_capac": [5, 286, 414], "erasur": [5, 24, 26, 27, 28, 31, 90, 285, 286, 305, 394, 413], "bec": [5, 24, 25, 26, 28, 29, 31, 90, 285, 286, 305, 394, 413, 414], "awgn_capac": [5, 283, 378, 379, 414], "white": [5, 282, 283, 288, 394, 400, 407, 413, 414], "gaussian": [5, 8, 88, 179, 191, 228, 282, 283, 288, 318, 394, 400, 407, 413, 414], "awgn": [5, 226, 238, 246, 248, 250, 252, 282, 283, 288, 313, 345, 346, 361, 362, 378, 379, 385, 386, 394, 410, 413, 414], "biawgn_capac": [5, 288, 414], "bi": [5, 288, 413, 414], "shannon_limit_ebn0": [5, 9, 362, 378, 414], "rho": [5, 9, 362, 378, 379], "shannon": [5, 9, 362, 378, 379, 413, 414], "limit": [5, 9, 283, 346, 362, 365, 378, 379, 410, 413, 414], "bit": [5, 6, 7, 9, 24, 29, 30, 32, 37, 38, 42, 43, 44, 45, 56, 59, 60, 90, 101, 103, 106, 193, 195, 196, 226, 227, 238, 239, 246, 247, 248, 251, 252, 253, 283, 285, 286, 288, 290, 291, 307, 308, 310, 326, 339, 345, 362, 378, 379, 381, 388, 413, 414], "power": [5, 9, 226, 238, 246, 252, 281, 282, 283, 288, 296, 313, 314, 315, 318, 321, 322, 324, 330, 340, 341, 342, 355, 371, 372, 373, 376, 378, 379, 383, 387, 400, 406, 407, 411, 413], "spectral": [5, 226, 288, 306, 355, 362, 373, 378, 379, 383, 387, 408, 411], "densiti": [5, 9, 80, 288, 321, 322, 337, 338, 348, 349, 355, 373, 378, 383, 384, 387, 400, 407, 408, 411, 413], "shannon_limit_snr": [5, 283, 379, 414], "free_space_path_loss": [5, 316, 414], "distanc": [5, 312, 316, 325, 413, 414], "free": [5, 226, 238, 246, 252, 316, 413], "space": [5, 62, 114, 169, 293, 316, 413], "fspl": [5, 316, 414], "wavelength": [5, 391, 414], "lambda": [5, 316, 391, 400, 407], "electromagnet": [5, 391], "wave": [5, 138, 226, 391], "f": [5, 20, 43, 47, 62, 75, 77, 84, 88, 99, 114, 115, 118, 124, 127, 128, 129, 148, 150, 152, 153, 154, 169, 179, 188, 230, 231, 276, 282, 293, 314, 315, 316, 318, 328, 332, 333, 335, 336, 337, 341, 370, 371, 373, 376, 380, 383, 387, 391, 392, 397, 400, 403, 404, 405, 407, 408, 409, 410, 411], "parabolic_antenna": [5, 341, 414], "tupl": [5, 62, 84, 88, 89, 96, 99, 101, 103, 106, 108, 114, 115, 118, 148, 163, 169, 179, 188, 191, 193, 197, 198, 218, 223, 224, 226, 228, 238, 240, 243, 244, 246, 252, 254, 271, 274, 276, 281, 309, 312, 325, 329, 340, 341, 342, 346, 350, 351, 352, 353, 356, 357, 364, 365, 368, 370, 393], "g": [5, 106, 328, 341, 370, 398], "beamwidth": [5, 341], "theta": [5, 230, 232, 235, 341], "parabol": [5, 341, 374], "reflector": [5, 341], "peak_pow": [6, 340, 342, 414], "peak": [6, 226, 238, 252, 295, 313, 314, 315, 340, 342, 343, 383, 387, 406], "average_pow": [6, 281, 340, 414], "papr": [6, 226, 238, 252, 340, 408, 414], "peak_voltag": [6, 295, 343, 414], "bool": [6, 10, 12, 18, 62, 64, 84, 85, 88, 89, 97, 98, 99, 100, 108, 110, 114, 122, 138, 140, 146, 148, 163, 164, 166, 169, 177, 179, 180, 188, 189, 191, 192, 226, 228, 229, 238, 246, 248, 250, 252, 254, 256, 272, 273, 274, 275, 276, 278, 281, 309, 319, 321, 322, 328, 334, 335, 336, 337, 338, 342, 343, 346, 348, 349, 357, 359, 365, 366, 375, 384, 393], "rms_voltag": [6, 295, 375, 414], "root": [6, 8, 194, 239, 247, 253, 313, 314, 315, 349, 366, 373, 374, 375, 376, 383, 387, 392, 393, 404, 413], "mean": [6, 313, 314, 315, 355, 363, 373, 374, 375, 383, 387, 400, 407, 411], "squar": [6, 8, 194, 239, 247, 253, 280, 313, 314, 315, 316, 321, 322, 334, 336, 337, 338, 341, 344, 349, 366, 373, 374, 375, 376, 380, 383, 384, 387, 404, 414], "rm": [6, 218, 219, 220, 222, 295, 313, 314, 315, 373, 374, 375, 383, 387, 413, 414], "crest_factor": [6, 295, 340, 414], "crest": [6, 295], "euclidean": [6, 312, 413, 414], "y": [6, 8, 9, 10, 11, 19, 21, 23, 24, 26, 27, 32, 34, 35, 40, 57, 62, 84, 88, 90, 93, 94, 95, 108, 109, 113, 124, 126, 138, 139, 142, 150, 163, 165, 179, 181, 184, 185, 188, 191, 209, 210, 230, 231, 237, 254, 255, 256, 263, 276, 277, 282, 285, 287, 288, 290, 292, 303, 304, 305, 306, 312, 317, 325, 327, 331, 335, 346, 347, 353, 355, 363, 365, 377, 389, 393, 409, 410], "ham": [6, 114, 297, 298, 300, 301, 325, 413, 414], "int_": [6, 7, 8, 19, 21, 23, 24, 25, 26, 32, 33, 34, 40, 42, 46, 90, 92, 93, 124, 126, 181, 182, 186, 187, 193, 197, 198, 226, 238, 246, 252, 285, 288, 289, 290, 303, 304, 305, 314, 315, 320, 325, 339, 373, 374, 383, 387, 388, 393, 394], "errorr": [6, 101, 102, 103, 104, 105, 106, 107, 410, 414], "A": [6, 10, 40, 43, 56, 63, 67, 75, 77, 78, 79, 80, 81, 83, 88, 101, 108, 109, 114, 124, 125, 138, 150, 151, 169, 179, 191, 194, 209, 218, 228, 239, 240, 247, 253, 255, 277, 280, 287, 288, 289, 297, 298, 300, 301, 320, 321, 322, 326, 327, 328, 334, 336, 337, 338, 341, 346, 349, 359, 370, 371, 376, 380, 384, 394, 395, 397, 400, 407, 409, 413], "error": [6, 9, 12, 13, 14, 32, 42, 44, 53, 67, 73, 74, 80, 101, 102, 103, 105, 106, 107, 193, 195, 205, 209, 211, 218, 221, 223, 224, 225, 226, 238, 240, 241, 243, 244, 245, 246, 248, 250, 252, 280, 291, 313, 314, 315, 344, 345, 361, 362, 380, 383, 387, 397, 409, 413, 414], "ber": [6, 9, 42, 44, 101, 193, 195, 226, 238, 246, 248, 252, 345, 362, 410, 413, 414], "symbol": [6, 9, 42, 43, 45, 46, 47, 48, 53, 54, 101, 103, 106, 124, 126, 135, 150, 160, 188, 193, 194, 196, 197, 198, 199, 200, 205, 206, 207, 218, 221, 226, 227, 238, 239, 240, 241, 246, 247, 248, 250, 251, 252, 253, 282, 287, 288, 307, 308, 310, 311, 313, 318, 324, 346, 349, 358, 361, 365, 366, 371, 372, 373, 374, 376, 381, 382, 408, 409, 411, 413, 414], "ser": [6, 9, 42, 53, 101, 193, 205, 226, 238, 246, 250, 252, 361, 410, 413, 414], "evm": [6, 313, 413, 414], "x_hat": [6, 9, 101, 103, 313, 346, 410], "ref": [6, 218, 220, 222, 280, 297, 298, 299, 300, 301, 302, 313, 318, 323, 380, 390], "vector": [6, 19, 20, 101, 114, 124, 125, 127, 131, 133, 134, 144, 150, 151, 152, 156, 158, 159, 169, 297, 298, 300, 301, 313, 355, 363, 413, 414], "magnitud": [6, 9, 10, 12, 16, 88, 148, 179, 191, 228, 299, 313, 331, 347, 350, 353, 392, 413, 414], "hat": [6, 9, 42, 46, 103, 193, 197, 198, 218, 221, 226, 238, 240, 241, 246, 252, 313, 346, 365], "k": [6, 8, 9, 19, 42, 43, 45, 46, 48, 49, 62, 88, 103, 124, 150, 179, 193, 194, 196, 197, 198, 199, 200, 201, 218, 221, 226, 238, 240, 241, 246, 247, 252, 253, 280, 283, 303, 304, 307, 308, 310, 313, 336, 344, 346, 365, 366, 378, 379, 381, 400, 407, 408, 411], "rms_bandwidth": [6, 373, 383, 387, 414], "sample_r": [6, 67, 74, 82, 84, 114, 115, 118, 138, 169, 188, 276, 306, 317, 335, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 363, 366, 373, 374, 377, 385, 386, 389, 403, 409, 411], "bandwidth": [6, 62, 67, 68, 69, 74, 78, 89, 209, 211, 215, 283, 292, 293, 297, 298, 314, 315, 318, 371, 373, 376, 379, 383, 387, 409, 411, 413, 414], "b_": [6, 314, 315, 373, 383, 387], "text": [6, 24, 32, 64, 85, 90, 96, 189, 252, 271, 278, 280, 281, 282, 283, 286, 288, 291, 292, 293, 295, 296, 302, 313, 314, 315, 316, 317, 319, 328, 330, 336, 340, 342, 343, 370, 373, 374, 375, 377, 378, 379, 383, 387], "rms_integration_tim": [6, 314, 315, 374, 414], "t_": [6, 75, 77, 81, 124, 139, 150, 314, 315, 318, 371, 374, 376, 411], "q": [7, 62, 84, 85, 188, 226, 238, 254, 258, 266, 269, 270, 271, 272, 273, 275, 276, 278, 288, 302, 331, 392, 414], "ccdf": [7, 269, 270], "standard": [7, 269, 270, 314, 315, 383, 387, 400, 407, 413, 414], "normal": [7, 43, 67, 69, 74, 209, 211, 215, 269, 270, 297, 298, 300, 301, 313, 318, 321, 322, 324, 350, 351, 353, 355, 356, 357, 363, 371, 372, 373, 374, 376, 400, 407, 409, 411], "qinv": [7, 269, 270, 414], "invers": [7, 62, 270, 314, 315, 332, 333, 383, 387], "pack": [7, 101, 103, 226, 238, 246, 252, 326, 339, 413, 414], "bpe": [7, 339, 388], "arrai": [7, 19, 24, 32, 40, 43, 63, 90, 101, 114, 135, 160, 169, 181, 189, 194, 226, 227, 230, 238, 239, 246, 247, 251, 252, 253, 262, 264, 265, 268, 278, 281, 284, 285, 289, 290, 293, 303, 304, 305, 309, 312, 319, 320, 323, 325, 329, 331, 332, 333, 339, 340, 342, 366, 369, 378, 380, 388, 390, 405, 409], "multipl": [7, 114, 169, 184, 185, 339, 388, 410, 414], "per": [7, 42, 43, 45, 46, 47, 48, 54, 63, 109, 193, 194, 196, 198, 200, 206, 226, 227, 231, 238, 239, 246, 247, 252, 253, 255, 277, 282, 283, 288, 307, 308, 310, 311, 317, 318, 324, 326, 339, 346, 349, 358, 371, 372, 376, 381, 382, 388, 397, 408, 411, 414], "element": [7, 41, 182, 326, 339, 388, 409], "unpack": [7, 101, 103, 326, 388, 410, 413, 414], "hexdump": [7, 101, 326, 413, 414], "byte": [7, 326], "width": [7, 148, 299, 326], "16": [7, 124, 138, 148, 150, 181, 226, 238, 246, 248, 250, 251, 252, 280, 299, 307, 308, 310, 321, 322, 323, 326, 334, 337, 345, 361, 369, 371, 374, 376, 381, 382, 390, 408], "str": [7, 89, 326, 349, 355, 358, 359, 363], "return": [7, 8, 11, 21, 23, 27, 29, 35, 37, 44, 46, 48, 53, 57, 59, 62, 63, 67, 75, 77, 80, 81, 84, 88, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 118, 121, 125, 126, 135, 137, 139, 142, 148, 151, 160, 162, 163, 165, 169, 171, 176, 179, 184, 185, 188, 191, 195, 197, 198, 199, 200, 205, 210, 221, 223, 224, 228, 231, 237, 241, 243, 244, 248, 250, 254, 255, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 400, 404, 405, 407, 408, 410, 414], "specifi": [7, 20, 101, 104, 105, 107, 124, 127, 133, 150, 152, 158, 218, 223, 224, 240, 243, 244, 282, 283, 305, 326, 336, 396, 404, 405, 414], "linearmodul": [8, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 223, 224, 243, 244, 246, 365, 414], "amplitud": [8, 62, 193, 194, 218, 219, 220, 222, 288, 327, 394, 400, 407, 409], "map": [8, 9, 40, 181, 182, 186, 187, 193, 194, 199, 207, 226, 230, 238, 246, 251, 252, 313, 365, 413, 414], "psk": [8, 218, 238, 240, 246, 247, 248, 249, 250, 251, 252, 253, 282, 313, 327, 345, 346, 349, 361, 362, 365, 366, 373, 374, 377, 408, 409, 413, 414], "shift": [8, 124, 125, 136, 150, 151, 161, 226, 238, 246, 248, 249, 250, 251, 252, 287, 319, 331, 392, 393, 404, 405, 406, 413, 414], "kei": [8, 226, 238, 246, 248, 249, 250, 251, 252, 406, 413, 414], "demodul": [8, 42, 46, 193, 198, 226, 238, 246, 252, 414], "pimpsk": [8, 252, 253, 414], "pi": [8, 10, 40, 43, 47, 62, 84, 88, 138, 169, 179, 181, 182, 186, 187, 188, 218, 230, 238, 240, 246, 252, 253, 276, 282, 288, 293, 306, 314, 315, 316, 317, 318, 327, 335, 341, 350, 351, 352, 353, 356, 357, 364, 368, 371, 376, 383, 385, 386, 387, 389, 392, 403, 404, 405, 409, 413, 414], "m": [8, 42, 43, 45, 46, 48, 49, 62, 84, 95, 124, 150, 163, 166, 168, 179, 188, 191, 193, 194, 196, 197, 198, 199, 200, 201, 207, 218, 226, 238, 240, 246, 247, 251, 252, 253, 254, 262, 264, 276, 287, 289, 292, 293, 305, 307, 308, 310, 314, 315, 316, 319, 320, 323, 328, 329, 331, 332, 333, 347, 365, 370, 381, 390, 393, 396, 397, 398, 399, 400, 407, 413, 414], "oqpsk": [8, 226, 238, 239, 414], "quadratur": [8, 238, 327, 349], "cpm": [8, 9, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 358, 413, 414], "msk": [8, 226, 227, 358, 413, 414], "rectangular": [8, 43, 180, 194, 239, 247, 253, 314, 315, 372, 373, 374, 383, 387, 408, 411, 413, 414], "span": [8, 9, 43, 194, 239, 247, 253, 318, 324, 349, 358, 371, 372, 376, 408, 411, 414], "half_sin": [8, 227, 324, 414], "half": [8, 226, 238, 324, 341, 413, 414], "sine": [8, 138, 226, 231, 324, 413, 414], "raised_cosin": [8, 194, 239, 247, 253, 371, 411, 414], "alpha": [8, 10, 12, 13, 62, 191, 192, 194, 239, 247, 253, 318, 367, 371, 376, 408, 411], "rais": [8, 88, 179, 194, 239, 247, 253, 349, 366, 371, 373, 374, 376, 404, 413], "cosin": [8, 88, 179, 194, 231, 239, 247, 253, 349, 366, 371, 373, 374, 376, 404, 413, 414], "rc": [8, 194, 238, 239, 246, 247, 252, 253, 349, 371], "root_raised_cosin": [8, 88, 179, 194, 239, 247, 253, 350, 351, 352, 353, 356, 357, 364, 368, 376, 404, 408, 410, 411, 414], "srrc": [8, 194, 238, 239, 246, 247, 252, 253, 349, 366, 373, 374, 376, 408, 410], "diff_encod": [8, 226, 238, 246, 248, 250, 252, 303, 304, 414], "y_prev": [8, 303, 304], "data": [8, 218, 223, 240, 243, 303, 304, 326, 339, 366, 388, 413], "diff_decod": [8, 303, 304, 414], "decod": [8, 287, 303], "use_styl": [9, 367, 400, 403, 404, 405, 407, 408, 409, 410, 411], "appli": [9, 46, 62, 84, 89, 188, 194, 226, 238, 246, 252, 276, 317, 327, 346, 349, 352, 355, 363, 365, 366, 367, 374, 377, 394, 413], "default": [9, 20, 43, 116, 121, 125, 127, 133, 135, 151, 152, 158, 160, 227, 239, 247, 251, 253, 281, 284, 287, 309, 312, 319, 323, 325, 329, 331, 340, 342, 346, 351, 353, 355, 356, 357, 359, 363, 365, 367, 390, 410, 414], "matplotlib": [9, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413], "rcparam": [9, 367], "time_domain": [9, 10, 84, 88, 138, 179, 188, 191, 226, 228, 230, 238, 246, 252, 276, 282, 306, 317, 319, 323, 329, 335, 366, 374, 385, 386, 389, 390, 400, 403, 407, 408, 409, 410, 411, 414], "ani": [9, 24, 27, 32, 35, 62, 84, 88, 90, 94, 108, 114, 148, 163, 169, 179, 188, 191, 228, 230, 231, 254, 276, 284, 296, 306, 319, 323, 329, 330, 331, 336, 366, 389, 390, 393, 399], "dtype": [9, 24, 27, 32, 35, 62, 84, 88, 90, 94, 108, 114, 148, 163, 169, 179, 188, 191, 226, 228, 230, 231, 238, 246, 252, 254, 276, 284, 319, 323, 329, 331, 339, 366, 388, 390, 393, 409], "_scalartype_co": [9, 366], "t": [9, 19, 67, 69, 74, 96, 124, 125, 136, 150, 151, 161, 209, 211, 215, 271, 287, 293, 314, 315, 317, 318, 319, 321, 322, 326, 328, 332, 334, 336, 337, 338, 366, 370, 371, 374, 376, 383, 384, 387, 396, 403, 414], "raster": [9, 349, 358, 359, 413, 414], "none": [9, 19, 20, 24, 28, 32, 36, 42, 44, 56, 58, 61, 62, 84, 88, 89, 90, 95, 99, 108, 114, 116, 121, 124, 125, 127, 133, 138, 144, 148, 150, 151, 152, 158, 169, 188, 194, 209, 217, 228, 231, 239, 247, 253, 254, 274, 276, 280, 281, 282, 283, 285, 290, 297, 298, 300, 301, 305, 309, 312, 314, 315, 319, 321, 322, 325, 329, 331, 334, 337, 338, 339, 340, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 380, 383, 384, 387, 388, 394, 400, 403, 407, 408, 410], "periodogram": [9, 62, 306, 355, 373, 385, 386, 389, 408, 413, 414], "xx": [9, 19, 355], "welch": [9, 355, 363], "spectrogram": [9, 363, 413, 414], "constel": [9, 226, 238, 246, 249, 252, 282, 313, 327, 346, 377, 392, 413, 414], "symbol_map": [9, 193, 194, 207, 226, 238, 246, 249, 251, 252, 313, 365, 410, 414], "ey": [9, 226, 238, 246, 252, 349, 413, 414], "2": [9, 10, 19, 20, 24, 32, 40, 42, 43, 49, 62, 63, 67, 75, 77, 80, 84, 88, 90, 96, 97, 98, 99, 100, 101, 108, 112, 114, 115, 118, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 169, 179, 181, 188, 191, 192, 193, 194, 201, 218, 226, 228, 230, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 262, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 396, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411], "diagram": [9, 10, 19, 62, 67, 84, 108, 188, 191, 209, 226, 230, 238, 246, 252, 276, 303, 304, 349, 413, 414], "phase_tre": [9, 226, 358, 414], "tree": [9, 358, 413, 414], "continu": [9, 42, 43, 179, 226, 358, 374, 403, 413, 414], "function": [9, 67, 76, 88, 108, 148, 163, 164, 191, 209, 230, 269, 270, 280, 283, 287, 288, 292, 293, 294, 306, 318, 321, 322, 323, 332, 333, 336, 337, 338, 344, 345, 346, 348, 349, 354, 355, 359, 360, 361, 363, 371, 376, 378, 379, 380, 384, 389, 390, 404, 405, 409, 411, 413, 414], "psd": [9, 44, 53, 195, 205, 248, 250, 307, 308, 310, 311, 345, 361, 362, 373, 378, 381, 382, 383, 387], "receiv": [9, 10, 42, 46, 52, 96, 97, 99, 101, 103, 193, 197, 198, 204, 218, 219, 221, 222, 226, 238, 240, 241, 246, 248, 250, 252, 271, 272, 273, 274, 275, 313, 316, 337, 349, 354, 360, 413, 414], "enr": [9, 271, 272, 274, 354], "roc": [9, 96, 99, 271, 274, 337, 360, 413, 414], "oper": [9, 12, 96, 99, 271, 274, 319, 337, 360, 409, 413, 414], "characterist": [9, 20, 96, 99, 124, 127, 128, 129, 150, 152, 153, 154, 271, 274, 287, 331, 337, 360, 413, 414], "curv": [9, 96, 99, 248, 250, 271, 274, 280, 294, 344, 345, 360, 361, 362, 414], "detector_pdf": [9, 321, 322, 337, 338, 348, 384], "pdf": [9, 288, 337, 338, 348, 380, 384, 400, 407, 413], "detector": [9, 32, 67, 73, 74, 96, 211, 218, 225, 240, 245, 271, 280, 321, 322, 334, 336, 337, 338, 344, 348, 384, 409, 413, 414], "impulse_respons": [9, 62, 84, 88, 108, 116, 148, 163, 171, 179, 188, 191, 228, 254, 276, 297, 298, 299, 300, 301, 302, 318, 324, 352, 371, 372, 376, 404, 405, 411, 414], "step_respons": [9, 62, 84, 88, 108, 121, 148, 163, 176, 179, 188, 191, 228, 254, 276, 364, 404, 405, 409, 414], "step": [9, 62, 84, 88, 108, 121, 124, 131, 133, 134, 135, 137, 148, 150, 156, 158, 159, 160, 162, 163, 176, 179, 188, 191, 228, 230, 231, 237, 254, 276, 287, 321, 322, 364, 400, 407, 413], "zeros_pol": [9, 368, 405, 414], "pole": [9, 163, 164, 169, 173, 179, 191, 350, 351, 352, 353, 356, 357, 364, 368, 404, 413], "magnitude_respons": [9, 88, 114, 148, 169, 179, 191, 228, 297, 298, 299, 300, 301, 302, 318, 324, 353, 371, 372, 376, 404, 405, 409, 411, 414], "omega": [9, 62, 84, 88, 108, 114, 115, 118, 138, 148, 163, 169, 179, 188, 191, 228, 230, 232, 234, 254, 276, 350, 351, 353, 356, 357, 409], "phase_respons": [9, 114, 169, 357, 414], "angl": [9, 240, 317, 357, 409], "phase_delai": [9, 62, 84, 88, 108, 118, 148, 188, 228, 254, 276, 356, 414], "tau_": [9, 62, 84, 88, 108, 118, 148, 188, 228, 254, 276, 356], "phi": [9, 42, 43, 50, 62, 84, 88, 108, 118, 148, 188, 193, 194, 202, 226, 227, 228, 238, 239, 246, 247, 249, 252, 253, 254, 276, 317, 327, 335, 356], "group_delai": [9, 62, 84, 88, 108, 115, 148, 188, 228, 254, 276, 299, 351, 404, 405, 414], "group": [9, 62, 84, 88, 108, 115, 148, 188, 228, 254, 276, 299, 351, 413], "tau_g": [9, 62, 84, 88, 108, 115, 148, 188, 228, 254, 276, 351], "iir": [9, 67, 76, 116, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 191, 192, 209, 213, 228, 350, 351, 352, 353, 356, 357, 364, 368, 402, 404, 409, 413, 414], "agc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 218, 395, 413, 414], "automat": [10, 11, 12, 218, 348, 395, 413, 414], "control": [10, 11, 12, 67, 218, 230, 232, 371, 376, 409, 413, 414], "note": [10, 19, 24, 32, 40, 62, 84, 88, 90, 96, 97, 98, 100, 108, 124, 128, 129, 148, 150, 153, 154, 163, 179, 188, 191, 209, 218, 228, 230, 240, 254, 260, 263, 265, 268, 271, 272, 273, 275, 276, 280, 282, 283, 284, 286, 287, 291, 292, 293, 299, 303, 304, 318, 319, 327, 328, 332, 333, 336, 337, 338, 341, 344, 349, 369, 370, 371, 376, 378, 379, 380, 392], "exp": [10, 62, 169, 230, 231, 238, 246, 252, 288, 306, 317, 318, 327, 335, 350, 351, 352, 353, 356, 357, 364, 368, 386, 389, 392, 403, 405, 409], "z": [10, 67, 108, 163, 179, 191, 209, 230, 287, 303, 304, 392, 404, 405, 409], "log": [10, 288, 350, 351, 353, 355, 356, 357, 359, 404, 405, 409], "beta": [10, 12, 14], "output": [10, 11, 12, 16, 19, 21, 23, 24, 26, 27, 32, 34, 35, 40, 41, 57, 62, 63, 84, 90, 93, 94, 95, 109, 116, 121, 124, 126, 135, 137, 138, 141, 150, 160, 162, 164, 166, 171, 176, 180, 182, 186, 187, 188, 189, 191, 192, 198, 209, 210, 228, 230, 231, 237, 254, 255, 256, 259, 263, 266, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 304, 305, 313, 314, 315, 319, 323, 329, 330, 331, 336, 337, 338, 339, 344, 347, 352, 364, 383, 387, 388, 390, 393, 396, 403, 404, 405, 407, 409, 414], "attack": [10, 12, 13], "decai": [10, 12, 14, 403, 405], "refer": [10, 12, 16, 19, 24, 32, 62, 67, 75, 77, 78, 79, 80, 81, 84, 88, 90, 96, 97, 98, 100, 101, 124, 138, 150, 188, 209, 218, 220, 221, 222, 240, 241, 248, 250, 271, 272, 273, 275, 276, 280, 282, 287, 288, 293, 294, 295, 297, 298, 299, 300, 301, 302, 313, 317, 318, 319, 323, 328, 329, 331, 336, 340, 344, 369, 370, 371, 376, 377, 380, 390, 392, 405, 407, 411, 413], "adder": [10, 19, 84, 124, 150, 209, 230, 303, 304, 409], "multipli": [10, 67, 88, 188, 276], "michael": [10, 67, 75, 77, 78, 79, 80, 81, 88, 138, 209, 218, 240, 371, 376], "rice": [10, 67, 75, 77, 78, 79, 80, 81, 88, 138, 209, 218, 240, 371, 376], "digit": [10, 24, 32, 67, 75, 77, 78, 79, 80, 81, 88, 90, 138, 209, 218, 240, 248, 250, 319, 328, 370, 371, 376, 409, 413, 414], "commun": [10, 24, 32, 62, 67, 75, 77, 78, 79, 80, 81, 84, 88, 90, 138, 188, 209, 218, 240, 248, 250, 276, 302, 319, 328, 369, 370, 371, 376, 409, 413], "discret": [10, 62, 67, 75, 77, 78, 79, 80, 81, 88, 90, 95, 138, 179, 191, 209, 218, 228, 240, 282, 305, 311, 371, 374, 376, 382, 394, 403, 409, 413, 414], "approach": [10, 24, 32, 67, 75, 77, 78, 79, 80, 81, 88, 138, 209, 218, 240, 286, 291, 371, 376, 378, 409], "section": [10, 88, 96, 103, 104, 105, 106, 107, 138, 218, 240, 271, 405, 409], "9": [10, 40, 62, 84, 90, 114, 124, 133, 135, 138, 148, 150, 158, 160, 169, 181, 188, 226, 238, 246, 252, 254, 262, 264, 265, 268, 272, 276, 280, 287, 288, 289, 293, 305, 313, 320, 321, 322, 323, 326, 331, 334, 336, 337, 338, 369, 371, 373, 374, 376, 380, 384, 390, 405, 407, 408, 410, 411], "5": [10, 19, 24, 32, 40, 42, 43, 62, 84, 88, 90, 96, 97, 98, 99, 100, 101, 114, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 179, 181, 188, 191, 218, 226, 228, 230, 238, 246, 252, 254, 262, 264, 265, 268, 272, 274, 276, 280, 282, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 338, 341, 344, 348, 349, 350, 351, 352, 353, 356, 357, 364, 366, 368, 369, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 389, 390, 392, 396, 404, 405, 408, 409, 411], "qasim": [10, 138], "chaudhari": [10, 138], "how": [10, 318, 321, 322, 324, 334, 336, 337, 338, 347, 349, 358, 359, 366, 371, 372, 376, 384, 390, 399], "work": 10, "exampl": [10, 19, 24, 32, 40, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 188, 191, 192, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 248, 249, 250, 251, 252, 262, 264, 265, 267, 268, 269, 270, 272, 274, 276, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 400, 407, 409, 414], "creat": [10, 12, 19, 20, 24, 28, 32, 36, 40, 41, 42, 43, 56, 58, 62, 64, 67, 74, 84, 85, 88, 89, 90, 95, 101, 102, 108, 110, 124, 125, 127, 133, 137, 138, 140, 148, 149, 150, 151, 152, 158, 162, 163, 164, 166, 179, 180, 181, 182, 188, 189, 191, 192, 193, 194, 209, 211, 226, 227, 228, 229, 230, 232, 238, 239, 246, 247, 249, 252, 253, 254, 256, 276, 278, 282, 284, 313, 317, 319, 323, 329, 335, 373, 374, 377, 385, 386, 390, 392, 403, 409, 411], "bursti": 10, "surround": 10, "In": [10, 12, 18, 19, 24, 32, 40, 62, 63, 64, 84, 85, 88, 89, 90, 97, 99, 101, 109, 110, 114, 122, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 146, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 169, 177, 179, 180, 181, 188, 189, 191, 192, 218, 226, 228, 229, 230, 238, 240, 246, 248, 249, 250, 251, 252, 255, 256, 262, 264, 265, 268, 269, 270, 272, 274, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 400, 403, 407, 410], "np": [10, 19, 24, 25, 26, 32, 33, 34, 40, 62, 84, 88, 90, 91, 92, 93, 97, 99, 114, 138, 148, 169, 179, 181, 186, 187, 188, 191, 193, 203, 207, 226, 228, 230, 238, 246, 248, 250, 251, 252, 262, 264, 265, 268, 272, 274, 276, 280, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 305, 306, 313, 314, 315, 316, 317, 321, 322, 323, 327, 332, 333, 334, 335, 336, 337, 344, 345, 346, 349, 350, 351, 352, 353, 356, 357, 358, 359, 361, 362, 364, 366, 368, 369, 373, 374, 377, 378, 379, 380, 383, 385, 386, 387, 389, 390, 400, 403, 404, 405, 407, 408, 409, 410, 411], "1j": [10, 62, 169, 306, 317, 321, 322, 335, 350, 351, 352, 353, 356, 357, 364, 368, 386, 389, 400, 403, 405, 407, 409], "arang": [10, 40, 62, 84, 138, 148, 181, 188, 262, 264, 265, 268, 276, 282, 294, 306, 317, 335, 336, 369, 385, 386, 389, 403, 409], "5000": 10, "100": [10, 88, 99, 114, 163, 169, 171, 176, 179, 191, 228, 230, 248, 250, 280, 282, 286, 291, 293, 296, 297, 298, 300, 301, 306, 313, 314, 315, 317, 330, 333, 335, 344, 345, 346, 350, 352, 358, 361, 364, 374, 377, 380, 383, 385, 386, 387, 389, 403, 409], "1000": [10, 114, 169, 223, 224, 226, 238, 243, 244, 246, 252, 313, 316, 385, 386, 397, 410], "2000": 10, "10": [10, 40, 62, 88, 90, 97, 99, 101, 124, 131, 133, 134, 135, 137, 138, 148, 150, 156, 158, 159, 160, 162, 179, 181, 188, 194, 226, 238, 239, 246, 247, 248, 250, 252, 253, 262, 264, 265, 268, 272, 274, 276, 280, 281, 282, 287, 289, 292, 293, 294, 296, 297, 298, 300, 301, 305, 307, 308, 309, 310, 311, 314, 315, 316, 318, 320, 321, 322, 324, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 356, 357, 361, 362, 364, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 387, 390, 400, 404, 407, 408, 409, 410, 411], "3000": 10, "4000": 10, "001": [10, 348, 409], "random": [10, 19, 24, 28, 32, 36, 58, 61, 62, 90, 95, 96, 191, 226, 228, 238, 246, 252, 269, 282, 285, 290, 305, 313, 327, 346, 349, 358, 366, 373, 374, 377, 400, 407, 408, 409, 410], "randn": [10, 62, 191, 228, 366], "size": [10, 40, 41, 46, 48, 95, 135, 160, 181, 183, 184, 185, 198, 200, 287, 305, 321, 322, 331, 366, 403, 409, 410, 411], "3": [10, 19, 24, 32, 40, 62, 67, 75, 77, 78, 81, 84, 88, 90, 96, 97, 101, 114, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 169, 179, 181, 188, 191, 218, 226, 228, 230, 238, 240, 246, 248, 249, 250, 251, 252, 254, 262, 264, 265, 268, 271, 272, 276, 280, 282, 284, 285, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 362, 364, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 400, 405, 407, 409, 411, 413], "plt": [10, 24, 32, 62, 84, 88, 97, 99, 138, 148, 179, 188, 191, 218, 226, 228, 230, 238, 240, 246, 248, 249, 250, 251, 252, 272, 274, 276, 280, 282, 283, 284, 286, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 306, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 389, 390, 392, 400, 403, 404, 405, 407, 408, 409, 410, 411], "figur": [10, 24, 32, 62, 84, 88, 97, 99, 138, 148, 179, 188, 191, 218, 226, 228, 230, 238, 240, 246, 248, 249, 250, 251, 252, 272, 274, 276, 280, 282, 283, 284, 286, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 306, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 361, 362, 364, 365, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 383, 384, 385, 386, 387, 389, 390, 392, 400, 403, 404, 405, 407, 408, 409, 410, 411], "plot": [10, 24, 32, 62, 84, 88, 97, 99, 114, 115, 116, 118, 121, 138, 148, 169, 171, 176, 179, 188, 191, 218, 226, 228, 230, 238, 240, 246, 248, 249, 250, 251, 252, 272, 274, 276, 280, 282, 283, 284, 286, 288, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 306, 313, 316, 317, 318, 319, 321, 322, 323, 324, 327, 329, 331, 332, 333, 335, 336, 337, 338, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 384, 385, 386, 389, 390, 392, 400, 403, 404, 405, 407, 409, 410, 411, 413, 414], "titl": [10, 24, 32, 62, 84, 88, 138, 179, 188, 218, 230, 240, 248, 250, 276, 280, 282, 283, 286, 288, 291, 292, 293, 294, 306, 313, 314, 315, 317, 321, 322, 327, 332, 333, 334, 335, 336, 337, 338, 344, 345, 348, 361, 362, 366, 377, 378, 379, 380, 383, 384, 385, 386, 387, 389, 392, 400, 403, 407, 408, 409, 410, 411, 413], "01": [10, 114, 169, 251, 252, 326, 400, 405, 407, 409], "notic": [10, 135, 137, 160, 162, 294, 317, 331, 334, 336, 347, 374, 385, 386, 400, 403, 407, 411], "over": [10, 124, 128, 129, 130, 131, 133, 134, 135, 136, 150, 153, 154, 155, 156, 158, 159, 160, 161, 248, 250, 284, 287, 292, 319, 323, 326, 329, 331, 390, 414], "i": [10, 12, 13, 14, 18, 20, 24, 28, 32, 36, 42, 43, 47, 58, 61, 62, 63, 64, 67, 74, 83, 84, 85, 88, 89, 90, 95, 96, 97, 98, 99, 100, 101, 106, 108, 109, 114, 116, 121, 122, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 141, 146, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 166, 168, 169, 171, 176, 177, 179, 182, 186, 187, 188, 189, 191, 192, 193, 194, 209, 211, 212, 215, 218, 226, 228, 231, 238, 239, 240, 246, 247, 252, 253, 254, 255, 256, 260, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 305, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 415], "amplifi": [10, 12, 14], "accord": [10, 314, 315, 383, 387], "also": [10, 62, 135, 160, 218, 226, 240, 299, 316, 318, 413], "when": [10, 17, 24, 32, 62, 64, 84, 85, 87, 88, 108, 113, 116, 119, 121, 138, 142, 148, 163, 171, 174, 176, 179, 188, 189, 191, 192, 228, 254, 267, 276, 278, 282, 283, 285, 286, 288, 290, 291, 294, 311, 323, 336, 350, 351, 352, 353, 356, 357, 364, 378, 379, 382, 390, 392, 400, 403, 404, 405, 407], "interest": 10, "appear": [10, 403], "quickli": 10, "decreas": [10, 334], "4": [10, 19, 24, 32, 40, 62, 75, 77, 84, 88, 90, 97, 101, 114, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 169, 179, 181, 188, 191, 218, 226, 227, 228, 230, 238, 239, 240, 246, 248, 249, 250, 251, 252, 254, 262, 264, 265, 268, 271, 272, 273, 275, 276, 280, 282, 284, 287, 288, 289, 292, 293, 294, 297, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 344, 345, 346, 348, 349, 350, 351, 352, 353, 356, 357, 361, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 392, 397, 398, 403, 405, 408, 409, 410], "6": [10, 19, 24, 32, 40, 62, 84, 88, 90, 101, 124, 125, 131, 133, 134, 135, 136, 137, 138, 148, 150, 151, 156, 158, 159, 160, 161, 162, 169, 179, 181, 188, 191, 218, 226, 228, 230, 238, 246, 251, 252, 254, 262, 264, 265, 268, 272, 273, 275, 276, 280, 287, 288, 289, 292, 293, 294, 296, 299, 305, 306, 307, 308, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 329, 330, 331, 332, 333, 334, 336, 337, 338, 341, 344, 346, 347, 349, 350, 351, 352, 353, 356, 357, 362, 364, 365, 366, 368, 369, 371, 373, 374, 376, 377, 378, 383, 384, 385, 386, 387, 389, 390, 392, 396, 399, 404, 405, 409, 410], "ylim": [10, 138, 148, 191, 228, 293, 294, 297, 298, 299, 300, 301, 306, 314, 315, 319, 321, 322, 323, 329, 331, 332, 333, 336, 362, 383, 387, 389, 390, 392, 404, 409, 410, 411], "__call__": [10, 11, 12, 18, 24, 27, 32, 35, 56, 57, 62, 63, 64, 84, 85, 88, 89, 90, 94, 108, 109, 110, 122, 124, 126, 138, 139, 140, 146, 148, 163, 164, 165, 166, 177, 179, 180, 188, 189, 191, 192, 209, 210, 218, 221, 228, 229, 230, 231, 240, 241, 254, 255, 256, 276, 277, 278, 414], "perform": [10, 11, 63, 67, 109, 149, 248, 250, 255, 277, 292, 299, 306, 336, 337, 373, 374, 389, 395, 400, 404, 405, 407, 410, 413, 414], "reset": [10, 17, 24, 32, 56, 61, 62, 84, 87, 88, 90, 108, 119, 124, 133, 138, 144, 148, 150, 158, 163, 174, 179, 188, 191, 209, 217, 228, 230, 236, 254, 267, 276], "indic": [10, 12, 18, 42, 43, 62, 64, 84, 85, 88, 89, 97, 98, 99, 100, 108, 110, 122, 138, 140, 146, 148, 163, 164, 166, 177, 179, 180, 186, 187, 188, 189, 191, 192, 193, 194, 226, 227, 228, 229, 238, 239, 246, 247, 248, 250, 252, 253, 254, 256, 259, 272, 273, 274, 275, 276, 278, 281, 309, 318, 319, 321, 322, 324, 327, 328, 331, 334, 335, 336, 337, 338, 342, 343, 346, 347, 348, 349, 357, 358, 359, 366, 371, 372, 375, 376, 384, 390, 400, 407], "whether": [10, 12, 18, 62, 64, 84, 85, 88, 89, 97, 98, 99, 100, 108, 110, 122, 138, 140, 146, 148, 163, 164, 166, 177, 179, 180, 188, 189, 191, 192, 228, 229, 248, 250, 254, 256, 272, 273, 274, 275, 276, 278, 281, 309, 319, 321, 322, 334, 335, 336, 337, 338, 342, 343, 346, 348, 349, 357, 359, 366, 375, 384], "The": [10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 404, 405, 407, 409, 410, 411, 413, 415], "current": [10, 15, 124, 134, 141, 150, 159, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 398], "settabl": [10, 13, 14, 16, 218, 219, 220, 230, 233, 234, 235], "paramet": [11, 12, 17, 20, 21, 23, 27, 28, 35, 36, 41, 43, 44, 46, 48, 53, 57, 58, 61, 63, 64, 74, 75, 77, 80, 85, 89, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 114, 115, 116, 118, 121, 125, 126, 127, 133, 135, 139, 140, 142, 144, 149, 151, 152, 158, 160, 164, 165, 166, 169, 171, 176, 180, 182, 184, 185, 189, 192, 194, 195, 197, 198, 199, 200, 205, 210, 211, 221, 222, 223, 224, 227, 229, 231, 232, 237, 239, 241, 243, 244, 247, 248, 250, 253, 255, 256, 269, 270, 272, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 400, 407], "stream": [12, 17, 18, 63, 64, 85, 87, 89, 109, 110, 113, 119, 122, 140, 142, 146, 164, 166, 174, 177, 180, 189, 192, 226, 229, 238, 246, 252, 255, 256, 267, 277, 278, 405], "meant": [12, 13, 14, 67], "attenu": [12, 13, 64, 85, 189, 278, 297, 298, 300, 301, 302, 371, 376], "strong": [12, 13], "after": [12, 13, 14, 265, 268, 288, 336, 397], "approx": [12, 13, 14, 148], "reduc": [12, 13, 14, 293], "e": [12, 13, 14, 24, 26, 27, 106, 218, 240, 271, 272, 273, 274, 275, 281, 285, 286, 288, 309, 314, 315, 329, 383, 387, 392, 397, 398, 404, 405, 410], "its": [12, 13, 14, 108, 124, 125, 133, 135, 150, 151, 158, 163, 164, 179, 191, 280, 282, 344, 373, 404, 405, 411], "origin": [12, 13, 14, 135, 160, 238, 252, 294, 314, 315, 383, 387, 389, 403], "valu": [12, 13, 14, 42, 43, 44, 53, 96, 182, 193, 194, 195, 205, 226, 227, 238, 239, 246, 247, 248, 250, 252, 253, 269, 270, 284, 287, 296, 303, 304, 314, 315, 318, 319, 323, 327, 328, 329, 330, 331, 336, 346, 348, 351, 353, 355, 356, 357, 363, 365, 370, 383, 387, 390, 397, 405, 414], "weak": [12, 14], "mode": [12, 17, 18, 63, 64, 85, 87, 89, 109, 110, 113, 119, 122, 140, 142, 146, 164, 166, 174, 177, 180, 189, 192, 229, 255, 256, 267, 277, 278, 284, 319, 323, 329, 331, 347, 349, 390, 392], "preserv": [12, 18, 64, 84, 85, 89, 110, 122, 140, 146, 164, 166, 177, 180, 188, 189, 192, 229, 256, 276, 278], "call": [12, 18, 63, 64, 84, 85, 89, 109, 110, 122, 135, 140, 146, 160, 164, 166, 177, 180, 188, 189, 192, 229, 255, 256, 276, 277, 278], "properti": [13, 14, 15, 16, 18, 22, 25, 26, 30, 31, 33, 34, 38, 39, 45, 47, 49, 50, 51, 52, 54, 55, 60, 65, 66, 68, 69, 70, 71, 72, 73, 76, 78, 79, 82, 83, 86, 91, 92, 93, 112, 117, 120, 122, 123, 128, 129, 130, 131, 132, 134, 136, 141, 143, 145, 146, 147, 153, 154, 155, 156, 157, 159, 161, 167, 168, 170, 172, 173, 175, 177, 178, 186, 187, 190, 196, 201, 202, 203, 204, 206, 207, 208, 212, 213, 214, 215, 216, 219, 220, 225, 233, 234, 235, 245, 249, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 279, 319, 414], "onli": [17, 43, 63, 64, 67, 85, 87, 109, 113, 114, 119, 142, 169, 174, 189, 194, 218, 227, 239, 247, 251, 253, 255, 267, 277, 278, 282, 284, 297, 298, 300, 301, 314, 315, 316, 321, 322, 323, 324, 328, 331, 334, 336, 337, 338, 346, 347, 349, 359, 370, 372, 378, 383, 384, 387, 390, 399, 400, 407, 409, 410], "initi": [17, 20, 124, 125, 127, 131, 133, 135, 137, 150, 151, 152, 156, 158, 160, 162, 218, 222, 240, 242, 331, 400, 407, 409], "scrambler": [19, 20, 413, 414], "c_n": [19, 124, 150], "c_1": [19, 124, 125, 136, 150, 151, 161], "c_0": [19, 124, 125, 136, 150, 151, 161], "v": [19, 84, 124, 150, 230, 254, 296, 319, 330, 396], "state": [19, 20, 62, 63, 67, 80, 84, 87, 88, 108, 109, 113, 119, 120, 122, 125, 127, 131, 133, 134, 135, 137, 138, 142, 144, 145, 146, 148, 151, 152, 156, 158, 159, 160, 162, 163, 174, 175, 177, 179, 188, 191, 228, 254, 255, 267, 276, 277, 287, 331, 414], "sequenc": [19, 21, 23, 24, 27, 32, 35, 40, 56, 57, 90, 94, 124, 128, 132, 135, 137, 150, 153, 157, 160, 162, 181, 184, 185, 284, 285, 287, 290, 305, 319, 323, 328, 329, 331, 347, 370, 390, 392, 394, 413, 414], "field": [19, 124, 125, 130, 135, 137, 150, 151, 155, 160, 162, 284, 287, 316, 319, 323, 329, 331, 390, 393], "http": [19, 280, 295, 297, 298, 299, 300, 301, 302, 318, 323, 329, 331, 340, 380, 390, 392, 396, 397, 398, 413], "en": [19, 295, 329, 331, 340, 392], "wikipedia": [19, 295, 329, 331, 340, 392], "org": [19, 295, 329, 331, 340, 392], "wiki": [19, 295, 329, 331, 340, 392], "construct": 19, "ieee": 19, "802": 19, "11": [19, 40, 62, 90, 124, 133, 135, 138, 150, 158, 160, 181, 188, 226, 238, 246, 252, 284, 287, 289, 293, 302, 320, 321, 322, 323, 331, 336, 337, 338, 369, 373, 374, 384, 390, 396, 400, 405, 408], "c": [19, 20, 24, 29, 30, 32, 37, 38, 40, 41, 56, 59, 60, 62, 63, 64, 65, 67, 75, 77, 78, 79, 80, 81, 90, 103, 104, 105, 106, 107, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 193, 194, 207, 209, 226, 238, 246, 251, 252, 283, 286, 287, 288, 291, 316, 317, 319, 331, 341, 365, 378, 379, 385, 386, 391, 393, 409], "galoi": [19, 20, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 284, 287, 319, 323, 329, 331, 390, 393, 413, 414], "poli": [19, 124, 125, 128, 129, 130, 133, 136, 137, 150, 151, 153, 154, 155, 158, 161, 162, 287, 329, 331, 370, 393], "degre": [19, 42, 43, 50, 124, 132, 150, 157, 193, 194, 202, 226, 227, 238, 239, 246, 247, 249, 252, 253, 287, 289, 317, 319, 320, 327, 328, 329, 331, 335, 341, 370, 380, 393, 400, 407, 409], "7": [19, 24, 32, 40, 62, 84, 88, 90, 101, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 181, 188, 218, 226, 238, 240, 246, 251, 252, 254, 262, 264, 265, 268, 272, 276, 280, 283, 284, 287, 288, 289, 293, 299, 300, 302, 305, 313, 314, 315, 317, 319, 320, 321, 322, 323, 326, 329, 331, 336, 337, 338, 369, 373, 374, 378, 379, 383, 384, 387, 390, 392, 396, 397, 398, 405, 407, 409, 413], "out": [19, 24, 32, 40, 62, 84, 90, 101, 114, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 148, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 169, 181, 188, 218, 226, 238, 246, 249, 251, 252, 254, 262, 264, 265, 266, 268, 269, 270, 276, 284, 285, 287, 289, 290, 292, 293, 296, 303, 304, 305, 307, 308, 310, 311, 313, 316, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 367, 369, 370, 373, 374, 378, 381, 382, 384, 388, 390, 391], "gf": [19, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 284, 287, 319, 323, 329, 331, 370, 390], "scrambl": [19, 22, 23, 414], "descrambl": [19, 21], "randint": [19, 24, 32, 90, 226, 238, 246, 252, 282, 285, 290, 305, 313, 327, 346, 349, 358, 366, 373, 374, 377, 408, 409, 410], "20": [19, 24, 32, 88, 89, 90, 97, 99, 124, 138, 150, 188, 230, 272, 276, 283, 285, 288, 290, 292, 296, 305, 313, 321, 322, 326, 327, 330, 336, 337, 343, 369, 374, 375, 379, 389, 410], "array_equ": [19, 226, 238, 246, 252, 287, 323, 390], "true": [19, 84, 97, 98, 99, 100, 114, 128, 129, 138, 153, 154, 169, 188, 218, 223, 224, 226, 238, 240, 243, 244, 246, 248, 250, 252, 272, 273, 274, 275, 276, 280, 281, 285, 287, 290, 305, 309, 319, 321, 322, 323, 328, 334, 335, 336, 337, 338, 342, 343, 344, 346, 348, 349, 357, 359, 365, 366, 367, 375, 384, 390, 400, 407, 409, 410], "characteristic_poli": [19, 20, 124, 125, 127, 128, 129, 137, 150, 151, 152, 153, 154, 162, 287], "polylik": [19, 20, 124, 127, 150, 152, 319, 328, 329, 331, 370, 393], "lfsr": [19, 22, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 287, 331, 393, 413, 414], "flfsr": [19, 20, 22, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 150, 162, 287, 393, 414], "fibonacci": [19, 22, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 150, 162, 287, 331, 393, 413, 414], "feedback_poli": [20, 124, 125, 127, 128, 129, 137, 150, 151, 152, 153, 154, 162, 287], "c_": [20, 124, 125, 127, 128, 129, 136, 150, 151, 152, 153, 154, 161, 287, 288, 392], "cdot": [20, 62, 84, 88, 108, 124, 127, 128, 129, 141, 150, 152, 153, 154, 188, 191, 218, 240, 254, 255, 266, 276, 277, 287, 288, 297, 298, 300, 301, 314, 315, 327, 329, 335, 344, 373, 374, 383, 387], "dot": [20, 124, 125, 127, 128, 129, 131, 133, 134, 136, 150, 151, 152, 153, 154, 156, 158, 159, 161, 193, 194, 207, 226, 238, 246, 251, 252, 287, 331, 365], "feedback": [20, 124, 127, 128, 129, 150, 152, 153, 154, 163, 166, 167, 179, 191, 287, 331, 350, 351, 352, 353, 356, 357, 364, 368, 393, 405], "either": [20, 127, 152, 221, 230, 241, 313], "must": [20, 64, 85, 127, 140, 152, 184, 185, 189, 278, 282, 288, 297, 298, 300, 301, 302, 314, 315, 318, 329, 335, 359, 371, 376, 383, 387, 392, 400, 407], "both": [20, 127, 137, 152, 162, 218, 240, 292, 294, 314, 315, 336, 346, 347, 365, 366, 367, 383, 387], "s_0": [20, 124, 125, 127, 131, 133, 134, 150, 151, 152, 156, 158, 159], "s_1": [20, 124, 125, 127, 131, 133, 134, 150, 151, 152, 156, 158, 159, 314, 383, 400, 407], "s_": [20, 124, 125, 127, 131, 133, 134, 150, 151, 152, 156, 158, 159], "which": [20, 125, 127, 133, 151, 152, 158, 226, 238, 252, 281, 282, 283, 309, 312, 314, 315, 317, 325, 327, 329, 331, 340, 341, 342, 346, 349, 351, 353, 355, 356, 357, 362, 363, 365, 367, 377, 383, 387, 400, 407, 411], "correspond": [20, 101, 106, 125, 127, 133, 141, 151, 152, 158, 259, 331, 359], "all": [20, 62, 84, 101, 106, 125, 127, 151, 152, 188, 231, 254, 256, 263, 276, 313, 349, 358, 359, 370, 397, 399, 413, 414], "ones": [20, 125, 127, 151, 152, 189, 278, 297, 298, 300, 301, 400, 407, 409], "primitive_poli": [20, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 329, 331], "binaryerasurechannel": [24, 25, 26, 27, 28, 29, 30, 31, 394, 414], "ar": [24, 26, 27, 32, 42, 43, 52, 55, 62, 63, 64, 84, 85, 89, 90, 96, 101, 103, 104, 105, 107, 109, 110, 124, 135, 137, 140, 149, 150, 162, 164, 166, 180, 188, 189, 192, 193, 194, 204, 208, 226, 227, 229, 231, 238, 239, 246, 247, 252, 253, 254, 255, 256, 263, 265, 268, 271, 276, 277, 278, 283, 285, 286, 287, 290, 291, 293, 294, 299, 302, 314, 315, 316, 319, 323, 324, 328, 329, 331, 339, 346, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 363, 365, 366, 367, 369, 370, 372, 380, 383, 385, 386, 387, 390, 396, 398, 400, 403, 405, 407, 409, 411, 413, 415], "x_i": [24, 27, 32, 35, 90, 94, 95, 283, 285, 286, 288, 290, 291, 305, 327], "y_i": [24, 27, 32, 35, 62, 63, 90, 94, 254, 283, 285, 286, 288, 290, 291, 305], "capac": [24, 29, 30, 32, 37, 38, 56, 59, 60, 90, 283, 286, 288, 291, 378, 379, 413, 414], "john": [24, 32, 90, 248, 250, 319, 328, 370], "proaki": [24, 32, 90, 248, 250, 319, 328, 370], "chapter": [24, 32, 62, 84, 90, 188, 248, 250, 276, 288, 302, 319, 328, 369, 370], "pass": [24, 27, 28, 32, 35, 36, 43, 56, 57, 58, 61, 62, 84, 88, 90, 94, 95, 108, 113, 138, 142, 148, 188, 228, 254, 256, 260, 276, 282, 285, 290, 305, 313, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 394, 396, 398, 404, 405, 414], "through": [24, 27, 32, 35, 56, 57, 62, 84, 88, 90, 94, 108, 113, 124, 126, 138, 142, 148, 188, 228, 238, 252, 254, 276, 285, 290, 305, 317, 394, 404, 405, 409], "25": [24, 32, 62, 90, 97, 124, 150, 285, 290, 293, 299, 305, 321, 322, 403, 408, 409, 411], "roughli": [24, 32, 285, 290, 403], "eras": [24, 285], "seed": [24, 28, 32, 36, 56, 58, 61, 90, 95, 282, 285, 290, 305, 414], "count_nonzero": [24, 32, 90], "thi": [24, 28, 32, 36, 43, 46, 58, 61, 67, 84, 95, 103, 104, 105, 107, 108, 135, 160, 163, 188, 189, 194, 197, 198, 207, 218, 226, 231, 238, 239, 247, 251, 252, 253, 276, 278, 280, 282, 285, 287, 288, 290, 293, 294, 305, 306, 313, 314, 315, 316, 321, 322, 323, 334, 336, 337, 338, 344, 346, 349, 355, 359, 363, 366, 373, 374, 378, 380, 383, 384, 387, 389, 390, 396, 398, 399, 400, 403, 405, 407, 409, 410, 411, 413], "75": [24, 90, 298, 326, 409], "howev": [24, 32, 63, 103, 104, 105, 107, 109, 148, 209, 255, 277, 280, 286, 288, 291, 323, 331, 336, 347, 390, 403], "linearli": [24, 189, 278, 283, 379], "linspac": [24, 32, 88, 97, 114, 169, 179, 248, 250, 272, 280, 283, 286, 288, 291, 293, 294, 316, 321, 322, 332, 333, 336, 337, 344, 345, 361, 362, 374, 379, 400, 405, 407, 408, 409, 410], "101": [24, 32, 97, 99, 272, 274, 283, 294, 297, 298, 300, 301, 314, 315, 321, 322, 336, 337, 378, 379, 383, 387, 400, 407, 408], "xlabel": [24, 32, 218, 240, 280, 283, 286, 288, 291, 292, 293, 294, 313, 314, 315, 316, 332, 333, 334, 336, 378, 379, 383, 387, 400, 407, 408, 409, 411], "ylabel": [24, 32, 218, 240, 280, 283, 286, 288, 291, 292, 293, 294, 313, 314, 315, 316, 317, 332, 333, 334, 336, 378, 379, 383, 387, 400, 407, 408, 409, 411], "new": [24, 28, 32, 36, 42, 43, 56, 58, 61, 90, 95, 101, 102, 124, 127, 133, 138, 140, 150, 152, 158, 191, 193, 194, 226, 227, 238, 239, 246, 247, 252, 253, 317, 377], "int64": [24, 27, 32, 35, 90, 94, 284, 319, 323, 329, 331, 390, 393], "static": [24, 29, 32, 37, 56, 59, 90, 96, 97, 98, 99, 100, 271, 272, 273, 274, 275, 397], "alphabet": [24, 25, 26, 32, 33, 34, 90, 92, 93, 95, 305], "repres": [24, 26, 27, 67, 76, 285, 286, 331], "instanti": [24, 30, 32, 38, 56, 60, 90], "number": [28, 36, 41, 42, 43, 45, 54, 58, 61, 62, 63, 64, 65, 84, 95, 97, 98, 99, 100, 101, 103, 104, 107, 114, 115, 116, 118, 121, 135, 160, 169, 171, 176, 188, 193, 194, 196, 206, 223, 224, 226, 227, 237, 238, 239, 243, 244, 246, 247, 252, 253, 254, 256, 257, 265, 268, 276, 280, 282, 285, 290, 292, 305, 307, 308, 310, 318, 321, 322, 324, 326, 334, 336, 337, 338, 339, 344, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 363, 364, 369, 371, 372, 376, 380, 381, 384, 388], "numpi": [28, 36, 58, 61, 62, 84, 88, 95, 108, 114, 148, 163, 169, 179, 188, 191, 228, 231, 254, 276, 282, 285, 290, 305, 346, 347, 388, 397, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414], "default_rng": [28, 36, 58, 61, 95, 282, 285, 290, 305, 400, 407], "binarysymmetricchannel": [32, 33, 34, 35, 36, 37, 38, 39, 394, 414], "h_b": [32, 291], "appropri": 32, "modul": [32, 42, 43, 47, 48, 49, 193, 194, 200, 201, 203, 218, 223, 224, 226, 230, 238, 239, 240, 243, 244, 246, 247, 248, 250, 252, 253, 307, 308, 310, 313, 345, 349, 358, 361, 362, 365, 366, 373, 374, 378, 379, 381, 396, 399, 410, 413, 414], "hard": [32, 288], "decis": [32, 42, 46, 193, 197, 198, 218, 221, 224, 226, 238, 240, 241, 244, 246, 252, 288, 409], "transit": [32, 36, 39, 90, 91, 95, 238, 252, 290, 291, 305, 390], "flip": [32, 290], "189": 32, "18872187554086717": 32, "interleav": [40, 41, 181, 182, 183, 184, 185, 186, 187, 413, 414], "feed": 40, "down": [40, 369], "column": [40, 41, 369], "read": 40, "across": [40, 62, 88, 256, 280, 312, 325, 334, 336, 380], "row": [40, 41, 359], "8": [40, 43, 62, 84, 88, 90, 101, 114, 124, 133, 135, 138, 148, 150, 158, 160, 169, 179, 181, 188, 194, 226, 227, 238, 239, 246, 247, 248, 250, 251, 252, 253, 254, 262, 264, 265, 268, 276, 280, 283, 287, 288, 289, 293, 299, 305, 313, 314, 315, 320, 321, 322, 323, 326, 331, 334, 336, 337, 338, 341, 344, 345, 349, 350, 351, 352, 353, 356, 357, 361, 364, 366, 367, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 383, 384, 387, 390, 400, 404, 405, 407, 408, 409, 411], "inverse_map": [40, 181, 186], "deinterleav": [40, 181, 184, 186], "12": [40, 62, 124, 133, 135, 138, 150, 158, 160, 181, 188, 226, 238, 246, 252, 273, 275, 280, 289, 314, 315, 319, 320, 321, 322, 328, 331, 334, 336, 337, 369, 370, 373, 374, 380, 383, 387, 404, 408, 410], "col": [40, 41], "__len__": [40, 62, 84, 88, 108, 111, 148, 181, 183, 188, 228, 254, 276], "permut": [40, 181, 182, 186, 187], "determin": [41, 287, 328, 359, 393, 400, 407], "separ": [41, 226, 347, 349], "consecut": [41, 43, 227, 239, 247, 253], "nomenclatur": [42, 193, 226, 238, 246, 252], "variabl": [42, 193, 226, 230, 231, 238, 246, 252, 269, 326, 409], "name": [42, 124, 193, 226, 238, 246, 252], "follow": [42, 96, 101, 193, 226, 238, 246, 252, 327, 346, 359, 363, 365, 367, 369, 400, 407, 409, 413], "tild": [42, 46, 193, 197, 198, 218, 221, 226, 238, 240, 241, 246, 252], "puls": [42, 43, 46, 48, 51, 52, 55, 88, 179, 193, 194, 198, 200, 203, 204, 208, 226, 238, 239, 246, 247, 252, 253, 318, 324, 349, 366, 371, 372, 373, 374, 376, 380, 406, 413, 414], "shape": [42, 43, 46, 48, 51, 52, 55, 62, 193, 194, 198, 200, 203, 204, 208, 226, 238, 239, 246, 247, 252, 253, 318, 324, 349, 366, 371, 372, 373, 374, 376, 405, 406, 413, 414], "index": [42, 43, 47, 138, 144, 193, 226, 238, 246, 252, 259, 319, 323, 329, 331, 349, 358, 359, 365, 390, 393, 396], "object": [42, 43, 67, 74, 101, 102, 193, 194, 226, 227, 238, 239, 246, 247, 252, 253, 287, 323, 350, 351, 352, 353, 356, 357, 364, 368, 390, 409, 414], "x_tild": [42, 46, 198], "abstract": [42, 44, 53, 193, 195, 205], "code": [42, 43, 45, 193, 196, 226, 227, 238, 239, 246, 247, 251, 252, 253, 284, 289, 307, 308, 310, 319, 320, 323, 329, 346, 365, 378, 381, 390, 393, 398, 410, 413, 414], "log_2": [42, 45, 193, 196, 226, 238, 246, 252, 283, 307, 308, 310, 378, 379, 381], "phase_offset": [42, 43, 50, 193, 194, 202, 226, 227, 238, 239, 246, 247, 249, 252, 253, 282, 313, 327, 346, 349, 365, 366, 377, 408, 409, 410], "f_": [42, 43, 47, 54, 62, 63, 67, 74, 82, 84, 114, 115, 118, 169, 188, 193, 194, 206, 226, 227, 238, 239, 246, 247, 252, 253, 254, 255, 266, 276, 277, 288, 297, 298, 300, 301, 306, 308, 311, 317, 318, 335, 347, 349, 350, 351, 353, 355, 356, 357, 358, 359, 363, 366, 373, 374, 377, 381, 382, 385, 386, 389, 403, 404, 405, 409, 411], "sym": [42, 43, 47, 54, 193, 194, 206, 226, 227, 238, 239, 246, 247, 252, 253, 308, 311, 318, 371, 376, 381, 382, 411], "pulse_shap": [42, 43, 46, 48, 51, 193, 194, 198, 200, 203, 226, 238, 239, 246, 247, 252, 253, 349, 366, 373, 374, 408, 410], "instantan": [42, 43, 51, 313], "tx_filter": [42, 55, 193, 208, 226, 238, 246, 252], "transmit": [42, 55, 103, 193, 208, 218, 221, 226, 238, 240, 241, 246, 252, 313, 349, 374], "filter": [42, 46, 52, 55, 62, 63, 64, 66, 67, 71, 72, 74, 76, 84, 85, 86, 87, 88, 89, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 138, 141, 142, 144, 145, 146, 147, 148, 149, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 188, 189, 190, 191, 192, 193, 198, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 226, 228, 229, 238, 246, 252, 254, 255, 256, 259, 262, 264, 265, 267, 268, 276, 277, 278, 279, 297, 298, 299, 300, 301, 302, 306, 314, 315, 318, 324, 349, 350, 351, 352, 353, 356, 357, 364, 368, 369, 371, 372, 376, 383, 387, 389, 395, 402, 411, 413, 414], "coeffici": [42, 52, 55, 62, 64, 84, 85, 108, 110, 163, 166, 188, 189, 204, 208, 256, 276, 278, 331, 350, 351, 352, 353, 356, 357, 364, 368, 369, 404, 405], "rx_filter": [42, 52, 193, 204, 226, 238, 246, 252], "match": [42, 43, 46, 52, 193, 194, 198, 204, 226, 238, 239, 246, 247, 252, 253, 314, 315, 349, 383, 387, 414], "symbol_label": [43, 226, 227, 238, 239, 246, 247, 251, 252, 253, 410], "bin": [43, 227, 239, 247, 251, 253, 293, 313, 321, 322, 346, 359, 365, 400, 407, 410], "grai": [43, 226, 227, 238, 239, 246, 247, 251, 252, 253, 320, 346, 365, 393, 410, 413], "rect": [43, 194, 239, 247, 253, 373, 374, 411], "deviat": [43, 47, 314, 315, 383, 387, 400, 407], "delta": [43, 47, 75, 77, 116, 148, 149, 171, 293, 299, 317, 332, 333, 352, 377, 404, 405], "chang": [43, 47, 317, 398, 415], "label": [43, 62, 84, 88, 97, 99, 138, 148, 179, 188, 191, 218, 227, 228, 239, 240, 247, 248, 250, 253, 272, 274, 276, 280, 282, 288, 293, 294, 297, 298, 299, 300, 301, 313, 314, 315, 317, 318, 327, 332, 333, 334, 336, 337, 344, 345, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 366, 371, 373, 374, 376, 377, 380, 383, 387, 400, 403, 407, 408, 409, 410, 411], "adjac": [43, 227, 239, 247, 251, 253, 410, 411], "mai": [43, 227, 239, 247, 251, 253, 313, 346, 359, 363, 365, 367, 405, 414], "more": [43, 135, 160, 227, 239, 247, 251, 253, 373, 414], "than": [43, 83, 135, 160, 226, 227, 239, 247, 251, 253, 280, 283, 294, 314, 315, 319, 324, 327, 334, 344, 346, 365, 372, 379, 380, 383, 387, 400, 407], "one": [43, 108, 135, 160, 163, 227, 238, 239, 247, 251, 253, 294, 318, 326, 350, 351, 353, 355, 356, 357, 363, 370, 380, 385, 397, 404, 405, 408, 411], "npt": [43, 64, 85, 114, 169, 189, 194, 227, 239, 247, 253, 278, 297, 298, 300, 301, 350, 351, 352, 353, 356, 357, 364, 368], "whose": [43, 194, 227, 239, 246, 247, 253, 331], "If": [43, 89, 95, 99, 135, 144, 160, 194, 231, 239, 247, 253, 274, 276, 281, 282, 283, 292, 293, 294, 305, 309, 314, 315, 319, 336, 339, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 375, 383, 385, 387, 388, 400, 407, 413], "string": [43, 194, 239, 247, 253, 326, 355, 363, 414], "custom": [43, 62, 66, 84, 86, 181, 188, 190, 194, 239, 247, 253, 276, 279, 297, 298, 300, 301, 414], "It": [43, 108, 163, 188, 194, 209, 218, 239, 247, 253, 282, 336, 400, 407], "import": [43, 194, 218, 239, 247, 253, 398, 400, 403, 404, 405, 407, 408, 409, 410, 411, 413], "p_b": [44, 195], "likelihood": [46, 197, 198, 218, 395, 409, 414], "s_hat": [46, 198, 409, 410], "p_e": [53, 205], "base": [56, 347, 349, 358, 359, 366, 394, 414], "wireless": [56, 394], "configur": [56, 59, 90, 124, 150, 409], "2d": [56, 59, 60, 90, 283, 346, 349, 359, 362, 378, 379], "polyphas": [62, 63, 64, 66, 84, 85, 86, 188, 189, 190, 254, 255, 256, 257, 259, 260, 263, 264, 265, 268, 276, 277, 278, 279, 302, 306, 369, 389, 413, 414], "fir": [62, 63, 64, 84, 85, 87, 88, 89, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 138, 141, 148, 149, 188, 189, 191, 192, 226, 228, 229, 238, 246, 252, 254, 255, 256, 259, 262, 264, 265, 267, 268, 276, 277, 278, 297, 298, 299, 300, 301, 302, 349, 350, 351, 352, 353, 356, 357, 364, 368, 369, 402, 408, 413, 414], "effici": [62, 135, 160, 226, 306, 334, 341, 362, 378, 379, 389], "split": 62, "equal": [62, 124, 144, 226, 288, 292, 294, 319, 400, 407], "ha": [62, 109, 179, 188, 226, 238, 246, 255, 277, 282, 297, 298, 299, 300, 301, 306, 316, 318, 341, 362, 371, 376, 380, 389, 392, 400, 407, 409, 410, 411], "equival": [62, 84, 137, 149, 162, 188, 276, 282, 283, 287, 297, 298, 299, 300, 301, 311, 314, 315, 323, 349, 382, 383, 387, 390, 398, 400, 403, 407], "first": [62, 84, 101, 135, 141, 188, 189, 226, 238, 259, 276, 278, 294, 314, 319, 328, 339, 347, 352, 366, 370, 383, 388, 397, 399, 400, 407, 414], "f_i": 62, "feedforward": [62, 64, 84, 85, 88, 108, 110, 123, 148, 163, 166, 168, 179, 188, 189, 191, 228, 254, 256, 265, 268, 276, 278, 350, 351, 352, 353, 356, 357, 364, 368, 369, 404, 405], "instead": [62, 84, 188, 276, 317], "commut": [62, 84, 188, 254, 256, 260, 263, 276], "parallel": [62, 84, 188, 254, 256, 263, 276], "fourier": 62, "transform": 62, "idft": 62, "bottom": [62, 84, 188, 254, 256, 260, 263, 276], "top": [62, 84, 188, 254, 256, 260, 263, 276], "relat": [62, 84, 136, 161, 188, 254, 265, 268, 276, 318], "j": [62, 84, 114, 163, 166, 167, 169, 179, 182, 186, 187, 188, 191, 226, 230, 238, 246, 252, 254, 265, 268, 276, 282, 305, 321, 322, 327, 329, 334, 335, 336, 337, 338, 384, 392, 404, 405], "fred": [62, 84, 188, 276, 302, 369], "harri": [62, 84, 188, 276, 297, 298, 300, 301, 302, 369], "process": [62, 84, 96, 97, 98, 100, 124, 126, 188, 191, 228, 271, 272, 273, 275, 276, 294, 302, 369, 405, 409, 413], "system": [62, 84, 188, 276, 302, 311, 323, 369, 382, 390, 397, 399, 409, 413], "tone": 62, "increas": [62, 89, 283, 316, 341, 374, 379, 405], "10_000": [62, 373, 408], "rang": [62, 218, 240, 346, 409, 410], "overlai": 62, "boundari": [62, 226], "center": [62, 297, 298, 299, 300, 301, 324, 366, 372, 385, 386, 414], "so": [62, 238, 246, 252, 280, 294, 316, 318, 324, 371, 372, 376, 413], "wrap": 62, "posit": [62, 182, 186, 187, 294, 319, 327], "neg": [62, 135, 160, 294, 316, 327], "fft": [62, 306, 347, 355, 363, 385, 386, 389], "1024": [62, 114, 115, 118, 169, 350, 351, 353, 356, 357, 411], "color": [62, 88, 179, 280, 283, 336, 344, 347, 349, 358, 359, 366, 379, 400, 407, 408, 411], "f_start": 62, "f_stop": 62, "fill_betweenx": 62, "80": [62, 64, 85, 88, 189, 278, 302, 392], "xtick": 62, "legend": [62, 88, 148, 179, 218, 240, 280, 288, 293, 294, 314, 315, 332, 333, 334, 336, 337, 344, 380, 383, 387, 400, 407, 408, 409, 411], "spread": [62, 323, 373, 374, 390], "10000": 62, "1001": [62, 292, 293, 321, 322, 332, 333, 348], "full": [62, 63, 84, 109, 188, 254, 255, 276, 277, 347], "flush": [62, 63, 84, 88, 108, 109, 113, 138, 142, 148, 188, 228, 254, 255, 276, 277, 414], "consist": [62, 84, 88, 103, 104, 105, 106, 107, 108, 120, 138, 145, 148, 188, 228, 254, 276], "previou": [62, 64, 84, 85, 88, 89, 108, 110, 120, 138, 140, 144, 145, 148, 164, 166, 180, 188, 189, 191, 192, 228, 229, 254, 256, 276, 278, 303, 304], "frequency_respons": [62, 84, 88, 108, 114, 148, 163, 169, 179, 188, 191, 228, 254, 276, 414], "polyphase_tap": [62, 84, 188, 254, 262, 264, 265, 268, 276], "polyphase_ord": [62, 64, 84, 85, 188, 189, 254, 262, 264, 276, 278, 302, 414], "hold": [62, 84, 188, 189, 254, 256, 260, 276, 278, 314, 315, 339, 383, 387, 414], "connect": [62, 84, 188, 254, 256, 260, 263, 276], "sum": [62, 84, 96, 108, 163, 188, 254, 256, 263, 271, 276, 400, 407, 411], "integ": [62, 84, 114, 169, 188, 254, 258, 261, 276, 331, 339], "resampl": [62, 84, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 188, 254, 255, 266, 276, 277, 278, 279, 302, 369, 402, 413, 414], "l": [63, 109, 148, 149, 165, 192, 228, 229, 255, 277, 299], "non": [63, 97, 98, 99, 100, 109, 255, 277, 280, 321, 322, 324, 331, 334, 336, 337, 338, 344, 347, 366, 372, 380, 384, 397, 400, 401, 413, 414], "convolut": [63, 109, 188, 255, 277], "have": [63, 149, 284, 292, 299, 306, 323, 328, 339, 347, 366, 370, 388, 389, 390, 400, 407], "proport": [63, 67, 71, 209, 211, 216, 255, 277, 314, 315, 316, 341, 383, 387, 395, 414], "align": [63, 109, 189, 238, 255, 277, 278, 288, 323, 390, 400, 403, 407], "where": [63, 74, 90, 95, 109, 141, 194, 211, 247, 253, 255, 271, 277, 282, 283, 288, 293, 305, 307, 308, 310, 314, 315, 318, 319, 373, 374, 381, 383, 387, 392, 404, 405, 413], "final": [63, 109, 255, 277], "d": [63, 88, 108, 112, 124, 138, 141, 148, 150, 228, 287, 312, 316, 325, 341, 396, 397, 398, 400, 407, 413], "dictat": [63, 109, 255, 277, 331], "argument": [63, 64, 85, 109, 189, 255, 277, 278, 292, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 397, 404, 405, 414], "23": [64, 85, 124, 150, 189, 278, 302, 321, 322, 337, 341], "atten": [64, 85, 189, 278, 297, 298, 300, 301, 302, 414], "specif": [64, 85, 106, 114, 169, 189, 278, 399, 411], "odd": [64, 85, 149, 189, 252, 278, 299, 302, 319, 328, 370, 385], "even": [64, 85, 149, 189, 252, 278, 297, 298, 299, 300, 301, 302, 318, 319, 328, 329, 370, 371, 376], "stopband": [64, 85, 189, 278, 302, 371, 376], "a_": [64, 85, 189, 218, 219, 220, 222, 278, 302], "stop": [64, 85, 189, 278, 302], "closedlooppl": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 395, 409, 414], "defin": [67, 90, 108, 124, 128, 129, 130, 132, 136, 150, 153, 154, 155, 157, 161, 163, 179, 282, 288, 293, 305, 318, 336, 337, 338, 360, 371, 376, 392, 395, 405, 413], "close": [67, 74, 76, 288, 395, 413, 414], "loop": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 209, 210, 211, 212, 213, 214, 215, 216, 217, 230, 231, 232, 233, 234, 235, 236, 237, 412, 413, 414], "pll": [67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 395, 413, 414], "analysi": [67, 74, 397, 409, 413, 414], "bb": [67, 408, 409], "phase_err": [67, 409], "ped": [67, 73, 74, 211, 218, 222, 223, 224, 240, 241, 242, 243, 244, 245, 395, 409, 413, 414], "lf": [67, 409], "phase_est": [67, 409], "lo": [67, 409], "nco": [67, 70, 74, 211, 230, 231, 232, 233, 234, 235, 236, 237, 395, 409, 413, 414], "local": [67, 396, 409], "oscil": [67, 230, 232, 395, 409, 413, 414], "numer": [67, 230, 232, 288, 332, 333, 395, 405, 409, 413, 414], "transfer": [67, 76, 108, 163, 164, 191, 209, 318, 371, 376, 404, 405, 409], "2nd": [67, 209, 211, 395, 409, 414], "plu": [67, 209, 211, 395, 414], "h_": [67, 88, 409], "k_1": [67, 71, 209, 216, 409], "k_2": [67, 72, 209, 214, 409], "frac": [67, 75, 77, 80, 81, 88, 96, 97, 98, 100, 108, 112, 148, 163, 179, 189, 191, 209, 228, 238, 246, 252, 271, 272, 273, 278, 280, 281, 282, 283, 288, 293, 294, 295, 307, 308, 310, 311, 313, 314, 315, 316, 318, 327, 330, 335, 340, 341, 344, 371, 373, 374, 375, 376, 378, 379, 381, 382, 383, 387, 391, 392, 400, 407, 409], "k_0": [67, 70, 74, 211, 230, 232, 233, 409], "k_p": [67, 73, 74, 211, 218, 225, 240, 245, 409], "appendix": [67, 209, 318, 371, 376], "lock": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 209, 210, 211, 212, 213, 214, 215, 216, 217, 230, 231, 232, 233, 234, 235, 236, 237, 412, 413], "see": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 119, 120, 122, 123, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 178, 180, 192, 209, 210, 211, 212, 213, 214, 215, 216, 217, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 246, 249, 251, 252, 267, 276, 292, 297, 298, 300, 301, 306, 318, 324, 350, 351, 352, 353, 356, 357, 364, 368, 371, 372, 376, 413], "noise_bandwidth": [67, 74, 209, 211, 215, 314, 315, 383, 387], "damping_factor": [67, 74, 209, 211, 212], "phase_lock_tim": [67, 81], "frequency_lock_tim": [67, 75], "freq_offset": [67, 75, 77, 333], "lock_tim": [67, 77, 409], "phase_error_vari": [67, 80], "cn0": [67, 80], "varianc": [67, 80, 96, 98, 100, 273, 275, 282, 321, 322, 334, 336, 337, 338, 348, 384, 400, 407], "steadi": [67, 80], "bnt": [67, 69, 409], "b_n": [67, 68, 69, 74, 75, 77, 80, 81, 209, 211, 215, 314, 315, 383, 387], "bn": [67, 68], "hz": [67, 68, 74, 75, 77, 80, 114, 115, 118, 169, 211, 215, 283, 292, 293, 296, 306, 314, 315, 316, 317, 318, 330, 332, 333, 335, 341, 373, 383, 385, 386, 387, 391, 403], "zeta": [67, 74, 83, 209, 211, 212], "damp": [67, 74, 83, 209, 211, 212, 409], "k0": [67, 70, 74, 211, 230, 409], "kp": [67, 73, 74, 211, 409], "k1": [67, 71, 209, 409], "k2": [67, 72, 209, 409], "omega_n": [67, 79, 409], "natur": [67, 79], "radian": [67, 78, 79, 80, 218, 221, 223, 224, 230, 231, 232, 234, 235, 240, 241, 243, 244, 252, 409], "omega_3db": [67, 78], "omega_": [67, 78], "textrm": [67, 78], "period": [74, 211, 215, 226, 328, 370, 392], "second": [74, 75, 77, 81, 101, 209, 211, 215, 292, 293, 294, 314, 315, 318, 319, 328, 332, 333, 347, 374, 383, 387, 397, 400, 407], "critic": [74, 83, 211, 212, 409], "underdamp": [74, 83, 211, 212], "overdamp": [74, 83, 211, 212], "ted": [74, 211], "fl": [75, 77], "take": [75, 77, 81, 396], "onto": [75, 77, 81], "equat": [75, 77, 78, 79, 80, 81, 97, 98, 100, 163, 191, 238, 246, 252, 272, 273, 275, 280, 294, 314, 315, 316, 344, 380, 383, 387], "39": 75, "pl": [77, 81, 397], "38": 77, "34": [78, 321, 322, 366], "33": [79, 321, 322], "sigma_": [80, 96, 97, 99, 314, 315, 383, 387], "theta_": [80, 218, 221, 240, 241], "carrier": [80, 246], "43": 80, "40": [81, 88, 138, 188, 276, 294, 306, 336], "less": [83, 280, 283, 294, 314, 315, 319, 334, 344, 379, 380, 383, 387], "greater": [83, 283, 294, 314, 315, 371, 376, 379, 383, 387], "prevent": [84, 188, 238, 252, 276], "need": [84, 188, 276, 396, 397, 399], "done": [84, 294, 336, 396], "case": [84, 188, 252, 271, 276, 288, 293, 319, 328, 370, 371, 376], "3x": [84, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 137, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 188, 287], "summat": [84, 254], "co": [84, 138, 188, 230, 276, 335, 371, 376], "64": [84, 148, 299, 326, 405], "280": 84, "marker": [84, 138, 188, 230, 276, 346, 365, 366, 403, 404, 405, 410], "o": [84, 138, 188, 276, 403], "y1": [84, 138, 188, 276, 327], "70": [84, 326], "y2": [84, 138, 188, 276, 327], "140": [84, 306], "y3": [84, 138, 188, 276], "210": 84, "y4": [84, 138, 188, 276], "y5": [84, 138, 188, 276], "y_1": [84, 188, 276, 327], "y_2": [84, 188, 276, 327, 400], "y_3": [84, 188, 276], "y_4": [84, 188, 276], "y_5": [84, 188, 276], "win": 88, "quad": [88, 228], "le": [88, 149, 228, 280, 299, 335, 341, 344, 371, 376, 380], "truncat": 88, "same": [88, 109, 124, 135, 137, 150, 160, 162, 218, 240, 292, 314, 315, 336, 347, 349, 366, 373, 374, 380, 383, 387, 404], "deriv": 88, "fir_2": 88, "fir_6": 88, "fir_10": 88, "fir_20": 88, "fir_40": 88, "fir_80": 88, "y_axi": [88, 347, 353, 355, 363, 414], "ab": [88, 135, 160, 179, 321, 322, 400, 407, 411], "linestyl": [88, 179, 218, 226, 238, 240, 246, 252, 280, 283, 288, 344, 346, 359, 365, 367, 379, 392, 400, 403, 407, 410, 411], "theori": [88, 96, 97, 98, 100, 179, 271, 272, 273, 275, 280, 400, 407], "lfloor": [88, 108, 112, 148, 228], "rfloor": [88, 108, 112, 148, 228], "blackman": [89, 297, 298, 300, 301], "scipi": [89, 108, 163, 297, 298, 300, 301, 348, 355, 363, 400, 405, 407, 411, 413], "definit": [89, 350, 351, 352, 353, 356, 357, 364, 368], "get_window": 89, "detail": 89, "discretememorylesschannel": [90, 91, 92, 93, 94, 95, 394, 414], "memoryless": [90, 95, 305, 394, 413], "dmc": [90, 91, 92, 93, 95, 305, 394, 413, 414], "max_": [90, 288], "mutual": [90, 288, 366], "inform": [90, 246, 288, 307, 308, 310, 323, 381, 390], "pr": [95, 305], "y_j": [95, 305], "assum": [95, 96, 271, 282, 305, 314, 315, 339, 366, 378, 383, 387, 388], "ldot": [95, 305], "hypothes": [96, 271], "w": [96, 271, 282, 288, 397, 400, 403, 404, 405, 407, 408, 409, 410, 411], "sigma": [96, 97, 98, 99, 100, 271, 272, 273, 274, 275, 282, 283, 288, 321, 322, 337, 338, 384, 400, 407], "test": [96, 271, 397, 398, 413, 414], "limits_": [96, 108, 163, 271], "left": [96, 97, 98, 124, 148, 150, 163, 238, 240, 246, 252, 271, 272, 273, 275, 280, 281, 282, 283, 288, 293, 294, 309, 312, 313, 314, 315, 316, 318, 319, 321, 322, 327, 334, 335, 336, 337, 338, 341, 342, 343, 344, 371, 374, 375, 376, 378, 379, 384, 392, 400, 407], "right": [96, 97, 98, 124, 150, 163, 238, 240, 246, 252, 271, 272, 273, 275, 280, 281, 282, 283, 288, 293, 294, 309, 312, 313, 314, 315, 316, 318, 321, 322, 327, 334, 335, 336, 337, 338, 341, 342, 343, 344, 371, 374, 375, 376, 378, 379, 384, 392, 400, 407], "sim": [96, 271, 282, 288, 397, 400, 407], "chi_": [96, 97, 98, 400, 407], "2n": [96, 97, 98, 287], "detect": [96, 97, 98, 99, 100, 218, 221, 223, 224, 240, 241, 243, 244, 271, 272, 273, 274, 275, 280, 288, 292, 293, 321, 322, 334, 336, 337, 338, 344, 348, 354, 360, 380, 384, 413, 414], "q_": [96, 97, 98, 100], "chi_n": [96, 97, 98, 100], "steven": [96, 97, 98, 100, 271, 272, 273, 275], "kai": [96, 97, 98, 100, 271, 272, 273, 275], "fundament": [96, 97, 98, 100, 271, 272, 273, 275], "coher": [97, 98, 99, 100, 280, 288, 292, 293, 314, 315, 321, 322, 332, 333, 334, 336, 337, 338, 344, 380, 383, 384, 387, 401, 413, 414], "For": [97, 98, 100, 272, 273, 275, 282, 287, 294, 306, 316, 373, 374, 389, 396, 404], "1e": [97, 272, 280, 283, 293, 314, 315, 321, 322, 332, 334, 336, 337, 344, 348, 362, 379, 383, 384, 387, 400, 407, 410], "logspac": [99, 114, 169, 274, 280, 292, 314, 315, 334, 336, 337, 378, 380, 383, 387], "theoret": [99, 248, 250, 280, 334, 337, 338, 344, 345, 361, 362, 380, 384, 400, 407, 410, 413, 414], "singl": [99, 114, 169, 248, 250, 349, 409], "variou": [99, 148, 280, 292, 293, 332, 333, 336, 337, 344, 378, 397, 411], "1_000": [99, 191, 228, 282, 316, 327, 346, 349, 377, 408], "000": [99, 349], "5_000": 99, "measur": [101, 103, 281, 282, 295, 296, 309, 312, 313, 314, 315, 325, 330, 340, 342, 343, 373, 374, 375, 383, 387, 400, 407, 409, 413, 414], "accumul": [101, 179, 230, 231, 232, 234, 409, 414], "contain": [101, 182, 282, 319, 326], "add": [101, 103, 106, 226, 238, 246, 252, 282, 317, 324, 346, 349, 359, 372, 377, 394, 410, 415], "total": [101, 318, 324, 371, 372, 376, 411], "count": [101, 104, 313], "error_r": [101, 105, 106, 410], "can": [101, 103, 104, 105, 107, 209, 226, 254, 282, 313, 318, 323, 339, 349, 352, 355, 363, 374, 378, 390, 398, 400, 404, 405, 407, 410, 413, 415], "obtain": 101, "tabul": [101, 102], "ascend": [101, 106], "other": [103, 104, 105, 107, 294, 331, 380, 403, 415], "quantiti": [103, 104, 105, 106, 107], "user": [103, 104, 105, 107, 404, 405], "caution": [103, 104, 105, 107], "instanc": [103, 104, 105, 107, 226], "whatev": 106, "wa": [106, 283, 294, 314, 315, 374, 383, 387, 413], "wrapper": [108, 163], "convolv": 108, "support": [108, 163, 414], "sum_": [108, 163, 273, 275, 281, 282, 283, 292, 309, 312, 313, 321, 322, 325, 334, 336, 337, 338, 375, 384, 400, 407], "valid": [109, 316, 331, 347, 349, 358, 359], "remain": [113, 142, 306, 339], "whole": [114, 169, 411], "decad": [114, 169, 350, 351, 353, 356, 357, 404, 409], "point": [114, 169, 223, 224, 243, 244, 336, 346, 348, 355, 363], "endpoint": [114, 169, 405], "includ": [114, 169, 397, 398, 399, 413], "max_f": [114, 169], "log10": [114, 169, 411], "evenli": [114, 169], "00000000e": [114, 169, 251, 252, 405], "00": [114, 169, 251, 252, 400, 405, 407], "76562500e": [114, 169], "04": [114, 169, 326, 405, 407], "95312500e": [114, 169], "03": [114, 169, 326, 400, 405, 407], "97070312e": [114, 169], "98046875e": [114, 169], "99023438e": [114, 169], "95337172": 114, "30202676j": 114, "8178049": 114, "5759632j": 114, "6058636": 114, "79630028j": 114, "rad": [114, 169], "0000000000000002": 114, "0j": [114, 169, 227, 239, 247, 253], "sever": [114, 169, 319, 329], "200": [114, 169, 293, 306, 333, 359, 408, 410], "300": [114, 169, 293, 333, 385, 386], "400": [114, 169, 293, 306, 333], "00391660e": 114, "14686183e": 114, "17j": 114, "53081763e": 114, "88127210e": 114, "62720131e": 114, "03715849e": 114, "83622458e": 114, "27280811e": 114, "u": [121, 176, 319, 364, 392, 393, 404, 405, 413], "regist": [124, 125, 136, 150, 151, 161, 287, 331, 393], "reciproc": [124, 128, 129, 150, 153, 154], "recurr": [124, 128, 132, 136, 150, 153, 157, 161, 287], "y_t": [124, 150, 287], "y_": [124, 150, 287], "t_0": [124, 150], "t_1": [124, 150], "addition": [124, 413], "next": [124, 135, 150, 160, 370, 380, 398], "revers": [124, 128, 129, 135, 153, 154, 160], "gardner": [124, 150, 287], "2019": [124, 150, 287], "applic": [124, 150, 287], "cryptographi": [124, 150, 287], "berlekamp_massei": [124, 150, 287, 393, 414], "primit": [124, 150, 319, 328, 329, 331, 370, 393], "mathrm": [124, 150, 271, 284, 287, 319, 321, 322, 323, 329, 331, 334, 336, 337, 338, 384, 390, 400, 407], "print": [124, 125, 137, 150, 151, 162, 287, 326, 400, 403, 404, 405, 407, 409], "initial_st": [124, 125, 131, 137, 150, 151, 156, 162, 287], "5x": [124, 125, 129, 137, 150, 151, 154, 162, 287], "13": [124, 135, 138, 150, 160, 181, 188, 226, 238, 246, 252, 271, 272, 273, 275, 284, 289, 292, 320, 321, 322, 334, 337, 366, 369, 374], "14": [124, 135, 138, 150, 160, 181, 226, 238, 246, 252, 272, 289, 320, 321, 322, 336, 337, 344, 369, 374, 390], "15": [124, 135, 138, 150, 160, 181, 218, 226, 238, 246, 252, 274, 289, 320, 321, 322, 329, 337, 369, 374, 389, 400], "17": [124, 138, 150, 226, 251, 252, 313, 321, 322, 337, 341, 369, 374, 396], "18": [124, 138, 150, 321, 322, 323, 337, 369, 374, 390, 396, 410], "19": [124, 138, 150, 321, 322, 337, 369, 374], "21": [124, 150, 280, 321, 322, 334, 336, 337, 341, 366, 380], "10x": [124, 150], "22": [124, 150, 321, 322, 337], "24": [124, 150, 321, 322], "classmethod": [124, 125, 150, 151, 163, 164, 179, 191], "fieldarrai": [124, 125, 126, 130, 131, 134, 135, 136, 150, 151, 155, 156, 159, 160, 161, 284, 287, 319, 323, 329, 331, 390, 393, 397], "self": [124, 125, 150, 151, 163, 164, 179, 191], "to_galois_lfsr": [124, 137], "glfsr": [124, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 287, 393, 414], "type": [124, 130, 135, 150, 155, 160, 287, 296, 313, 321, 322, 330, 334, 336, 337, 338, 339, 355, 360, 363, 384, 388, 397, 414], "subclass": [124, 130, 150, 155], "arithmet": [124, 129, 130, 150, 154, 155], "coeff": [125, 136, 151, 161], "irreducible_poli": [127, 152], "unaffect": [131, 156], "minim": [132, 157, 280, 284, 287, 393], "modifi": [133, 134, 158, 159, 414], "view": [133, 158, 397, 413], "direct": [135, 160, 218, 224, 240, 244, 414], "backward": [135, 160, 179, 180, 414, 415], "end": [135, 160, 238, 252, 271, 288, 319, 328, 349, 370, 371, 376, 385, 397, 400, 407], "iter": [135, 160, 370, 393], "fibonacci_lfsr": [137, 162], "galois_lfsr": [137, 162], "ident": [137, 162], "structur": 138, "angular": 138, "179": 138, "farrow1": 138, "quadrat": [138, 317, 414], "farrow2": 138, "cubic": 138, "farrow3": 138, "quartic": [138, 414], "farrow4": 138, "compar": [138, 191, 218, 228, 240, 248, 250, 280, 292, 297, 298, 299, 300, 301, 321, 322, 331, 334, 336, 337, 344, 352, 362, 373, 374, 380, 400, 407, 411], "vari": [138, 231], "xlim": [138, 294, 306, 314, 315, 321, 322, 383, 387, 389, 408, 409, 411], "comparison": [138, 218, 240, 280, 344, 397], "run": [138, 396], "30": [138, 188, 191, 226, 228, 238, 246, 252, 276, 283, 288, 306, 321, 322, 323, 331, 336, 350, 352, 364, 379, 380, 385, 386, 405, 414], "concaten": [138, 405], "should": [144, 218, 226, 373, 374, 398], "three": [144, 403, 411], "21719": 148, "examin": [148, 226, 238, 246, 252, 319, 329, 336, 400, 407], "flat": [148, 299], "32": [148, 280, 299, 321, 322, 323, 334, 390, 403, 407], "128": 148, "loc": [148, 336, 337], "effect": [148, 294, 314, 383, 414], "outsid": [148, 405], "symmetri": 148, "about": [148, 297, 298, 366, 373, 374, 399], "band": 148, "worst": [148, 293], "1f": 148, "around": [148, 227, 239, 247, 253], "perfectli": 148, "exactli": [148, 334], "best": [149, 299, 373, 374], "append": [149, 299, 385, 408], "c_2": 150, "26": [150, 321, 322, 396, 414], "to_fibonacci_lfsr": [150, 162], "lfilter": 163, "b_i": [163, 166, 168, 179, 191, 350, 351, 352, 353, 356, 357, 364, 368, 405], "a_j": [163, 166, 167, 179, 191, 350, 351, 352, 353, 356, 357, 364, 368, 405], "These": [163, 238, 246, 252, 293, 367, 398, 409], "a_0": 163, "zerospol": [163, 164, 169, 179, 191, 350, 351, 352, 353, 356, 357, 364, 368, 405], "b_tap": [163, 168, 179, 191, 405], "a_tap": [163, 167, 179, 191, 405], "conj": [169, 350, 351, 352, 353, 356, 357, 364, 368, 405, 409], "4722987": 169, "47271105": 169, "0041658j": 169, "47394825": 169, "00830241j": 169, "47601067": 169, "01238051j": 169, "472298696877605": 169, "36961426": 169, "9678537j": 169, "57338213": 169, "77694738j": 169, "52496713": 169, "3885743j": 169, "51520024": 169, "1706839j": 169, "accordingli": 179, "dc": [179, 299], "trapezoid": [179, 180, 414], "forward": [179, 180, 230, 237, 414], "iir_back": 179, "iir_trap": 179, "iir_forw": 179, "y_back": 179, "y_trap": 179, "y_forw": 179, "height": 180, "mapsto": [182, 186, 187, 193, 194, 207, 226, 238, 246, 251, 252, 365], "th": [182, 186, 187], "place": [182, 186, 187], "recommend": [188, 413], "wai": [188, 398], "zoh": [188, 189, 190, 276, 278, 279], "matlab": [188, 189, 190, 276, 278, 279, 413], "2p": [189, 278], "ramp": [189, 209, 278], "advanc": [189, 278, 380], "approxim": [191, 192, 280, 294, 344, 413, 414], "rememb": 191, "scale": [191, 218, 314, 315, 321, 322, 350, 351, 353, 355, 356, 357, 363, 383, 387, 400, 404, 405, 407], "\u03b1": 191, "35": [191, 228, 321, 322, 409], "y_fir": [191, 228], "y_iir": [191, 228], "map_symbol": [193, 199, 226, 238, 246, 252, 282, 313, 327, 346, 377, 408, 409, 410, 414], "decide_symbol": [193, 197, 226, 238, 246, 252, 409, 410, 414], "a_tild": [193, 197, 226, 238, 246, 252, 409, 410], "mle": [193, 197, 226, 238, 246, 252], "mathbb": [193, 194, 207, 226, 238, 246, 251, 252, 283, 288, 365, 392], "roll": [194, 239, 247, 253, 411], "off": [194, 239, 247, 253], "loopfilt": [209, 210, 211, 212, 213, 214, 215, 216, 217, 395, 409, 414], "ppi": [209, 211, 395], "track": 209, "constant": [209, 226, 230, 232, 234, 294, 314, 315, 317, 336, 355, 363, 383, 387, 400, 405, 407, 409], "cannot": [209, 336], "chirp": 209, "proportional_gain": [209, 216], "integral_gain": [209, 214], "underli": [209, 213], "mlped": [218, 219, 220, 221, 222, 223, 224, 225, 395, 409, 414], "ml": [218, 222, 395, 409], "aid": [218, 223, 240, 243], "known": [218, 221, 240, 241, 282, 293, 323, 390], "da": [218, 240], "im": 218, "re": [218, 271, 321, 322, 334, 336, 337, 338, 384, 400, 407], "qpsk": [218, 238, 240, 246, 248, 249, 250, 252, 282, 313, 345, 346, 349, 361, 365, 366, 377, 409, 413, 414], "a_rx": 218, "a_ref": 218, "da_error": [218, 240], "data_aided_error": [218, 223, 240, 243], "dd_error": [218, 240], "decision_directed_error": [218, 224, 240, 244], "grid": [218, 240, 367], "observ": [218, 240, 299, 337, 338, 341, 349, 384], "slope": [218, 240, 294], "rx": [218, 219, 222], "veri": [218, 331, 373, 374, 413], "becaus": [218, 323, 334, 390], "unambigu": [218, 240], "a_receiv": [218, 219, 222], "a_refer": [218, 220, 222], "simul": [218, 223, 224, 240, 243, 244, 410, 413], "scheme": [218, 223, 224, 226, 238, 240, 243, 244, 246, 252, 414], "modem": [223, 224, 226, 238, 243, 244, 246, 252], "n_point": [223, 224, 243, 244], "similar": [226, 238, 252, 293, 411], "One": [226, 238, 252, 411], "distinct": [226, 238, 252], "result": [226, 238, 252, 281, 309, 316, 341, 342, 343, 371, 375, 376, 400, 407, 410], "envelop": [226, 314, 315, 374, 404, 405], "consid": [226, 326], "cpfsk": 226, "45": [226, 227, 238, 239, 246, 249, 282, 313, 327, 335, 346, 349, 365, 366, 377, 408, 409, 410], "uint8": [226, 238, 246, 252, 339, 388], "complex_symbol": [226, 238, 246, 252], "70710678": [226, 238, 246], "70710678j": [226, 238, 246], "tx_sampl": [226, 238, 246, 252, 349], "50": [226, 238, 246, 252, 296, 330, 333, 365, 366, 374, 385, 386, 403, 408], "like": [226, 288, 398, 413, 414], "figsiz": [226, 238, 246, 252, 349, 350, 367, 380, 404, 405, 409], "suptitl": [226, 238, 246, 252, 349, 380, 409, 410], "noiseless": [226, 238, 246, 252, 313], "trajectori": 226, "although": 226, "lead": [226, 327, 410], "gmsk": 226, "rx_sampl": [226, 238, 246, 252, 349], "manual": [226, 238, 246, 252, 397, 399], "mf": [226, 238, 246, 252, 349], "mf_sampl": [226, 238, 246, 252], "noisi": [226, 238, 246, 252, 282], "last": [226, 238, 339, 396], "rx_symbol": [226, 238, 246, 252], "rx_complex_symbol": [226, 238, 246, 252], "_": [226, 238, 246, 252, 280, 292, 313, 336, 400, 407], "absolut": [227, 230, 232, 235, 239, 253, 317, 362, 378, 400, 407], "start": [227, 239, 247, 253, 396], "go": [227, 239, 247, 253], "counter": [227, 239, 247, 253], "clockwis": [227, 239, 247, 253], "circl": [227, 239, 247, 253, 405], "increment": [230, 231, 232, 234, 409], "sin": [230, 282, 293, 371, 376, 385], "Then": 230, "fsk": 230, "60": [230, 283, 294, 297, 298, 300, 301, 379, 411], "repeat": 230, "cp": 230, "57": 230, "bpsk": [230, 248, 250, 288, 345, 361, 362, 373, 374, 408], "format": [231, 284, 319, 323, 329, 331, 390, 414], "option": [231, 350, 351, 353, 355, 356, 357, 363, 414], "convent": [238, 252, 397], "independ": [238, 283, 379, 380], "apart": 238, "taken": [238, 246, 252, 254], "jq": 238, "begin": [238, 252, 271, 288, 319, 328, 349, 370, 371, 376, 400, 407], "nyquist": [238, 246, 252, 297, 298, 300, 301, 306, 349, 389, 411], "isi": [238, 246, 252, 349], "present": [238, 246, 252, 337, 400, 407], "persist": [238, 246, 252, 346, 349, 359, 410, 414], "cascad": [238, 246, 252, 349], "therefor": [238, 246, 252, 319, 373, 411], "remov": [238, 246, 252, 294, 314, 315, 335, 355, 363, 383, 387, 414], "without": [238, 246, 252, 314, 315, 383, 387, 414], "heurist": [240, 395, 409, 414], "dd": [240, 409, 414], "encod": [246, 248, 250, 303, 304, 413], "ge": [247, 253, 280, 344, 371, 376, 380], "were": [248, 250, 294, 314, 315, 383, 387], "simon": [248, 250], "alouini": [248, 250], "fade": [248, 250], "optimum": [248, 250], "psk8": [248, 250, 345, 361, 410], "psk16": [248, 250, 345, 361, 410], "de": [248, 250, 409, 414], "se": [250, 361], "00j": [251, 252], "07106781e": [251, 252], "01j": [251, 252], "12323400e": [251, 252], "83697020e": 251, "22464680e": [251, 252], "16j": [251, 252], "annot": [251, 283, 348, 365, 379, 397, 414], "rotat": [252, 283, 317, 335, 379, 409], "rel": [252, 392, 411], "2m": 252, "displaystyl": [252, 371, 376], "pi4_qpsk": 252, "partit": [254, 256, 260, 263], "befor": [265, 268, 334, 336, 409, 415], "decomposit": [265, 268, 414], "complementari": [269, 270], "cumul": [269, 270], "exce": [269, 337, 338], "exceed": [269, 270], "15865525393145707": [269, 270], "158655": [269, 270], "0000010494310452": [269, 270], "perfect": 271, "knowledg": 271, "cn": [271, 282, 400, 407], "sqrt": [271, 272, 273, 275, 280, 288, 312, 313, 314, 315, 318, 321, 322, 373, 374, 375, 376, 383, 387, 392, 400, 407, 408, 409, 411], "____": 276, "combin": [280, 319, 334, 344, 380], "ln": [280, 318], "62": [280, 326], "log_": [280, 281, 292, 293, 296, 309, 316, 340, 342, 343, 344, 375], "54": [280, 326], "44": [280, 283, 379], "12ab": 280, "7b": 280, "claim": [280, 344, 380], "leq": [280, 288, 344, 380], "8096": 280, "law": [280, 321, 322, 334, 336, 337, 338, 344, 384, 414], "find": [280, 287, 393], "wide": 280, "mark": [280, 344], "richard": [280, 344], "form": [280, 288], "www": [280, 297, 298, 299, 300, 301, 302, 318, 323, 380, 390], "mathwork": [280, 297, 298, 299, 300, 301, 302, 318, 323, 380, 390], "com": [280, 297, 298, 299, 300, 301, 302, 318, 323, 380, 390, 397, 398, 413], "help": [280, 297, 298, 299, 300, 301, 302, 318, 323, 380, 390], "html": [280, 297, 298, 299, 300, 301, 302, 318, 323, 380, 390, 396], "semilogx": [280, 292, 334, 336, 344, 360, 380], "gca": [280, 321, 322, 400, 403, 407, 410], "set_prop_cycl": [280, 321, 322, 400, 403, 407, 410], "nfrom": 280, "solid": [280, 347, 359, 366], "dash": [280, 347, 366], "against": [280, 344], "post": [280, 344], "fig": [280, 344, 380], "ax": [280, 281, 309, 312, 325, 340, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 380, 414], "subplot": [280, 327, 344, 349, 380, 409, 410], "sharei": [280, 344], "31": [280, 321, 322, 344, 404], "astyp": [280, 336, 344], "95": [280, 313, 344], "snr_ref": [280, 336, 344, 407], "set_xlabel": [280, 344, 380], "set_ylabel": [280, 344, 380], "g_": [280, 336, 344, 407], "set_titl": [280, 344, 380], "g_nc": [280, 336, 407], "axi": [281, 309, 312, 325, 340, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 400, 403, 407, 414], "avg": [281, 282, 340], "along": [281, 287, 309, 312, 325, 340, 342, 414], "entir": [281, 309, 312, 325, 340, 342], "decibel": [281, 296, 309, 330, 342, 343, 375, 413, 414], "ad": [282, 346, 349, 359, 397, 413, 414], "explicitli": [282, 336], "set": [282, 314, 315, 316, 319, 323, 329, 346, 355, 359, 363, 365, 367, 380, 383, 387, 390, 397, 399, 405], "zorder": [282, 377], "infti": [282, 288, 294, 314, 315, 373, 374, 383, 387], "nand": 282, "regim": [283, 379], "logarithm": [283, 350, 351, 353, 355, 356, 357, 379, 404, 405], "semilogi": [283, 345, 360, 361, 378, 379], "axvlin": [283, 379, 400, 407], "xytext": [283, 379], "textcoord": [283, 379], "pixel": [283, 379], "barker_cod": [284, 393, 414], "bipolar": [284, 319, 323, 329, 331, 347, 390, 414], "barker": [284, 393, 413, 414], "exist": 284, "ideal": [284, 373, 374, 410], "auto": [284, 319, 323, 329, 331, 347, 351, 353, 355, 356, 357, 363, 390, 392, 414], "sidelob": [284, 297, 298, 300, 301, 323, 331, 347, 371, 376, 390, 392], "circular": [284, 319, 323, 329, 331, 347, 390, 392], "berlekamp": [287, 414], "massei": [287, 414], "algorithm": [287, 294, 414], "depend": [287, 396, 397, 399, 414], "least": 287, "jason": 287, "sach": 287, "uniniti": 287, "part": [287, 347, 366, 409], "vi": 287, "sing": 287, "jame": 287, "synthesi": [287, 413, 414], "bch": 287, "below": [287, 378, 396, 404, 405], "reproduc": 287, "soft": 288, "1d": [288, 359], "f_x": 288, "entropi": 288, "condit": [288, 400, 407], "margin": 288, "f_y": 288, "dy": 288, "dx": 288, "sinc": [288, 293, 332, 333, 341, 373, 396, 410], "simplifi": [288, 397], "solv": [288, 336], "conveni": [288, 404, 405], "upper": [288, 336, 337], "yang": 288, "ub": 288, "giusepp": 288, "durisi": 288, "pei": 288, "simpl": 288, "tom\u00e1\u0161": 288, "filler": 288, "51": [288, 336], "c_ub": 288, "log2": 288, "c_hard": 288, "c_soft": 288, "binary_cod": [289, 393, 414], "t_c": [292, 293, 332, 333], "b_c": [292, 293], "unitless": 292, "n_c": [292, 321, 322, 334, 336, 337, 338, 384, 400, 414], "g_c": [292, 400], "reduct": [292, 293, 336, 400, 407], "simpli": 292, "010299956639812": 292, "010299956639813": 292, "due": [293, 336, 411], "dure": 293, "scallop": 293, "235": [293, 333], "8038919141626675": 293, "mhz": [293, 296, 330, 383, 387], "\u03bc": [293, 314, 315], "25e": 293, "1e6": [293, 314, 315, 383, 387, 410], "9120975839632417": 293, "dft": 293, "commonli": 293, "suppos": [293, 334], "long": [293, 373, 374, 397], "khz": [293, 383, 387], "occur": 293, "500": [293, 333, 385, 386, 409], "unwindow": 293, "well": 293, "9223975406030527": 293, "pad": 293, "twice": 293, "14335017": 293, "57922366": 293, "32626966": 293, "42007077": 293, "92239754": 293, "2e3": [293, 316], "5e": [293, 332], "2e": [293, 332, 400, 407], "55": [293, 341, 366, 414], "1e3": [293, 316, 332, 333, 335, 385], "gamma_1": [294, 314, 383], "gamma_2": [294, 314, 383], "composit": 294, "much": [294, 411], "smaller": [294, 318, 336, 348, 371, 376, 411], "term": [294, 314, 315, 383, 387], "stein": [294, 314, 315, 383, 387], "rearrang": [294, 314, 315, 383, 387], "incorpor": [294, 314, 315, 383, 387], "seymour": 294, "ambigu": 294, "intercept": 294, "knee": 294, "locat": [294, 396, 399], "max": [294, 313, 342, 343, 400, 407], "cf": 295, "v_": [295, 296, 330, 343, 375], "voltag": [296, 330, 343, 375, 400, 407, 413], "x_": [296, 330], "77": [296, 326, 330], "50e6": 296, "76": [296, 326, 400], "98970004336019": 296, "mw": [296, 330], "dbm": [296, 330], "dbv": [296, 330], "020599913279624": 296, "center_freq": [297, 298], "hann": [297, 298, 300, 301, 355, 363], "chebyshev": [297, 298, 300, 301], "side": [297, 298, 318, 319, 350, 351, 353, 355, 356, 357, 363, 404, 405, 408, 411], "No": [297, 298, 300, 301], "blackmanharri": [297, 298, 300, 301], "chebwin": [297, 298, 300, 301], "dsp": [297, 298, 299, 300, 301, 302, 413], "designbandpassfir": 297, "h_ham": [297, 298, 300, 301], "h_hann": [297, 298, 300, 301], "h_blackman": [297, 298, 300, 301], "h_blackman_harri": [297, 298, 300, 301], "h_chebyshev": [297, 298, 300, 301], "h_kaiser": [297, 298, 300, 301], "larger": [298, 324, 327, 346, 365, 372], "designbandstopfir": 298, "tau": 299, "l_": 299, "designfracdelayfir": 299, "h_8": [299, 371, 376], "h_16": [299, 371, 376], "h_32": 299, "h_64": 299, "cutoff_freq": [300, 301], "cutoff": [300, 301], "f_c": [300, 301, 317], "designhighpassfir": 300, "designlowpassfir": 301, "designmultiratefir": 302, "oplu": [303, 304, 319, 325], "uncod": 304, "doe": [306, 389], "anti": [306, 389, 414], "alias": [306, 389, 414], "x1": [306, 319, 323, 329, 390], "x2": [306, 319, 323, 329, 390], "130": 306, "x3": [306, 319, 323, 329, 390, 392], "spectrum": [306, 350, 351, 353, 355, 356, 357, 363, 373, 383, 385, 386, 387, 389], "content": 306, "abov": [306, 389], "fold": 306, "cw": 306, "unalias": 306, "2048": [306, 385, 386, 389], "qam": [307, 308, 310, 381], "249387366082999": [307, 308], "020599913279625": [307, 382], "7506126339170005": [310, 381], "979400086720376": [310, 311], "norm": [313, 318, 324, 359, 371, 372, 376, 400, 407], "sourc": 313, "percentil": [313, 363], "978787339814255": 313, "944492776001427": 313, "212793052928006": 313, "95th": 313, "42575826303131": 313, "inst_evm": 313, "hist": [313, 321, 322, 400, 407], "histogram": [313, 346, 349, 359], "s_2": [314, 383], "mu_t": [314, 315, 374], "dt": [314, 315, 374], "centroid": [314, 315, 373, 374, 383, 387], "ensur": [314, 315, 383, 387, 409], "suffici": [314, 315, 383, 387], "correctli": [314, 315, 383, 387], "identifi": [314, 315, 383, 387], "high": [314, 315, 323, 336, 383, 387, 390], "nan": [314, 315, 336, 383, 387], "precis": [314, 315, 323, 336, 374, 383, 387, 390], "loglog": [314, 315, 360, 383, 387], "1e5": [314, 315, 383, 387], "1e8": [314, 315, 383, 387], "1e0": [314, 315, 362, 383, 387, 410], "nstandard": [314, 315, 383, 387], "path": [316, 413], "meter": [316, 341, 391], "transmitt": 316, "far": 316, "impli": 316, "possibl": [316, 413], "km": 316, "link": [316, 413, 414], "ghz": [316, 341, 391], "1e9": [316, 341, 391], "92": 316, "44778322188337": 316, "doubl": [316, 341], "98": 316, "468383135163": 316, "2e9": 316, "up": [316, 397], "frequency_offset": [317, 394, 414], "offset_r": 317, "old": [317, 377], "cycl": [317, 347, 366], "now": [317, 334, 385, 386, 403, 414], "unwrap": [317, 357, 409], "freq_rat": 317, "thought": [318, 415], "wider": 318, "gaussdesign": 318, "h_0p1": [318, 371, 376], "h_0p2": 318, "h_0p3": 318, "gold_cod": [319, 328, 370, 393], "poly1": [319, 328, 370, 393], "poly2": [319, 328, 393], "verifi": 319, "gold": [319, 393], "prefer": [319, 328, 370, 393], "pair": [319, 328, 370, 393], "found": 319, "preferred_pair": [319, 328, 370, 393], "is_preferred_pair": [319, 328, 370, 393], "formula": 319, "otherwis": 319, "xor": 319, "pn": [319, 328, 370], "good": 319, "cross": [319, 323, 328, 329, 331, 370, 390, 392], "guarante": [319, 415], "There": [319, 328, 329, 370, 415], "divis": [319, 328, 370], "63": [319, 326, 329, 331, 347], "gray_cod": [320, 393, 414], "jn_c": [321, 322, 334, 336, 337, 338, 384], "affect": [321, 322, 334, 336, 337, 338, 371, 376, 384], "allow": [321, 322, 334, 337, 338, 373, 374, 384, 398, 399, 413], "a2": [321, 322, 400, 407], "1622776601683795": [321, 322], "x_h0": [321, 322, 400, 407], "rng": [321, 322, 400, 407], "100_000": [321, 322, 346, 400, 407, 410], "x_h1": [321, 322, 400, 407], "9061938024368232": [321, 322, 337, 384], "8912709229530473": [321, 322], "z_h0": [321, 322], "z_h1": [321, 322], "histtyp": [321, 322, 400, 407], "5174271293851465": [321, 322, 337, 384], "7229165664874564": [321, 322], "302585092994046": [321, 322, 337, 384], "7229165664874556": [321, 322], "2815515655446004": [321, 322], "6903095079298097": [321, 322], "27": [321, 322, 323, 414], "28": [321, 322, 409, 414], "29": [321, 322, 404], "6448536269514744": [321, 322], "5533811909871471": [321, 322], "70554345409542": [321, 322], "5533811909871473": [321, 322], "36": [321, 322], "37": [321, 322], "hadamard_cod": [323, 390, 393, 414], "hadamard": [323, 390, 393, 413, 414], "comm": [323, 390], "hadamardcod": 323, "walsh": [323, 390, 393, 413, 414], "thei": [323, 331, 390, 415], "walsh_cod": [323, 390, 393, 414], "uniform": [323, 390], "fact": [323, 390], "quit": [323, 390], "larg": [323, 329, 331, 390, 397], "misalign": [323, 390], "reason": [324, 372, 396], "h_half_sin": 324, "displai": [326, 346, 350, 351, 353, 355, 356, 357, 363, 365], "line": [326, 347, 366, 367, 397, 408], "quick": 326, "brown": 326, "fox": 326, "jump": 326, "lazi": 326, "dog": 326, "00000000": 326, "68": 326, "65": 326, "71": 326, "69": 326, "6b": 326, "72": 326, "6f": 326, "6e": 326, "00000010": 326, "66": 326, "78": 326, "6a": 326, "6d": 326, "73": 326, "74": 326, "00000020": 326, "6c": 326, "61": 326, "7a": 326, "79": [326, 344], "67": 326, "he": 326, "02": [326, 405, 408, 409], "00000004": 326, "05": [326, 403, 405, 409], "06": [326, 336, 348], "07": 326, "08": 326, "00000008": 326, "09": 326, "0a": 326, "iq_imbal": [327, 394, 414], "iq": [327, 394, 413], "imbal": [327, 394, 413], "compon": [327, 385, 386, 389], "g_i": 327, "180": 327, "g_q": 327, "x_q": 327, "horizont": 327, "stretch": 327, "while": [327, 411], "vertic": 327, "northwest": 327, "northeast": 327, "deg": [327, 409], "boolean": 328, "kasami_cod": [329, 393, 414], "kasami": [329, 393, 413, 414], "small": [329, 411], "50118723": 330, "36272725": 330, "9952623149688795": 330, "m_sequenc": [331, 347, 393, 414], "interpret": 331, "maximum_length_sequ": 331, "just": 331, "6560": 331, "lag": [331, 347], "low": [331, 336], "integration_tim": 332, "techniqu": [332, 333], "442": 332, "2433896262681": 332, "3e": 332, "24338963": 332, "221": 332, "12169481": 332, "147": 332, "41446321": 332, "10e": [332, 377, 400], "0018818867640235891": 333, "inf": 333, "00442243": 333, "00221122": 333, "00147414": 333, "00110561": 333, "00088449": 333, "183490056794499": 334, "267486807285799": 334, "732513192714245": 334, "satisfi": 335, "extrapol": 336, "necessari": [336, 396], "slightli": 336, "referenc": 336, "lack": 336, "let": 336, "499445060713011": 336, "666092814306324": 336, "410342926869486": 336, "parameter": 336, "better": [336, 374], "0e": [336, 337], "mid": [337, 338], "7630284641923553": 337, "5414214845561176": 337, "541421484556116": 337, "absent": 338, "07864960352514258": 338, "3678794411714425": 338, "36787944117144245": 338, "dtypelik": [339, 388], "signific": [339, 388], "enough": 339, "fill": 339, "smallest": 339, "unsign": 339, "diamet": 341, "eta": 341, "dbi": 341, "arcsin": 341, "83": 341, "dish": 341, "810210290266568": 341, "437435887991374": 341, "antenna": [341, 413], "we": [341, 349, 400, 407, 413], "830810203546193": 341, "529544741425365": 341, "253": 344, "46": 344, "0183": 344, "999": 344, "kwarg": [345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368], "keyword": [345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 404, 405, 414], "pyplot": [345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 367, 368, 400, 403, 404, 405, 407, 408, 409, 410, 411], "colorbar": [346, 349, 359], "scatter": [346, 380], "overwritten": [346, 359, 363, 365], "histogram2d": [346, 359], "pcolormesh": [346, 359, 363], "cmap": [346, 359], "rainbow": [346, 359], "show_zero": [346, 359], "mag": 347, "diff": [347, 366, 408], "_ax": [347, 349, 354, 358, 359, 360, 362], "imaginari": [347, 366], "share": [347, 366], "stat": [348, 400, 407], "shade": [348, 363], "p_h0": 348, "p_h1": 348, "tail": 348, "longer": [348, 349, 371, 376, 385], "intersymbol": 349, "interfer": 349, "ignor": [349, 397], "transient": 349, "insight": 349, "open": [349, 413], "n_time": [350, 405], "n_freq": 350, "x_axi": [350, 351, 353, 355, 356, 357, 404, 405, 408, 409, 414], "n_t": 350, "n_f": 350, "h_srrc": [350, 351, 352, 353, 356, 357, 364, 368, 410], "select": [351, 353, 355, 356, 357, 363, 397], "x_label": 354, "overlap": [355, 363, 408], "detrend": [355, 363], "median": 355, "segment": [355, 363], "256": [355, 363], "trend": [355, 363], "stride": 359, "collect": 359, "linecollect": 359, "linewidth": [359, 367, 392], "800": 359, "nomin": [362, 378, 379], "201": 362, "vmin": 363, "10th": 363, "vmax": 363, "100th": 363, "gouraud": 363, "represent": [365, 414], "markers": 365, "exclus": 366, "10e3": 366, "uniformli": 366, "style": 367, "revert": 367, "rcdefault": 367, "_rc_param": 367, "rc_param": 367, "constrained_layout": 367, "h_pad": 367, "w_pad": 367, "max_open_warn": 367, "titleweight": 367, "bold": 367, "arrang": 369, "notion": 369, "demonstr": 369, "matric": 369, "yield": 370, "list": 370, "excess": [371, 376, 411], "narrow": [371, 373, 376], "expens": [371, 376], "higher": [371, 376, 411], "h_0p5": [371, 376], "h_0p9": [371, 376], "h_4": [371, 376], "h_rect": [372, 411], "spectra": 373, "mu_f": [373, 383, 387], "df": [373, 383, 387], "symbol_r": [373, 374], "2886751345948129": [373, 374], "x_rect": [373, 374], "7446372175904691": 373, "make": [373, 374, 409, 415], "closer": 373, "x_srrc": [373, 374], "29088345066048465": 373, "oversampl": 374, "durat": 374, "n_symbol": [374, 408], "28864626708135344": 374, "28865329576550935": 374, "edg": 374, "x_srrc_env": 374, "len": 374, "4219690131724645": 374, "sample_rate_offset": [377, 394, 414], "ppm": [377, 414], "100e": 377, "59": 378, "591745389548616": 378, "fec": 378, "shown": 378, "21002545": 378, "8174569": 378, "54974021": 378, "56859734": 378, "85986396": 378, "30533298": 378, "fluctuat": 380, "dwell": 380, "decorrel": 380, "rayleigh": 380, "mani": [380, 390, 397], "domin": 380, "within": [380, 411], "chi": [380, 400, 407], "freedom": [380, 400, 407], "99": 380, "amalia": 380, "barrio": 380, "methodologi": 380, "radar": 380, "propag": 380, "apm": 380, "enumer": 380, "1e7": [383, 387], "250": [385, 386, 409], "ksp": [385, 386], "conjug": [385, 386, 405], "150": [385, 386, 410], "2f_": 386, "asymmetr": 386, "copi": 389, "walshcod": 390, "299792458": 391, "zadoff_chu_sequ": [392, 393, 414], "zadoff": [392, 393, 413, 414], "chu": [392, 393, 413, 414], "prime": 392, "gcd": 392, "ne": 392, "cyclic": 392, "x_u": 392, "2q": 392, "mod": 392, "e2": 392, "93chu_sequ": 392, "x_3": 392, "139": 392, "x_5": 392, "x5": 392, "sphinx": 396, "immateri": 396, "theme": 396, "store": [396, 398, 399], "txt": [396, 397, 398, 399], "some": 396, "version": [396, 398, 413, 414], "aren": 396, "resolut": 396, "minut": 396, "ci": 396, "myst": 396, "parser": 396, "updat": [396, 414], "git": [396, 398], "math": 396, "dollar": 396, "ipykernel": 396, "nb": 396, "pickleshar": 396, "switch": 396, "pip": [396, 397, 398, 399, 413], "python3": [396, 397, 398, 399, 405, 413], "built": 396, "command": [396, 397], "dirhtml": 396, "home": [396, 405, 411], "page": 396, "site": [396, 405], "directori": [396, 398], "get": 396, "webpag": 396, "webserv": 396, "easili": [396, 397, 399, 404, 405], "python": [396, 413, 414], "server": 396, "8080": 396, "access": 396, "web": 396, "browser": 396, "localhost": 396, "librari": [397, 398, 399, 403, 410, 413, 415], "ruff": [397, 398, 414], "lint": [397, 398], "your": [397, 399, 409, 413], "develop": [397, 398, 399], "dev": [397, 399], "pyproject": [397, 399], "toml": [397, 398, 399], "tool": [397, 399, 413], "src": [397, 411], "extend": 397, "ipynb": 397, "exclud": 397, "build": [397, 413], "dist": 397, "_version": 397, "py": [397, 399, 405, 409, 411], "120": 397, "doc": 397, "pycodestyl": 397, "warn": 397, "pyflak": 397, "pyupgrad": 397, "flake8": 397, "bugbear": 397, "dtz": 397, "datetimez": 397, "pydocstyl": 397, "isort": 397, "pylint": [397, 414], "npy": 397, "rule": 397, "ruf": 397, "perf": 397, "perflint": 397, "d200": 397, "fit": 397, "d205": 397, "blank": 397, "summari": 397, "d212": 397, "multi": 397, "e501": 397, "too": 397, "e713": 397, "e714": 397, "plr2004": 397, "magic": 397, "plr0913": 397, "plr5501": 397, "collaps": 397, "els": [397, 407, 408], "plr0912": 397, "plr0915": 397, "statement": 397, "plw0603": 397, "global": 397, "up006": 397, "pep585": 397, "render": 397, "wrong": 397, "d213": 397, "file": [397, 399], "__init__": 397, "f401": 397, "f403": 397, "d415": 397, "googl": 397, "check": 397, "hook": 397, "config": [397, 400, 403, 404, 405, 407, 408, 409, 410, 411], "yaml": 397, "repo": [397, 398, 405, 411], "github": [397, 413], "rev": 397, "v2": 397, "id": 397, "arg": 397, "maxkb": 397, "fixer": 397, "trail": 397, "whitespac": 397, "astral": 397, "sh": 397, "v0": 397, "enabl": [397, 414], "disabl": 397, "uninstal": 397, "extens": 397, "vscode": [397, 399], "json": [397, 399], "you": [397, 398, 399, 409, 413], "edit": [397, 405], "latest": [398, 413], "releas": [398, 414], "main": [398, 411], "mhostett": [398, 413, 414], "Or": [398, 399], "pre": 398, "To": 398, "activ": 398, "benefici": 398, "fashion": 398, "immedi": 398, "seen": 398, "upon": 398, "clone": 398, "wherev": 398, "flag": 398, "packag": [398, 405, 413], "commit": 398, "pytest": [398, 399], "cov": 398, "xdist": 398, "benchmark": 398, "ini_opt": 399, "minvers": 399, "addopt": 399, "showloc": 399, "testpath": 399, "execut": 399, "test_psk": 399, "instruct": 399, "invok": 399, "infrastructur": 399, "debug": 399, "inlinebackend": [400, 403, 404, 405, 407, 408, 409, 410, 411], "print_figure_kwarg": [400, 403, 404, 405, 407, 408, 409, 410, 411], "facecolor": [400, 403, 404, 405, 407, 408, 409, 410, 411], "inlin": [400, 403, 404, 405, 407, 408, 409, 410, 411], "widget": [400, 403, 404, 405, 407, 408, 409, 410, 411], "show": [400, 403, 404, 405, 407, 408, 409, 410, 411], "2f": [400, 407, 408], "00e": [400, 407], "w_1": [400, 407], "a_1": [400, 407], "sigma_1": [400, 407], "def": [400, 403, 407, 408, 410], "create_x": [400, 407], "a1": [400, 407], "sigma1": [400, 407], "x1_h0": [400, 407], "x1_h1": [400, 407], "x1_h0_real_theori": [400, 407], "x1_h1_real_theori": [400, 407], "min": [400, 407], "unknown": [400, 407], "common": [400, 407], "z_1": [400, 407], "z1_h0": [400, 407], "z1_h1": [400, 407], "nu": [400, 407], "central": [400, 407], "lambda_": [400, 407], "z1_h0_theori": [400, 407], "chi2": [400, 407], "z1_h1_theori": [400, 407], "ncx2": [400, 407], "isf": [400, 407], "sf": [400, 407], "empir": [400, 407], "p_d_mea": [400, 407], "p_fa_mea": [400, 407], "11e": 400, "05e": [400, 407], "x2_h0": [400, 407], "x2_h1": [400, 407], "x2_h0_real_theori": [400, 407], "x2_h1_real_theori": [400, 407], "contigu": [400, 407], "y2_h0": 400, "lib": [400, 405, 407], "stride_trick": [400, 407], "sliding_window_view": [400, 407], "y2_h1": 400, "sigma_2": 400, "a_2": 400, "y2_h0_real_theori": 400, "y2_h1_real_theori": 400, "similarli": 400, "z_2": [400, 407], "z2_h0": [400, 407], "z2_h1": [400, 407], "z2_h0_theori": [400, 407], "z2_h1_theori": [400, 407], "tx": 403, "fillstyl": 403, "accomplish": [403, 410], "resample_sign": 403, "new_sample_r": 403, "ty": 403, "198": 403, "four": 403, "396": 403, "fourth": 403, "often": 403, "do": 403, "312": 403, "00095883": 404, "00175012": 404, "00423921": 404, "0058825": 404, "006151": 404, "00474595": 404, "0017044": 404, "00254816": 404, "00721645": 404, "0112324": 404, "01342358": 404, "01273202": 404, "00845058": 404, "0004368": 404, "01073669": 404, "02372977": 404, "03650247": 404, "04650654": 404, "05098525": 404, "04734644": 404, "03355896": 404, "00851486": 404, "02769991": 404, "07367348": 404, "12670446": 404, "18301321": 404, "23810898": 404, "28727058": 404, "32607991": 404, "35093841": 404, "35949665": 404, "evalu": [404, 405], "here": [404, 405, 413], "478207252018059": 405, "6400000000000001": 405, "7391036260090295": 405, "3061467458920719j": 405, "47820725": 405, "78207252e": 405, "58172329e": 405, "10862468e": 405, "86109590e": 405, "21565653e": 405, "01140214e": 405, "57286400e": 405, "67772160e": 405, "47338728e": 405, "10422993e": 405, "89312837e": 405, "12240078e": 405, "03953322e": 405, "69685122e": 405, "63882791e": 405, "81474977e": 405, "47193366e": 405, "85259041e": 405, "15647504e": 405, "23851924e": 405, "42176895e": 405, "84684395e": 405, "42721858e": 405, "72236648e": 405, "14721649e": 405, "10813095e": 405, "94024315e": 405, "78877688e": 405, "74077567e": 405, "87820725": 405, "53637958": 405, "94724205": 405, "13335164": 405, "1455082": 405, "04436799": 405, "88708159": 405, "71930943": 405, "5719707": 405, "46154771": 405, "39261642": 405, "36139242": 405, "35935288": 405, "3763214": 405, "40270968": 405, "43085717": 405, "45557651": 405, "47410241": 405, "48566716": 405, "49090568": 405, "49124786": 405, "48840102": 405, "4839738": 405, "47925143": 405, "47510421": 405, "47199608": 405, "47005584": 405, "46917696": 405, "46911955": 405, "denomin": 405, "73910363": 405, "30614675j": 405, "plane": 405, "092337035029908": 405, "71104892744724": 405, "684365018955985": 405, "37868538208862": 405, "1263714068241546": 405, "9993519409971622": 405, "1909320767063554": 405, "016796159999999997": 405, "46380627201816593": 405, "3806359704987265j": 405, "4988817673791569": 405, "3333421398098428j": 405, "5543277195052645": 405, "22961005941814036j": 405, "5291527586123693": 405, "28283804209787544j": 405, "lyon": 405, "understand": 405, "3rd": 405, "insid": 405, "matt": [405, 411, 413, 414], "venv": 405, "_filter_design": 405, "478": 405, "runtimewarn": [405, 411], "divid": [405, 411], "encount": [405, 411], "npp_polyv": 405, "zm1": 405, "tensor": 405, "invalid": 405, "unstabl": 405, "52e": 407, "56e": 407, "20e": 407, "pb": 408, "x_bb_rect": 408, "papr_bb_rect": 408, "x_pb_rect": 408, "papr_pb_rect": 408, "x_bb_0p1": 408, "papr_bb_0p1": 408, "x_pb_0p1": 408, "papr_pb_0p1": 408, "x_bb_0p5": 408, "papr_bb_0p5": 408, "x_pb_0p5": 408, "papr_pb_0p5": 408, "x_bb_0p9": 408, "papr_bb_0p9": 408, "x_pb_0p9": 408, "papr_pb_0p9": 408, "rf": [408, 409], "sweep_alpha": 408, "bb_papr": 408, "pb_papr": 408, "bpsk_bb_papr": 408, "bpsk_pb_papr": 408, "qpsk_bb_papr": 408, "qpsk_pb_papr": 408, "psk8_bb_papr": 408, "psk8_pb_papr": 408, "psk16_bb_papr": 408, "psk16_pb_papr": 408, "loop_filt": 409, "0x7f3c21474a90": 409, "theta_0": 409, "phase_error": 409, "freq_estim": 409, "tmp": 409, "ipykernel_28831": 409, "3044107145": 409, "deprecationwarn": 409, "convers": [409, 413, 414], "ndim": 409, "scalar": 409, "deprec": 409, "futur": 409, "extract": 409, "1093092892": 409, "a_hat": [409, 410], "152932338": 409, "rad2deg": 409, "avail": [409, 410, 413], "005": 409, "b_nt": 409, "0005": 409, "0125": 409, "015": 409, "0175": 409, "t_lock": 409, "analyze_psk": 410, "n0": 410, "tx_mf": 410, "bpsk_ber": 410, "bpsk_ser": 410, "qpsk_ber": 410, "qpsk_ser": 410, "psk8_ber": 410, "psk8_ser": 410, "psk16_ber": 410, "psk16_ser": 410, "psk8_bin": 410, "psk8_grai": 410, "wors": 410, "rc_0p1": 411, "rc_0p5": 411, "rc_0p9": 411, "pm": 411, "nearli": 411, "lobe": 411, "freqz": 411, "worn": 411, "h_rc_0p1": 411, "h_rc_0p5": 411, "h_rc_0p9": 411, "p_rect": 411, "cumsum": 411, "p_rc_0p1": 411, "p_rc_0p5": 411, "p_rc_0p9": 411, "srrc_0p1": 411, "srrc_0p5": 411, "srrc_0p9": 411, "significantli": 411, "being": 411, "h_srrc_0p1": 411, "h_srrc_0p5": 411, "h_srrc_0p9": 411, "p_srrc_0p1": 411, "p_srrc_0p5": 411, "p_srrc_0p9": 411, "gauss_0p1": 411, "gauss_0p2": 411, "gauss_0p3": 411, "_filter": 411, "357": 411, "softwar": 413, "radio": 413, "goal": 413, "analyz": 413, "reli": 413, "interoper": 413, "numba": [413, 414], "acceler": 413, "computation": 413, "intens": 413, "aim": 413, "replic": 413, "relev": 413, "toolbox": 413, "progress": 413, "someth": 413, "pleas": 413, "issu": 413, "pypi": 413, "api": [413, 414, 415], "synchron": 413, "budget": [413, 414], "miscellan": 413, "research": 413, "cite": 413, "bibtex": 413, "hostetter_sdr_2023": 413, "author": 413, "hostett": [413, 414], "month": 413, "year": 413, "2023": [413, 414], "url": 413, "apa": 413, "june": 414, "2024": 414, "percent": 414, "ppb": 414, "renam": 414, "to_real_pb": 414, "to_complex_bb": 414, "h0_theori": 414, "h1_theori": 414, "march": 414, "helper": 414, "detection_pdf": 414, "februari": 414, "fix": [414, 415], "bug": [414, 415], "made": 414, "pin": 414, "januari": 414, "zadoff_chu": 414, "design_multirate_tap": 414, "decemb": 414, "rework": 414, "frequency_response_log": 414, "explicit": 414, "jupyt": 414, "notebook": 414, "novemb": 414, "abil": 414, "multirate_tap": 414, "polyphase_matrix": 414, "replac": 414, "black": 414, "septemb": 414, "sensibl": 414, "august": 414, "superflu": 414, "translat": 414, "juli": 414, "firinterpol": 414, "impair": 414, "fpsl": 414, "synthes": 414, "semant": 415, "major": 415, "minor": 415, "patch": 415, "introduc": 415, "featur": 415, "compat": 415, "them": 415}, "objects": {"": [[3, 0, 0, 1, "sdr", ""]], "sdr": [[10, 1, 1, "", "AGC", "Implements an automatic gain controller (AGC)."], [19, 1, 1, "", "AdditiveScrambler", "Implements an additive scrambler."], [24, 1, 1, "", "BinaryErasureChannel", "Implements a binary erasure channel (BEC)."], [32, 1, 1, "", "BinarySymmetricChannel", "Implements a binary symmetric channel (BSC)."], [40, 1, 1, "", "BlockInterleaver", "Implements a block interleaver."], [42, 1, 1, "", "CPM", "Implements continuous-phase modulation (CPM)."], [56, 1, 1, "", "Channel", "A base class for wireless channels."], [62, 1, 1, "", "Channelizer", "Implements a polyphase channelizer FIR filter."], [67, 1, 1, "", "ClosedLoopPLL", "A class that defines the performance of a closed-loop PLL."], [84, 1, 1, "", "Decimator", "Implements a polyphase decimating FIR filter."], [88, 1, 1, "", "Differentiator", "Implements a differentiator FIR filter."], [90, 1, 1, "", "DiscreteMemorylessChannel", "Implements a discrete memoryless channel (DMC)."], [96, 1, 1, "", "EnergyDetector", "Implements an energy detector."], [101, 1, 1, "", "ErrorRate", "A class for measuring bit error rates (BER) or symbol error rates (SER)."], [108, 1, 1, "", "FIR", "Implements a finite impulse response (FIR) filter."], [124, 1, 1, "", "FLFSR", "Implements a Fibonacci linear-feedback shift register (LFSR)."], [138, 1, 1, "", "FarrowResampler", "Implements a piecewise polynomial Farrow arbitrary resampler."], [148, 1, 1, "", "FractionalDelay", "Implements a fractional delay FIR filter."], [150, 1, 1, "", "GLFSR", "Implements a Galois linear-feedback shift register (LFSR)."], [163, 1, 1, "", "IIR", "Implements an infinite impulse response (IIR) filter."], [179, 1, 1, "", "Integrator", "Implements an integrator IIR filter."], [181, 1, 1, "", "Interleaver", "Implements an arbitrary interleaver."], [188, 1, 1, "", "Interpolator", "Implements a polyphase interpolating FIR filter."], [191, 1, 1, "", "LeakyIntegrator", "Implements a leaky integrator IIR filter."], [193, 1, 1, "", "LinearModulation", "Implements linear phase/amplitude modulation with arbitrary symbol mapping."], [209, 1, 1, "", "LoopFilter", "Implements a 2nd order, proportional-plus-integrator (PPI) loop filter."], [218, 1, 1, "", "MLPED", "Implements a maximum-likelihood phase error detector (ML-PED)."], [226, 1, 1, "", "MSK", "Implements minimum-shift keying (MSK) modulation and demodulation."], [228, 1, 1, "", "MovingAverager", "Implements a moving average FIR filter."], [230, 1, 1, "", "NCO", "Implements a numerically controlled oscillator (NCO)."], [238, 1, 1, "", "OQPSK", "Implements offset quadrature phase-shift keying (OQPSK) modulation and demodulation."], [240, 1, 1, "", "PED", "Implements a heuristic phase error detector (PED)."], [246, 1, 1, "", "PSK", "Implements phase-shift keying (PSK) modulation and demodulation."], [252, 1, 1, "", "PiMPSK", "Implements $pi/M$ phase-shift keying ($pi/M$ PSK) modulation and demodulation."], [254, 1, 1, "", "PolyphaseFIR", "Implements a generic polyphase FIR filter."], [269, 5, 1, "", "Q", "Computes the CCDF of the standard normal distribution $mathcal{N}(0, 1)$.."], [270, 5, 1, "", "Qinv", "Computes the inverse CCDF of the standard normal distribution $mathcal{N}(0, 1)$."], [271, 1, 1, "", "ReplicaCorrelator", "Implements an clairvoyant replica-correlator detector."], [276, 1, 1, "", "Resampler", "Implements a polyphase rational resampling FIR filter."], [280, 5, 1, "", "albersheim", "Estimates the minimum input signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_d$."], [281, 5, 1, "", "average_power", "Measures the average power of a time-domain signal $x[n]$."], [282, 5, 1, "", "awgn", "Adds additive white Gaussian noise (AWGN) to the time-domain signal $x[n]$."], [283, 5, 1, "", "awgn_capacity", "Calculates the capacity of an additive white Gaussian noise (AWGN) channel."], [284, 5, 1, "", "barker_code", "Generates the Barker code/sequence of length $n$."], [285, 5, 1, "", "bec", "Passes the binary input sequence $x$ through a binary erasure channel (BEC)."], [286, 5, 1, "", "bec_capacity", "Calculates the capacity of a binary erasure channel (BEC)."], [287, 5, 1, "", "berlekamp_massey", "Finds the minimal polynomial $c(x)$ that produces the linear recurrent sequence $y$."], [288, 5, 1, "", "biawgn_capacity", "Calculates the capacity of a binary-input additive white Gaussian noise (BI-AWGN) channel."], [289, 5, 1, "", "binary_code", "Generates a binary code of length $n = 2^m$."], [290, 5, 1, "", "bsc", "Passes the binary input sequence $x$ through a binary symmetric channel (BSC)."], [291, 5, 1, "", "bsc_capacity", "Calculates the capacity of a binary symmetric channel (BSC)."], [292, 5, 1, "", "coherent_gain", "Computes the SNR improvement by coherent integration."], [293, 5, 1, "", "coherent_gain_loss", "Computes the coherent gain loss (CGL) given a time or frequency offset."], [294, 5, 1, "", "composite_snr", "Calculates the signal-to-noise ratio (SNR) of the product of two signals."], [295, 5, 1, "", "crest_factor", "Measures the crest factor of a time-domain signal $x[n]$."], [296, 5, 1, "", "db", "Converts from linear units to decibels."], [297, 5, 1, "", "design_bandpass_fir", "Designs a bandpass FIR filter impulse response $h[n]$ using the window method."], [298, 5, 1, "", "design_bandstop_fir", "Designs a bandstop FIR filter impulse response $h[n]$ using the window method."], [299, 5, 1, "", "design_frac_delay_fir", "Designs a fractional delay FIR filter impulse response $h[n]$ using the Kaiser window method."], [300, 5, 1, "", "design_highpass_fir", "Designs a highpass FIR filter impulse response $h[n]$ using the window method."], [301, 5, 1, "", "design_lowpass_fir", "Designs a lowpass FIR filter impulse response $h[n]$ using the window method."], [302, 5, 1, "", "design_multirate_fir", "Designs a multirate FIR filter impulse response $h[n]$ using the Kaiser window method."], [303, 5, 1, "", "diff_decode", "Differentially decodes the input data $y[k]$."], [304, 5, 1, "", "diff_encode", "Differentially encodes the input data $x[k]$."], [305, 5, 1, "", "dmc", "Passes the input sequence $x$ through a discrete memoryless channel (DMC)."], [306, 5, 1, "", "downsample", "Downsamples the time-domain signal $x[n]$ by the factor $r$, by discarding $r-1$ samples every $r$ samples."], [307, 5, 1, "", "ebn0_to_esn0", "Converts from $E_b/N_0$ to $E_s/N_0$."], [308, 5, 1, "", "ebn0_to_snr", "Converts from $E_b/N_0$ to $S/N$."], [309, 5, 1, "", "energy", "Measures the energy of a time-domain signal $x[n]$."], [310, 5, 1, "", "esn0_to_ebn0", "Converts from $E_s/N_0$ to $E_b/N_0$."], [311, 5, 1, "", "esn0_to_snr", "Converts from $E_s/N_0$ to $S/N$."], [312, 5, 1, "", "euclidean", "Measures the Euclidean distance between two signals $x[n]$ and $y[n]$."], [313, 5, 1, "", "evm", "Measures the error-vector magnitude (EVM) of the complex symbols $hat{x}[k]$."], [314, 5, 1, "", "fdoa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on frequency difference of arrival (FDOA) estimation."], [315, 5, 1, "", "foa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on frequency of arrival (FOA) estimation."], [316, 5, 1, "", "free_space_path_loss", "Calculates the free-space path loss (FSPL) in dB."], [317, 5, 1, "", "frequency_offset", "Applies a frequency and phase offset to the time-domain signal $x[n]$."], [318, 5, 1, "", "gaussian", "Returns a Gaussian pulse shape."], [319, 5, 1, "", "gold_code", "Generates the Gold code/sequence of length $n = 2^m - 1$."], [320, 5, 1, "", "gray_code", "Generates a Gray code of length $n = 2^m$."], [321, 5, 1, "", "h0", "Computes the statistical distribution under the null hypothesis $mathcal{H}_0$."], [322, 5, 1, "", "h1", "Computes the statistical distribution under the alternative hypothesis $mathcal{H}_1$."], [323, 5, 1, "", "hadamard_code", "Generates the Hadamard code/sequence of length $n = 2^m$."], [324, 5, 1, "", "half_sine", "Returns a half-sine pulse shape."], [325, 5, 1, "", "hamming", "Measures the Hamming distance between two signals $x[n]$ and $y[n]$."], [326, 5, 1, "", "hexdump", "Returns a hexdump of the specified data."], [327, 5, 1, "", "iq_imbalance", "Applies IQ imbalance to the complex time-domain signal $x[n]$."], [328, 5, 1, "", "is_preferred_pair", "Determines if two primitive polynomials generate preferred pair $m$-sequences."], [329, 5, 1, "", "kasami_code", "Generates the Kasami code/sequence of length $n = 2^m - 1$."], [330, 5, 1, "", "linear", "Converts from decibels to linear units."], [331, 5, 1, "", "m_sequence", "Generates a maximum-length sequence ($m$-sequence) from a Fibonacci linear feedback shift register (LFSR)."], [332, 5, 1, "", "max_frequency_offset", "Computes the maximum frequency offset that produces at most the provided coherent gain loss (CGL)."], [333, 5, 1, "", "max_integration_time", "Computes the maximum integration time that produces at most the provided coherent gain loss (CGL)."], [334, 5, 1, "", "min_snr", "Computes the minimum input signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_d$."], [335, 5, 1, "", "mix", "Mixes a time-domain signal with a complex exponential or real sinusoid."], [336, 5, 1, "", "non_coherent_gain", "Computes the SNR improvement by non-coherently integrating $N_{nc}$ samples."], [337, 5, 1, "", "p_d", "Computes the theoretical probability of detection $P_d$."], [338, 5, 1, "", "p_fa", "Computes the theoretical probability of false alarm $P_{fa}$."], [339, 5, 1, "", "pack", "Packs a binary array into an array with multiple bits per element."], [340, 5, 1, "", "papr", "Measures the peak-to-average power ratio (PAPR) of a time-domain signal $x[n]$."], [341, 5, 1, "", "parabolic_antenna", "Calculates the gain $G$ and beamwidth $theta$ of a parabolic reflector."], [342, 5, 1, "", "peak_power", "Measures the peak power of a time-domain signal $x[n]$."], [343, 5, 1, "", "peak_voltage", "Measures the peak voltage of a time-domain signal $x[n]$."], [344, 5, 1, "", "peebles", "Estimates the non-coherent integration gain for a given probability of detection $P_d$ and false alarm $P_{fa}$."], [369, 5, 1, "", "polyphase_decompose", "Decomposes the prototype filter taps $h[n]$ into the polyphase matrix $h_i[n]$ with $B$ phases."], [370, 5, 1, "", "preferred_pairs", "Generates primitive polynomials of degree $m$ that produce preferred pair $m$-sequences."], [371, 5, 1, "", "raised_cosine", "Returns a raised cosine (RC) pulse shape."], [372, 5, 1, "", "rectangular", "Returns a rectangular pulse shape."], [373, 5, 1, "", "rms_bandwidth", "Measures the RMS bandwidth $B_{text{rms}}$ of the signal $x[n]$."], [374, 5, 1, "", "rms_integration_time", "Measures the RMS integration time $T_{text{rms}}$ of the signal $x[n]$."], [375, 5, 1, "", "rms_voltage", "Measures the root-mean-square (RMS) voltage of a time-domain signal $x[n]$."], [376, 5, 1, "", "root_raised_cosine", "Returns a square root raised cosine (SRRC) pulse shape."], [377, 5, 1, "", "sample_rate_offset", "Applies a sample rate offset to the time-domain signal $x[n]$."], [378, 5, 1, "", "shannon_limit_ebn0", "Calculates the Shannon limit on the bit energy-to-noise power spectral density ratio $E_b/N_0$ in the AWGN channel."], [379, 5, 1, "", "shannon_limit_snr", "Calculates the Shannon limit on the signal-to-noise ratio $S/N$ in the AWGN channel."], [380, 5, 1, "", "shnidman", "Estimates the minimum input signal-to-noise ratio (SNR) required to achieve the desired probability of detection $P_d$ for the Swerling target model."], [381, 5, 1, "", "snr_to_ebn0", "Converts from $S/N$ to $E_b/N_0$."], [382, 5, 1, "", "snr_to_esn0", "Converts from $S/N$ to $E_s/N_0$."], [383, 5, 1, "", "tdoa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on time difference of arrival (TDOA) estimation."], [384, 5, 1, "", "threshold", "Computes the theoretical detection threshold $gamma$."], [385, 5, 1, "", "to_complex_baseband", "Converts a real passband signal to a complex baseband signal."], [386, 5, 1, "", "to_real_passband", "Converts a complex baseband signal to a real passband signal."], [387, 5, 1, "", "toa_crlb", "Calculates the Cram\u00e9r-Rao lower bound (CRLB) on time of arrival (TOA) estimation."], [388, 5, 1, "", "unpack", "Unpacks an array with multiple bits per element into a binary array."], [389, 5, 1, "", "upsample", "Upsamples the time-domain signal $x[n]$ by the factor $r$, by inserting $r-1$ zeros between each sample."], [390, 5, 1, "", "walsh_code", "Generates the Walsh code/sequence of length $n = 2^m$."], [391, 5, 1, "", "wavelength", "Calculates the wavelength $lambda$ of an electromagnetic wave with frequency $f$."], [392, 5, 1, "", "zadoff_chu_sequence", "Generates the root-$u$ Zadoff-Chu sequence of length $N$."]], "sdr.AGC": [[11, 2, 1, "", "__call__", "Performs automatic gain control on the input signal."], [12, 2, 1, "", "__init__", "Creates an automatic gain controller (AGC)."], [13, 4, 1, "", "attack", "(Settable) The attack rate $alpha$."], [14, 4, 1, "", "decay", "(Settable) The decay rate $beta$."], [15, 4, 1, "", "gain", "The current linear gain."], [16, 4, 1, "", "reference", "(Settable) The desired output magnitude."], [17, 2, 1, "", "reset", "Resets the AGC gain. Only useful when using streaming mode."], [18, 4, 1, "", "streaming", "Indicates whether the AGC is in streaming mode."]], "sdr.AGC.__call__": [[11, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.AGC.__init__": [[12, 3, 2, "p-attack", "attack", "The attack rate $alpha$. The attack rate is meant to attenuate strong signals. After $n_0 approx 1 / alpha$ samples the error will reduce to $1 / e$ of its original value."], [12, 3, 2, "p-decay", "decay", "The decay rate $beta$. The decay rate is meant to amplify weak signals. After $n_0 approx 1 / beta$ samples the error will reduce to $1 / e$ of its original value."], [12, 3, 2, "p-reference", "reference", "The desired output magnitude."], [12, 3, 2, "p-streaming", "streaming", "Indicates whether the AGC operates in streaming mode. In streaming mode, the gain is preserved between calls to __call__()."]], "sdr.AGC.reset": [[17, 3, 2, "p-gain", "gain", "The initial linear gain of the AGC."]], "sdr.AdditiveScrambler": [[20, 2, 1, "", "__init__", "Creates an additive scrambler."], [21, 2, 1, "", "descramble", "Descrambles the input sequence $y[n]$."], [22, 4, 1, "", "lfsr", "The Fibonacci LFSR used for scrambling."], [23, 2, 1, "", "scramble", "Scrambles the input sequence $x[n]$."]], "sdr.AdditiveScrambler.__init__": [[20, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [20, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [20, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.AdditiveScrambler.descramble": [[21, 3, 2, "p-y", "y", "The input sequence $y[n]$."]], "sdr.AdditiveScrambler.scramble": [[23, 3, 2, "p-x", "x", "The input sequence $x[n]$."]], "sdr.BinaryErasureChannel": [[25, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BEC channel."], [26, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1, e}$ of the BEC channel. Erasures $e$ are represented by -1."], [27, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [28, 2, 1, "", "__init__", "Creates a new binary erasure channel (BEC)."], [29, 2, 1, "", "capacities", "Calculates the capacity of BEC channels."], [30, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [31, 4, 1, "", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.BinaryErasureChannel.__call__": [[27, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinaryErasureChannel.__init__": [[28, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."], [28, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BinarySymmetricChannel": [[33, 4, 1, "", "X", "The input alphabet $mathcal{X} = {0, 1}$ of the BSC channel."], [34, 4, 1, "", "Y", "The output alphabet $mathcal{Y} = {0, 1}$ of the BSC channel."], [35, 2, 1, "", "__call__", "Passes the binary input sequence $x$ through the channel."], [36, 2, 1, "", "__init__", "Creates a new binary symmetric channel (BSC)."], [37, 2, 1, "", "capacities", "Calculates the capacity of BSC channels."], [38, 4, 1, "", "capacity", "The capacity $C$ of the instantiated channel in bits/channel use."], [39, 4, 1, "", "p", "The transition probability $p$ of the BSC channel."]], "sdr.BinarySymmetricChannel.__call__": [[35, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X} = {0, 1}$."]], "sdr.BinarySymmetricChannel.__init__": [[36, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."], [36, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.BlockInterleaver": [[41, 2, 1, "", "__init__", "Creates a $R times C$ block interleaver."]], "sdr.BlockInterleaver.__init__": [[41, 3, 2, "p-cols", "cols", "The number of columns $C$ in the interleaver."], [41, 3, 2, "p-rows", "rows", "The number of rows $R$ in the interleaver. The row size determines the output separation of consecutive input elements."]], "sdr.CPM": [[43, 2, 1, "", "__init__", "Creates a new continuous-phase modulation object."], [44, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [45, 4, 1, "", "bps", "The number of coded bits per symbol $k = log_2 M$."], [46, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples into decimal symbol decisions."], [47, 4, 1, "", "index", "The modulation index $h$."], [48, 2, 1, "", "modulate", "Modulates the decimal symbols $s[k]$ into pulse-shaped complex samples $x[n]$."], [49, 4, 1, "", "order", "The modulation order $M = 2^k$."], [50, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [51, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal."], [52, 4, 1, "", "rx_filter", "The receive decimating matched filter. The filter coefficients are matched to the pulse shape $h[-n]^*$."], [53, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [54, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [55, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter. The filter coefficients are the pulse shape $h[n]$."]], "sdr.CPM.__init__": [[43, 3, 2, "p-index", "index", "The modulation index $h$. The modulation index is the ratio of the frequency deviation to the symbol rate $h = Delta f / f_{sym}$. The phase change per symbol is $pi h$."], [43, 3, 2, "p-order", "order", "The modulation order $M = 2^k$."], [43, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees."], [43, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the instantaneous frequency of the signal. If a string is passed, the pulse shape is normalized such that the maximum value is 1."], [43, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string."], [43, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [43, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.CPM.ber": [[44, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.CPM.demodulate": [[46, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.CPM.modulate": [[48, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.CPM.ser": [[53, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.Channel": [[57, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [58, 2, 1, "", "__init__", "Creates a new channel."], [59, 2, 1, "", "capacities", "Computes the channel capacity given the channel configuration."], [60, 4, 1, "", "capacity", "The channel capacity $C$ in bits/2D of the instantiated channel."], [61, 2, 1, "", "reset", "Resets the channel with a new seed."]], "sdr.Channel.__call__": [[57, 3, 2, "p-x", "x", "The input sequence $x$."]], "sdr.Channel.__init__": [[58, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channel.reset": [[61, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.Channelizer": [[63, 2, 1, "", "__call__", "Channelizes the input signal $x[n]$ with the polyphase FIR filter."], [64, 2, 1, "", "__init__", "Creates a polyphase FIR channelizing filter."], [65, 4, 1, "", "channels", "The number of channels $C$."], [66, 4, 1, "", "method", "The method used to design the polyphase channelizing filter."]], "sdr.Channelizer.__call__": [[63, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [63, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Channelizer.__init__": [[64, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [64, 3, 2, "p-channels", "channels", "The number of channels $C$."], [64, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [64, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [64, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.ClosedLoopPLL": [[68, 4, 1, "", "Bn", "The noise bandwidth $B_n$ of the PLL in Hz."], [69, 4, 1, "", "BnT", "The normalized noise bandwidth $B_n T$ of the PLL."], [70, 4, 1, "", "K0", "The NCO gain $K_0$."], [71, 4, 1, "", "K1", "The proportional gain $K_1$ of the loop filter."], [72, 4, 1, "", "K2", "The integral gain $K_2$ of the loop filter."], [73, 4, 1, "", "Kp", "The phase error detector (PED) gain $K_p$."], [74, 2, 1, "", "__init__", "Creates a closed-loop PLL analysis object."], [75, 2, 1, "", "frequency_lock_time", "Returns the frequency lock time of the PLL."], [76, 4, 1, "", "iir", "The IIR filter that represents the closed-loop transfer function of the PLL."], [77, 2, 1, "", "lock_time", "Returns the lock time of the PLL."], [78, 4, 1, "", "omega_3dB", "The 3-dB bandwidth $omega_{3textrm{dB}}$ of the PLL in radians/s."], [79, 4, 1, "", "omega_n", "The natural frequency $omega_n$ of the PLL in radians/s."], [80, 2, 1, "", "phase_error_variance", "Returns the variance of the phase error of the PLL in steady state."], [81, 2, 1, "", "phase_lock_time", "Returns the phase lock time of the PLL."], [82, 4, 1, "", "sample_rate", "The sample rate $f_s$ of the PLL in samples/s."], [83, 4, 1, "", "zeta", "The damping factor $zeta$ of the PLL."]], "sdr.ClosedLoopPLL.__init__": [[74, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [74, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [74, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [74, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."], [74, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the PLL in Hz."]], "sdr.ClosedLoopPLL.frequency_lock_time": [[75, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.lock_time": [[77, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ of the input signal in Hz."]], "sdr.ClosedLoopPLL.phase_error_variance": [[80, 3, 2, "p-cn0", "cn0", "The carrier-to-noise density ratio $C/N_0$ of the input signal in dB-Hz."]], "sdr.Decimator": [[85, 2, 1, "", "__init__", "Creates a polyphase FIR decimating filter."], [86, 4, 1, "", "method", "The method used to design the polyphase decimating filter."], [87, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."]], "sdr.Decimator.__init__": [[85, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [85, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [85, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [85, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [85, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.Differentiator": [[89, 2, 1, "", "__init__", "Creates a differentiator FIR filter."]], "sdr.Differentiator.__init__": [[89, 3, 2, "p-order", "order", "The order of the FIR differentiator $N$. The filter length is $N + 1$. Increasing the filter order increases the bandwidth of the differentiator."], [89, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [89, 3, 2, "p-window", "window", "The SciPy window definition. See scipy.signal.windows.get_window() for details. If None, no window is applied."]], "sdr.DiscreteMemorylessChannel": [[91, 4, 1, "", "P", "The transition probability matrix $P$ of the DMC channel."], [92, 4, 1, "", "X", "The input alphabet $mathcal{X}$ of the DMC channel."], [93, 4, 1, "", "Y", "The output alphabet $mathcal{Y}$ of the DMC channel."], [94, 2, 1, "", "__call__", "Passes the input sequence $x$ through the channel."], [95, 2, 1, "", "__init__", "Creates a new discrete memoryless channel (DMC)."]], "sdr.DiscreteMemorylessChannel.__call__": [[94, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.DiscreteMemorylessChannel.__init__": [[95, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P = Pr(Y = y_j | X = x_i)$."], [95, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [95, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [95, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."]], "sdr.EnergyDetector": [[97, 2, 1, "", "p_d", "Computes the probability of detection $P_d$."], [98, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{fa}$."], [99, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [100, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.EnergyDetector.p_d": [[97, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [97, 3, 2, "p-complex", "complex", "Indicates whether the signal is real or complex."], [97, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [97, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.p_fa": [[98, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [98, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [98, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [98, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.EnergyDetector.roc": [[99, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [99, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [99, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."], [99, 3, 2, "p-snr", "snr", "The received signal-to-noise ratio $sigma_s^2 / sigma^2$ in dB."]], "sdr.EnergyDetector.threshold": [[100, 3, 2, "p-N_nc", "N_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [100, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [100, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [100, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.ErrorRate": [[102, 2, 1, "", "__init__", "Creates a new error rate tabulation object."], [103, 2, 1, "", "add", "Measures the number of bit or symbol errors at the given signal-to-noise ratio (SNR)."], [104, 2, 1, "", "counts", "Returns the number of counts at the specified signal-to-noise ratio (SNR)."], [105, 2, 1, "", "error_rate", "Returns the error rate at the specified signal-to-noise ratio (SNR)."], [106, 2, 1, "", "error_rates", "Returns all signal-to-noise ratios (SNRs) in ascending order and their corresponding error rates."], [107, 2, 1, "", "errors", "Returns the number of errors at the specified signal-to-noise ratio (SNR)."]], "sdr.ErrorRate.add": [[103, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."], [103, 3, 2, "p-x", "x", "The transmitted bits or symbols $x[k]$."], [103, 3, 2, "p-x_hat", "x_hat", "The received bits or symbols $hat{x}[k]$."]], "sdr.ErrorRate.counts": [[104, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.error_rate": [[105, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.ErrorRate.errors": [[107, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) in dB. This can be $E_b/N_0$, $E_s/N_0$, $S/N$, $C/N_0$, or other SNR quantities. However, users are cautioned to be consistent for a given class instance."]], "sdr.FIR": [[109, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the FIR filter."], [110, 2, 1, "", "__init__", "Creates an FIR filter."], [111, 2, 1, "", "__len__", "Returns the filter length $N + 1$."], [112, 4, 1, "", "delay", "The delay of the FIR filter $d = lfloor frac{N + 1}{2} rfloor$ in samples."], [113, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [114, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the FIR filter."], [115, 2, 1, "", "group_delay", "Returns the group delay $tau_g(omega)$ of the FIR filter."], [116, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the FIR filter."], [117, 4, 1, "", "order", "The order of the FIR filter $N$."], [118, 2, 1, "", "phase_delay", "Returns the phase delay $tau_{phi}(omega)$ of the FIR filter."], [119, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [120, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [121, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the FIR filter."], [122, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [123, 4, 1, "", "taps", "The feedforward taps $h[n]$ with length $N + 1$."]], "sdr.FIR.__call__": [[109, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [109, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.FIR.__init__": [[110, 3, 2, "p-h", "h", "The feedforward coefficients $h[n]$."], [110, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FIR.frequency_response": [[114, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [114, 3, 2, "p-freqs", "freqs", "The frequency specification."], [114, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [114, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.FIR.group_delay": [[115, 3, 2, "p-N", "N", "The number of samples in the group delay."], [115, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.impulse_response": [[116, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FIR.phase_delay": [[118, 3, 2, "p-N", "N", "The number of samples in the phase delay."], [118, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."]], "sdr.FIR.step_response": [[121, 3, 2, "p-N", "N", "The number of samples to return. The default is the filter length."]], "sdr.FLFSR": [[125, 2, 1, "", "Taps", "Creates a Fibonacci LFSR from its taps."], [126, 2, 1, "", "__call__", "Processes the input symbols $x[n]$ through the Fibonacci LFSR."], [127, 2, 1, "", "__init__", "Creates a new Fibonacci LFSR."], [128, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x)$ that defines the linear recurrent sequence."], [129, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x)$ that defines the feedback arithmetic."], [130, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [131, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [132, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence."], [133, 2, 1, "", "reset", "Resets the Fibonacci LFSR state to the specified state."], [134, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [135, 2, 1, "", "step", "Produces the next steps output symbols."], [136, 4, 1, "", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."], [137, 2, 1, "", "to_galois_lfsr", "Converts the Fibonacci LFSR to a Galois LFSR that produces the same output."]], "sdr.FLFSR.Taps": [[125, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [125, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_{n-1}, c_{n-2}, dots, c_1, c_0]$."]], "sdr.FLFSR.__call__": [[126, 3, 2, "p-x", "x", "The input symbols $x[n]$."]], "sdr.FLFSR.__init__": [[127, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [127, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [127, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.FLFSR.reset": [[133, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.FLFSR.step": [[135, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Fibonacci LFSR will step backwards."]], "sdr.FarrowResampler": [[139, 2, 1, "", "__call__", "Resamples the input signal $x[n]$ by the given arbitrary rate $r$."], [140, 2, 1, "", "__init__", "Creates a new Farrow arbitrary resampler."], [141, 4, 1, "", "delay", "The delay $d$ of the Farrow FIR filters in samples."], [142, 2, 1, "", "flush", "Flushes the filter state by passing zeros through the filter. Only useful when using streaming mode."], [143, 4, 1, "", "order", "The order of the piecewise polynomial."], [144, 2, 1, "", "reset", "Resets the filter state and fractional sample index."], [145, 4, 1, "", "state", "The filter state consisting of the previous $N$ inputs."], [146, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [147, 4, 1, "", "taps", "The Farrow filter taps."]], "sdr.FarrowResampler.__call__": [[139, 3, 2, "p-rate", "rate", "The resampling rate $r$."], [139, 3, 2, "p-x", "x", "The input signal $x[n] = x(n T_s)$."]], "sdr.FarrowResampler.__init__": [[140, 3, 2, "p-order", "order", "The order of the piecewise polynomial. Must be between 1 and 4."], [140, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.FarrowResampler.flush": [[142, 3, 2, "p-rate", "rate", "The resampling rate $r$."]], "sdr.FarrowResampler.reset": [[144, 3, 2, "p-state", "state", "The filter state to reset to. The state vector should equal the previous three inputs. If None, the filter state will be reset to zero."]], "sdr.FractionalDelay": [[149, 2, 1, "", "__init__", "Creates a fractional delay FIR filter."]], "sdr.FractionalDelay.__init__": [[149, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [149, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.GLFSR": [[151, 2, 1, "", "Taps", "Creates a Galois LFSR from its taps."], [152, 2, 1, "", "__init__", "Creates a new Galois LFSR."], [153, 4, 1, "", "characteristic_poly", "The characteristic polynomial $c(x)$ that defines the linear recurrent sequence."], [154, 4, 1, "", "feedback_poly", "The feedback polynomial $f(x)$ that defines the feedback arithmetic."], [155, 4, 1, "", "field", "The FieldArray subclass for the finite field that defines the linear arithmetic."], [156, 4, 1, "", "initial_state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [157, 4, 1, "", "order", "The order of the linear recurrence/linear recurrent sequence."], [158, 2, 1, "", "reset", "Resets the Galois LFSR state to the specified state."], [159, 4, 1, "", "state", "The current state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$."], [160, 2, 1, "", "step", "Produces the next steps output symbols."], [161, 4, 1, "", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."], [162, 2, 1, "", "to_fibonacci_lfsr", "Converts the Galois LFSR to a Fibonacci LFSR that produces the same output."]], "sdr.GLFSR.Taps": [[151, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."], [151, 3, 2, "p-taps", "taps", "The shift register taps $T = [c_0, c_1, dots, c_{n-2}, c_{n-1}]$."]], "sdr.GLFSR.__init__": [[152, 3, 2, "p-characteristic_poly", "characteristic_poly", "The characteristic polynomial $c(x) = x^{n} - c_{n-1} cdot x^{n-1} - c_{n-2} cdot x^{n-2} - dots - c_{1} cdot x - c_{0}$."], [152, 3, 2, "p-feedback_poly", "feedback_poly", "The feedback polynomial $f(x) = -c_{0} cdot x^{n} - c_{1} cdot x^{n-1} - dots - c_{n-2} cdot x^{2} - c_{n-1} cdot x + 1$."], [152, 3, 2, "p-state", "state", "The initial state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to all ones."]], "sdr.GLFSR.reset": [[158, 3, 2, "p-state", "state", "The state vector $S = [S_0, S_1, dots, S_{n-2}, S_{n-1}]$. The default is None which corresponds to the initial state."]], "sdr.GLFSR.step": [[160, 3, 2, "p-steps", "steps", "The direction and number of output symbols to produce. The default is 1. If negative, the Galois LFSR will step backwards."]], "sdr.IIR": [[164, 2, 1, "", "ZerosPoles", "Creates an IIR filter from its zeros, poles, and gain."], [165, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the IIR filter."], [166, 2, 1, "", "__init__", "Creates an IIR filter with feedforward coefficients $b_i$ and feedback coefficients $a_j$."], [167, 4, 1, "", "a_taps", "The feedback taps $a_j$ for $j = 0,...,N$."], [168, 4, 1, "", "b_taps", "The feedforward taps $b_i$ for $i = 0,...,M$."], [169, 2, 1, "", "frequency_response", "Returns the frequency response $H(omega)$ of the IIR filter."], [170, 4, 1, "", "gain", "The gain of the IIR filter."], [171, 2, 1, "", "impulse_response", "Returns the impulse response $h[n]$ of the IIR filter."], [172, 4, 1, "", "order", "The order of the IIR filter $N$."], [173, 4, 1, "", "poles", "The poles of the IIR filter."], [174, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [175, 4, 1, "", "state", "The filter state."], [176, 2, 1, "", "step_response", "Returns the step response $s[n]$ of the IIR filter."], [177, 4, 1, "", "streaming", "Indicates whether the filter is in streaming mode."], [178, 4, 1, "", "zeros", "The zeros of the IIR filter."]], "sdr.IIR.ZerosPoles": [[164, 3, 2, "p-gain", "gain", "The gain of the transfer function."], [164, 3, 2, "p-poles", "poles", "The poles of the transfer function."], [164, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."], [164, 3, 2, "p-zeros", "zeros", "The zeros of the transfer function."]], "sdr.IIR.__call__": [[165, 3, 2, "p-x", "x", "The input signal $x[n]$ with length $L$."]], "sdr.IIR.__init__": [[166, 3, 2, "p-a", "a", "The feedback coefficients $a_j$ for $j = 0,...,N$."], [166, 3, 2, "p-b", "b", "The feedforward coefficients $b_i$ for $i = 0,...,M$."], [166, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.IIR.frequency_response": [[169, 3, 2, "p-decades", "decades", "Only used if freqs is an integer."], [169, 3, 2, "p-freqs", "freqs", "The frequency specification."], [169, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the filter in samples/s."], [169, 3, 2, "p-whole", "whole", "Only used if freqs is an integer."]], "sdr.IIR.impulse_response": [[171, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.IIR.step_response": [[176, 3, 2, "p-N", "N", "The number of samples to return."]], "sdr.Integrator": [[180, 2, 1, "", "__init__", "Creates an integrating IIR filter."]], "sdr.Integrator.__init__": [[180, 3, 2, "p-method", "method", "The integration method."], [180, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.Interleaver": [[182, 2, 1, "", "__init__", "Creates an arbitrary interleaver."], [183, 2, 1, "", "__len__", "The size of the interleaver."], [184, 2, 1, "", "deinterleave", "Deinterleaves the input sequence $y[n]$."], [185, 2, 1, "", "interleave", "Interleaves the input sequence $x[n]$."], [186, 4, 1, "", "inverse_map", "The deinterleaver permutation map $pi^{-1}$."], [187, 4, 1, "", "map", "The interleaver permutation map $pi$."]], "sdr.Interleaver.__init__": [[182, 3, 2, "p-map", "map", "The interleaver permutation map $pi : i mapsto j$, containing the values $[0, N)$. The $i$-th input element will be placed at the $pi(i)$-th output position."]], "sdr.Interleaver.deinterleave": [[184, 3, 2, "p-y", "y", "The input sequence $y[n]$. Length must be a multiple of the interleaver size."]], "sdr.Interleaver.interleave": [[185, 3, 2, "p-x", "x", "The input sequence $x[n]$. Length must be a multiple of the interleaver size."]], "sdr.Interpolator": [[189, 2, 1, "", "__init__", "Creates a polyphase FIR interpolating filter."], [190, 4, 1, "", "method", "The method used to design the polyphase interpolating filter."]], "sdr.Interpolator.__init__": [[189, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [189, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [189, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [189, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [189, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.LeakyIntegrator": [[192, 2, 1, "", "__init__", "Creates a leaky integrator IIR filter."]], "sdr.LeakyIntegrator.__init__": [[192, 3, 2, "p-alpha", "alpha", "The leaky factor $alpha$. An FIR moving average with length $L$ is approximated when $alpha = 1 - 2/L$."], [192, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs and outputs are preserved between calls to __call__()."]], "sdr.LinearModulation": [[194, 2, 1, "", "__init__", "Creates a new linear phase/amplitude modulation object."], [195, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [196, 4, 1, "", "bps", "The number of coded bits per symbol $k = log_2 M$."], [197, 2, 1, "", "decide_symbols", "Converts the received complex symbols into MLE symbol decisions."], [198, 2, 1, "", "demodulate", "Demodulates the pulse-shaped complex samples."], [199, 2, 1, "", "map_symbols", "Converts the decimal symbols into complex symbols."], [200, 2, 1, "", "modulate", "Modulates the decimal symbols into pulse-shaped complex samples."], [201, 4, 1, "", "order", "The modulation order $M = 2^k$."], [202, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [203, 4, 1, "", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [204, 4, 1, "", "rx_filter", "The receive decimating matched filter."], [205, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [206, 4, 1, "", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [207, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$."], [208, 4, 1, "", "tx_filter", "The transmit interpolating pulse shaping filter."]], "sdr.LinearModulation.__init__": [[194, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [194, 3, 2, "p-phase_offset", "phase_offset", "A phase offset $phi$ in degrees to apply to symbol_map."], [194, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [194, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [194, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [194, 3, 2, "p-symbol_map", "symbol_map", "The symbol mapping ${0, dots, M-1} mapsto mathbb{C}$. An $M$-length array whose indices are decimal symbols $s[k]$ and whose values are complex symbols $a[k]$, where $M$ is the modulation order."]], "sdr.LinearModulation.ber": [[195, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.LinearModulation.decide_symbols": [[197, 3, 2, "p-a_tilde", "a_tilde", "The received complex symbols $tilde{a}[k]$."]], "sdr.LinearModulation.demodulate": [[198, 3, 2, "p-x_tilde", "x_tilde", "The received pulse-shaped complex samples $tilde{x}[n]$ to demodulate, with sps samples per symbol and length sps * s_hat.size + pulse_shape.size - 1."]], "sdr.LinearModulation.map_symbols": [[199, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to map, $0$ to $M-1$."]], "sdr.LinearModulation.modulate": [[200, 3, 2, "p-s", "s", "The decimal symbols $s[k]$ to modulate, $0$ to $M-1$."]], "sdr.LinearModulation.ser": [[205, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.LoopFilter": [[210, 2, 1, "", "__call__", "Filters the input signal $x[n]$."], [211, 2, 1, "", "__init__", "Creates a 2nd order, proportional-plus-integrator (PPI) loop filter."], [212, 4, 1, "", "damping_factor", "The damping factor $zeta$ of the loop filter."], [213, 4, 1, "", "iir", "The underlying IIR filter used to implement the loop filter."], [214, 4, 1, "", "integral_gain", "The integral gain $K_2$ of the loop filter."], [215, 4, 1, "", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter."], [216, 4, 1, "", "proportional_gain", "The proportional gain $K_1$ of the loop filter."], [217, 2, 1, "", "reset", "Resets the loop filter."]], "sdr.LoopFilter.__call__": [[210, 3, 2, "p-x", "x", "The input signal $x[n]$."]], "sdr.LoopFilter.__init__": [[211, 3, 2, "p-K0", "K0", "The NCO gain $K_0$."], [211, 3, 2, "p-Kp", "Kp", "The gain $K_p$ of the phase error detector (PED) or time error detector (TED)."], [211, 3, 2, "p-damping_factor", "damping_factor", "The damping factor $zeta$ of the loop filter. $zeta = 1$ is critically damped, $zeta < 1$ is underdamped, and $zeta > 1$ is overdamped."], [211, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The normalized noise bandwidth $B_n T$ of the loop filter, where $B_n$ is the noise bandwidth in Hz and $T$ is the sampling period in seconds."]], "sdr.MLPED": [[219, 4, 1, "", "A_received", "(Settable) The received signal RMS amplitude $A_{rx,rms}$."], [220, 4, 1, "", "A_reference", "(Settable) The reference signal RMS amplitude $A_{ref,rms}$."], [221, 2, 1, "", "__call__", "Detects the phase error."], [222, 2, 1, "", "__init__", "Initializes the ML-PED."], [223, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [224, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [225, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.MLPED.__call__": [[221, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [221, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.MLPED.__init__": [[222, 3, 2, "p-A_received", "A_received", "The received signal RMS amplitude $A_{rx,rms}$."], [222, 3, 2, "p-A_reference", "A_reference", "The reference signal RMS amplitude $A_{ref,rms}$."]], "sdr.MLPED.data_aided_error": [[223, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [223, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MLPED.decision_directed_error": [[224, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [224, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.MSK": [[227, 2, 1, "", "__init__", "Creates a new MSK object."]], "sdr.MSK.__init__": [[227, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [227, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [227, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.MovingAverager": [[229, 2, 1, "", "__init__", "Creates a moving average FIR filter."]], "sdr.MovingAverager.__init__": [[229, 3, 2, "p-length", "length", "The length of the moving average filter $L$."], [229, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."]], "sdr.NCO": [[231, 2, 1, "", "__call__", "Steps the NCO with variable frequency and/or phase signals."], [232, 2, 1, "", "__init__", "Creates a numerically controlled oscillator (NCO)."], [233, 4, 1, "", "gain", "(Settable) The NCO gain $K_0$."], [234, 4, 1, "", "increment", "(Settable) The constant phase accumulation $omega$ of the NCO in radians/sample."], [235, 4, 1, "", "offset", "(Settable) The absolute phase offset $theta$ of the NCO in radians."], [236, 2, 1, "", "reset", "Resets the NCO."], [237, 2, 1, "", "step", "Steps the NCO forward by $N$ samples."]], "sdr.NCO.__call__": [[231, 3, 2, "p-freq", "freq", "The variable frequency signal $f[n]$ in radians/sample. This input signal varies the per-sample phase increment of the NCO. If None, the signal is all zeros."], [231, 3, 2, "p-output", "output", "The format of the output signal $y[n]$. Options are the accumulated phase, sine, cosine, or complex exponential."], [231, 3, 2, "p-phase", "phase", "The variable phase signal $p[n]$ in radians. This input signal varies the per-sample phase offset of the NCO. If None, the signal is all zeros."]], "sdr.NCO.__init__": [[232, 3, 2, "p-gain", "gain", "The NCO gain $K_0$."], [232, 3, 2, "p-increment", "increment", "The constant accumulation $omega$ of the NCO in radians/sample."], [232, 3, 2, "p-offset", "offset", "The absolute offset $theta$ of the NCO in radians."]], "sdr.NCO.step": [[237, 3, 2, "p-N", "N", "The number of samples $N$ to step the NCO forward."]], "sdr.OQPSK": [[239, 2, 1, "", "__init__", "Creates a new OQPSK object."]], "sdr.OQPSK.__init__": [[239, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [239, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [239, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [239, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [239, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [239, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PED": [[241, 2, 1, "", "__call__", "Detects the phase error."], [242, 2, 1, "", "__init__", "Initializes the PED."], [243, 2, 1, "", "data_aided_error", "Simulates the average phase error of the data-aided PED using the specified modulation scheme."], [244, 2, 1, "", "decision_directed_error", "Simulates the average phase error of the decision-directed PED using the specified modulation scheme."], [245, 4, 1, "", "gain", "The gain of the phase error detector $K_p$."]], "sdr.PED.__call__": [[241, 3, 2, "p-received", "received", "The received complex symbols $tilde{a}[k]$."], [241, 3, 2, "p-reference", "reference", "The reference complex symbols, either the known transmitted complex symbols $a[k]$ or the complex symbols decisions $hat{a}[k]$."]], "sdr.PED.data_aided_error": [[243, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [243, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PED.decision_directed_error": [[244, 3, 2, "p-modem", "modem", "The linear modulation scheme."], [244, 3, 2, "p-n_points", "n_points", "The number of points in the simulation."]], "sdr.PSK": [[247, 2, 1, "", "__init__", "Creates a new PSK object."], [248, 2, 1, "", "ber", "Computes the bit error rate (BER) at the provided $E_b/N_0$ values."], [249, 4, 1, "", "phase_offset", "The phase offset $phi$ in degrees."], [250, 2, 1, "", "ser", "Computes the symbol error rate (SER) at the provided $E_s/N_0$ values."], [251, 4, 1, "", "symbol_map", "The symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.PSK.__init__": [[247, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [247, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the coded bits per symbol."], [247, 3, 2, "p-phase_offset", "phase_offset", "The phase offset $phi$ in degrees."], [247, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [247, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [247, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [247, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PSK.ber": [[248, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [248, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."]], "sdr.PSK.ser": [[250, 3, 2, "p-diff_encoded", "diff_encoded", "Indicates whether the input symbols were differentially encoded."], [250, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."]], "sdr.PiMPSK": [[253, 2, 1, "", "__init__", "Creates a new $pi/M$ PSK object."]], "sdr.PiMPSK.__init__": [[253, 3, 2, "p-alpha", "alpha", "The roll-off factor of the pulse shape. If None, 0.2 is used for \"rc\" and \"srrc\"."], [253, 3, 2, "p-order", "order", "The modulation order $M = 2^k$, where $k ge 1$ is the coded bits per symbol."], [253, 3, 2, "p-phase_offset", "phase_offset", "The absolute phase offset $phi$ in degrees."], [253, 3, 2, "p-pulse_shape", "pulse_shape", "The pulse shape $h[n]$ of the modulated signal."], [253, 3, 2, "p-span", "span", "The span of the pulse shape in symbols. This is only used if pulse_shape is a string. If None, 1 is used for \"rect\" and 10 is used for \"rc\" and \"srrc\"."], [253, 3, 2, "p-sps", "sps", "The number of samples per symbol $f_s / f_{sym}$."], [253, 3, 2, "p-symbol_labels", "symbol_labels", "The decimal symbol labels of consecutive complex symbols."]], "sdr.PolyphaseFIR": [[255, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [256, 2, 1, "", "__init__", "Creates a polyphase FIR filter."], [257, 4, 1, "", "branches", "The number of polyphase branches $B$."], [258, 4, 1, "", "decimation", "The integer decimation rate $Q$."], [259, 4, 1, "", "delay", "The delay of polyphase FIR filter in samples."], [260, 4, 1, "", "input", "The input connection method."], [261, 4, 1, "", "interpolation", "The integer interpolation rate $P$."], [262, 4, 1, "", "order", "The order $N = (M + 1)B - 1$ of the FIR prototype filter $h[n]$."], [263, 4, 1, "", "output", "The output connection method."], [264, 4, 1, "", "polyphase_order", "The order $M = (N + 1)/B - 1$ of each FIR polyphase filter $h_i[n]$."], [265, 4, 1, "", "polyphase_taps", "The polyphase feedforward taps $h_i[n]$."], [266, 4, 1, "", "rate", "The fractional resampling rate $r = P/Q$. The output sample rate is $f_{s,out} = f_{s,in} cdot r$."], [267, 2, 1, "", "reset", "Resets the filter state. Only useful when using streaming mode."], [268, 4, 1, "", "taps", "The prototype feedforward taps $h[n]$."]], "sdr.PolyphaseFIR.__call__": [[255, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [255, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.PolyphaseFIR.__init__": [[256, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [256, 3, 2, "p-input", "input", "The input connection method."], [256, 3, 2, "p-output", "output", "The output connection method."], [256, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [256, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.Q": [[269, 3, 2, "p-x", "x", "The real-valued input $x$."]], "sdr.Qinv": [[270, 3, 2, "p-p", "p", "The probability $p$ of exceeding the returned value $x$."]], "sdr.ReplicaCorrelator": [[272, 2, 1, "", "p_d", "Computes the probability of detection $P_d$."], [273, 2, 1, "", "p_fa", "Computes the probability of false alarm $P_{fa}$."], [274, 2, 1, "", "roc", "Computes the receiver operating characteristic (ROC) curve."], [275, 2, 1, "", "threshold", "Computes the threshold $gamma'$."]], "sdr.ReplicaCorrelator.p_d": [[272, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [272, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [272, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."]], "sdr.ReplicaCorrelator.p_fa": [[273, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [273, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [273, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."], [273, 3, 2, "p-threshold", "threshold", "The threshold $gamma'$."]], "sdr.ReplicaCorrelator.roc": [[274, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [274, 3, 2, "p-enr", "enr", "The received energy-to-noise ratio $mathcal{E}/sigma^2$ in dB."], [274, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$. If None, the ROC curve is computed for p_fa = np.logspace(-10, 0, 101)."]], "sdr.ReplicaCorrelator.threshold": [[275, 3, 2, "p-complex", "complex", "Indicates whether the signal is complex."], [275, 3, 2, "p-energy", "energy", "The received energy $mathcal{E} = sum_{i=0}^{N-1} left| s[n] right|^2$."], [275, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [275, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$."]], "sdr.Resampler": [[277, 2, 1, "", "__call__", "Filters the input signal $x[n]$ with the polyphase FIR filter."], [278, 2, 1, "", "__init__", "Creates a polyphase FIR rational resampling filter."], [279, 4, 1, "", "method", "The method used to design the polyphase resampling filter."]], "sdr.Resampler.__call__": [[277, 3, 2, "p-mode", "mode", "The non-streaming convolution mode."], [277, 3, 2, "p-x", "x", "The input signal $x[n]$ with sample rate $f_s$ and length $L$."]], "sdr.Resampler.__init__": [[278, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB. Only used when taps=\"kaiser\"."], [278, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [278, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [278, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even. Only used when taps=\"kaiser\"."], [278, 3, 2, "p-streaming", "streaming", "Indicates whether to use streaming mode. In streaming mode, previous inputs are preserved between calls to __call__()."], [278, 3, 2, "p-taps", "taps", "The prototype filter design specification."]], "sdr.albersheim": [[280, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{nc} ge 1$."], [280, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [280, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."]], "sdr.average_power": [[281, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the average power. The default is None, which computes the average power of the entire array."], [281, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [281, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.awgn": [[282, 3, 2, "p-noise", "noise", "The noise power (variance) in linear units. If noise is None, snr must be specified."], [282, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [282, 3, 2, "p-snr", "snr", "The desired signal-to-noise ratio (SNR) in dB. If specified, the average signal power is measured explicitly. It is assumed that $x[n]$ contains signal only. If the signal power is known, the desired noise variance can be computed and passed in noise. If snr is None, noise must be specified."], [282, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which AWGN is added."]], "sdr.awgn_capacity": [[283, 3, 2, "p-bandwidth", "bandwidth", "The bandwidth $B$ of the channel in Hz. If specified, the capacity is calculated in bits/s. If None, the capacity is calculated in bits/2D."], [283, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N$ in dB of the channel."]], "sdr.barker_code": [[284, 3, 2, "p-length", "length", "The length $n$ of the Barker code/sequence."], [284, 3, 2, "p-output", "output", "The output format of the Barker code/sequence."]], "sdr.bec": [[285, 3, 2, "p-p", "p", "The probability $p$ of a bit erasure."], [285, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [285, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bec_capacity": [[286, 3, 2, "p-p", "p", "The erasure probability $p$ of the BEC channel."]], "sdr.berlekamp_massey": [[287, 3, 2, "p-output", "output", "The output object type."], [287, 3, 2, "p-sequence", "sequence", "A linear recurrent sequence $y$ in $mathrm{GF}(p^m)$."]], "sdr.biawgn_capacity": [[288, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / N = A^2 / sigma^2$ at the output of the channel in dB."]], "sdr.binary_code": [[289, 3, 2, "p-degree", "degree", "The degree $m$ of the binary code."]], "sdr.bsc": [[290, 3, 2, "p-p", "p", "The probability $p$ of a bit flip."], [290, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [290, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in {0, 1}$."]], "sdr.bsc_capacity": [[291, 3, 2, "p-p", "p", "The transition probability $p$ of the BSC channel."]], "sdr.coherent_gain": [[292, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $T_C B_C$ in seconds-Hz (unitless). If the signal bandwidth equals the sample rate, the argument equals the number of samples $N_c$ to coherently integrate."]], "sdr.coherent_gain_loss": [[293, 3, 2, "p-freq", "freq", "The frequency offset $Delta f$ or signal bandwidth $B_C$ in Hz."], [293, 3, 2, "p-time", "time", "The coherent integration time $T_C$ or time offset in $Delta t$ in seconds."]], "sdr.composite_snr": [[294, 3, 2, "p-snr1", "snr1", "The signal-to-noise ratio (SNR) of the first signal $gamma_1$ in dB."], [294, 3, 2, "p-snr2", "snr2", "The signal-to-noise ratio (SNR) of the second signal $gamma_2$ in dB."]], "sdr.crest_factor": [[295, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.db": [[296, 3, 2, "p-type", "type", "The type of input value or signal."], [296, 3, 2, "p-x", "x", "The input value or signal."]], "sdr.design_bandpass_fir": [[297, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [297, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [297, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [297, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [297, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_bandstop_fir": [[298, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [298, 3, 2, "p-bandwidth", "bandwidth", "The two-sided bandwidth about $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [298, 3, 2, "p-center_freq", "center_freq", "The center frequency $f_{center}$, normalized to the Nyquist frequency $f_s / 2$."], [298, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [298, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_frac_delay_fir": [[299, 3, 2, "p-delay", "delay", "The fractional delay $0 le Delta n le 1$."], [299, 3, 2, "p-length", "length", "The filter length $L$. Filters with even length have best performance. Filters with odd length are equivalent to an even-length filter with an appended zero."]], "sdr.design_highpass_fir": [[300, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [300, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [300, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [300, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_lowpass_fir": [[301, 3, 2, "p-atten", "atten", "The sidelobe attenuation in dB. Only used if window is \"chebyshev\" or \"kaiser\"."], [301, 3, 2, "p-cutoff_freq", "cutoff_freq", "The cutoff frequency $f_c$, normalized to the Nyquist frequency $f_s / 2$."], [301, 3, 2, "p-order", "order", "The filter order $N$. Must be even."], [301, 3, 2, "p-window", "window", "The time-domain window to use."]], "sdr.design_multirate_fir": [[302, 3, 2, "p-atten", "atten", "The stopband attenuation $A_{text{stop}}$ in dB."], [302, 3, 2, "p-decimation", "decimation", "The decimation rate $Q$."], [302, 3, 2, "p-interpolation", "interpolation", "The interpolation rate $P$."], [302, 3, 2, "p-polyphase_order", "polyphase_order", "The order of each polyphase filter. Must be odd, such that the filter lengths are even."]], "sdr.diff_decode": [[303, 3, 2, "p-y", "y", "The input encoded data $y[k]$."], [303, 3, 2, "p-y_prev", "y_prev", "The previous value of the encoded data $y[k-1]$."]], "sdr.diff_encode": [[304, 3, 2, "p-x", "x", "The input uncoded data $x[k]$."], [304, 3, 2, "p-y_prev", "y_prev", "The previous value of the output encoded data $y[k-1]$."]], "sdr.dmc": [[305, 3, 2, "p-P", "P", "The $m times n$ transition probability matrix $P$, where $P_{i,j} = Pr(Y = y_j | X = x_i)$."], [305, 3, 2, "p-X", "X", "The input alphabet $mathcal{X}$ of size $m$. If None, it is assumed that $mathcal{X} = {0, 1, ldots, m-1}$."], [305, 3, 2, "p-Y", "Y", "The output alphabet $mathcal{Y}$ of size $n$. If None, it is assumed that $mathcal{Y} = {0, 1, ldots, n-1}$."], [305, 3, 2, "p-seed", "seed", "The seed for the random number generator. This is passed to numpy.random.default_rng()."], [305, 3, 2, "p-x", "x", "The input sequence $x$ with $x_i in mathcal{X}$."]], "sdr.downsample": [[306, 3, 2, "p-rate", "rate", "The downsampling factor $r$."], [306, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.ebn0_to_esn0": [[307, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [307, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [307, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.ebn0_to_snr": [[308, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [308, 3, 2, "p-ebn0", "ebn0", "Bit energy $E_b$ to noise PSD $N_0$ ratio in dB."], [308, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [308, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.energy": [[309, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the energy. The default is None, which computes the energy of the entire array."], [309, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [309, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.esn0_to_ebn0": [[310, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [310, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [310, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."]], "sdr.esn0_to_snr": [[311, 3, 2, "p-esn0", "esn0", "Symbol energy $E_s$ to noise PSD $N_0$ ratio in dB."], [311, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.euclidean": [[312, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [312, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [312, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.evm": [[313, 3, 2, "p-norm", "norm", "The normalization source used in the EVM calculation."], [313, 3, 2, "p-output", "output", "The output type of the EVM calculation."], [313, 3, 2, "p-ref", "ref", "The complex reference symbols $x[k]$. This can be the noiseless transmitted symbols or the modulation's symbol map."], [313, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$ to be measured."]], "sdr.fdoa_crlb": [[314, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [314, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz. If None, the noise bandwidth is assumed to be the signal bandwidth $B_s$. The noise bandwidth must be the same for both signals."], [314, 3, 2, "p-rms_integration_time", "rms_integration_time", "The root-mean-square (RMS) integration time $T_{text{rms}}$ in Hz. If None, the RMS integration time is calculated assuming a rectangular power envelope, $T_{text{rms}} = T/sqrt{12}$."], [314, 3, 2, "p-snr1", "snr1", "The signal-to-noise ratio (SNR) of the first signal $gamma_1 = S_1 / (N_0 B_n)$ in dB."], [314, 3, 2, "p-snr2", "snr2", "The signal-to-noise ratio (SNR) of the second signal $gamma_2 = S_2 / (N_0 B_n)$ in dB."], [314, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.foa_crlb": [[315, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [315, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz. If None, the noise bandwidth is assumed to be the signal bandwidth $B_s$. The noise bandwidth must be the same for both signals."], [315, 3, 2, "p-rms_integration_time", "rms_integration_time", "The root-mean-square (RMS) integration time $T_{text{rms}}$ in Hz. If None, the RMS integration time is calculated assuming a rectangular power envelope, $T_{text{rms}} = T/sqrt{12}$."], [315, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) of the signal $gamma = S / (N_0 B_n)$ in dB."], [315, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.free_space_path_loss": [[316, 3, 2, "p-distance", "distance", "The distance $d$ in meters between the transmitter and receiver."], [316, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.frequency_offset": [[317, 3, 2, "p-offset", "offset", "The frequency offset $Delta f_c = f_{c,text{new}} - f_{c,text{old}}$ in Hz."], [317, 3, 2, "p-offset_rate", "offset_rate", "The frequency offset rate $Delta f_c / Delta t$ in Hz/s."], [317, 3, 2, "p-phase", "phase", "The phase offset $phi$ in degrees."], [317, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [317, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the frequency offset is applied."]], "sdr.gaussian": [[318, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [318, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [318, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [318, 3, 2, "p-time_bandwidth", "time_bandwidth", "The time-bandwidth product $B T_{sym}$ of the filter, where $B$ is the one-sided 3-dB bandwidth in Hz and $T_{sym}$ is the symbol time in seconds. The time-bandwidth product can also be thought of as the fractional bandwidth $B / f_{sym}$. Smaller values produce wider pulses."]], "sdr.gold_code": [[319, 3, 2, "p-index", "index", "The index $i$ in $[-2, n)$ of the Gold code."], [319, 3, 2, "p-length", "length", "The length $n = 2^m - 1$ of the Gold code/sequence."], [319, 3, 2, "p-output", "output", "The output format of the Gold code/sequence."], [319, 3, 2, "p-poly1", "poly1", "The primitive polynomial of degree $m$ over $mathrm{GF}(2)$ for the first $m$-sequence. If None, a preferred pair is found using sdr.preferred_pairs()."], [319, 3, 2, "p-poly2", "poly2", "The primitive polynomial of degree $m$ over $mathrm{GF}(2)$ for the second $m$-sequence. If None, a preferred pair is found using sdr.preferred_pairs()."], [319, 3, 2, "p-verify", "verify", "Indicates whether to verify that the provided polynomials are a preferred pair using sdr.is_preferred_pair()."]], "sdr.gray_code": [[320, 3, 2, "p-degree", "degree", "The degree $m$ of the Gray code."]], "sdr.h0": [[321, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [321, 3, 2, "p-detector", "detector", "The detector type."], [321, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [321, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$. Non-coherent integration is only allowable for linear and square-law detectors."], [321, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."]], "sdr.h1": [[322, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [322, 3, 2, "p-detector", "detector", "The detector type."], [322, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [322, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$. Non-coherent integration is only allowable for linear and square-law detectors."], [322, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."], [322, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / sigma^2$ in dB."]], "sdr.hadamard_code": [[323, 3, 2, "p-index", "index", "The index $i$ in $[0, n)$ of the Hadamard code."], [323, 3, 2, "p-length", "length", "The length $n = 2^m$ of the Hadamard code/sequence."], [323, 3, 2, "p-output", "output", "The output format of the Hadamard code/sequence."]], "sdr.half_sine": [[324, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [324, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [324, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.hamming": [[325, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the distance. The default is None, which computes the distance across the entire array."], [325, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [325, 3, 2, "p-y", "y", "The time-domain signal $y[n]$."]], "sdr.hexdump": [[326, 3, 2, "p-data", "data", "The data to display. Each element is considered one byte. Use sdr.pack() or sdr.unpack() to convert data with variable bits per element."], [326, 3, 2, "p-width", "width", "The number of bytes per line."]], "sdr.iq_imbalance": [[327, 3, 2, "p-amplitude", "amplitude", "The amplitude imbalance $A$ in dB. A positive value indicates that the in-phase component is larger than the quadrature component."], [327, 3, 2, "p-phase", "phase", "The phase imbalance $phi$ in degrees. A positive value indicates that the quadrature component leads the in-phase component."], [327, 3, 2, "p-x", "x", "The complex time-domain signal $x[n]$ to which IQ imbalance is applied."]], "sdr.is_preferred_pair": [[328, 3, 2, "p-poly1", "poly1", "The first primitive polynomial $f(x)$."], [328, 3, 2, "p-poly2", "poly2", "The second primitive polynomial $g(x)$."]], "sdr.kasami_code": [[329, 3, 2, "p-index", "index", "The index of the Kasami code."], [329, 3, 2, "p-length", "length", "The length $n = 2^m - 1$ of the Kasami code/sequence. The degree $m$ must be even."], [329, 3, 2, "p-output", "output", "The output format of the Kasami code/sequence."], [329, 3, 2, "p-poly", "poly", "The primitive polynomial of degree $m$ over $mathrm{GF}(2)$. The default is None, which uses the default primitive polynomial of degree $m$, i.e. galois.primitive_poly(2, m)."]], "sdr.linear": [[330, 3, 2, "p-type", "type", "The type of output value or signal."], [330, 3, 2, "p-x", "x", "The input value or signal in dB."]], "sdr.m_sequence": [[331, 3, 2, "p-degree", "degree", "The degree $m$ of the LFSR."], [331, 3, 2, "p-index", "index", "The index $i$ in $[1, q^m)$ of the $m$-sequence. The index represents the initial state of the LFSR. The index dictates the phase of the $m$-sequence. The integer index is interpreted as a polynomial over $mathrm{GF}(q)$, whose coefficients are the shift register values. The default is 1, which corresponds to the $[0, dots, 0, 1]$ state."], [331, 3, 2, "p-output", "output", "The output format of the $m$-sequence."], [331, 3, 2, "p-poly", "poly", "The characteristic polynomial of the LFSR over $mathrm{GF}(q)$. The default is None, which uses the primitive polynomial of degree $m$ over $mathrm{GF}(2)$, galois.primitive_poly(2, degree)."]], "sdr.max_frequency_offset": [[332, 3, 2, "p-cgl", "cgl", "The coherent gain loss (CGL) in dB."], [332, 3, 2, "p-integration_time", "integration_time", "The coherent integration time $T_c$ in seconds."]], "sdr.max_integration_time": [[333, 3, 2, "p-cgl", "cgl", "The coherent gain loss (CGL) in dB."], [333, 3, 2, "p-freq_offset", "freq_offset", "The frequency offset $Delta f$ in Hz."]], "sdr.min_snr": [[334, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [334, 3, 2, "p-detector", "detector", "The detector type."], [334, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [334, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$. Non-coherent integration is only allowable for linear and square-law detectors."], [334, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [334, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$ in $(0, 1)$."]], "sdr.mix": [[335, 3, 2, "p-complex", "complex", "Indicates whether to mix by a complex exponential or real sinusoid."], [335, 3, 2, "p-freq", "freq", "The frequency $f$ of the sinusoid in Hz (or 1/samples if sample_rate=1). The frequency must satisfy $-f_s/2 le f le f_s/2$."], [335, 3, 2, "p-phase", "phase", "The phase $phi$ of the sinusoid in degrees."], [335, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal."], [335, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.non_coherent_gain": [[336, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [336, 3, 2, "p-detector", "detector", "The detector type."], [336, 3, 2, "p-extrapolate", "extrapolate", "Indicates whether to extrapolate $G_{nc}$ using smaller values of $N_{nc}$. This is only done when the non-coherent gain cannot be explicitly solved for due to lack of floating-point precision. If False, the function will return np.nan for any $N_{nc}$ that cannot be solved for."], [336, 3, 2, "p-n_nc", "n_nc", "The number of samples $N_{nc}$ to non-coherently integrate."], [336, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$. This is used to compute the necessary thresholds before and after integration. The non-coherent gain is slightly affected by the $P_{fa}$."], [336, 3, 2, "p-snr", "snr", "The reference SNR in dB."], [336, 3, 2, "p-snr_ref", "snr_ref", "The SNR reference."]], "sdr.p_d": [[337, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [337, 3, 2, "p-detector", "detector", "The detector type."], [337, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [337, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$. Non-coherent integration is only allowable for linear and square-law detectors."], [337, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$ in $(0, 1)$."], [337, 3, 2, "p-snr", "snr", "The signal-to-noise ratio $S / sigma^2$ in dB."]], "sdr.p_fa": [[338, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [338, 3, 2, "p-detector", "detector", "The detector type."], [338, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [338, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$. Non-coherent integration is only allowable for linear and square-law detectors."], [338, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."], [338, 3, 2, "p-threshold", "threshold", "The detection threshold $gamma$ in linear units."]], "sdr.pack": [[339, 3, 2, "p-bpe", "bpe", "The number of bits per element in the output array."], [339, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, the smallest unsigned integer dtype that can hold bpe bits is used."], [339, 3, 2, "p-x", "x", "The input binary array with 1 bit per element."]], "sdr.papr": [[340, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the PAPR. The default is None, which computes the PAPR of the entire array."], [340, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.parabolic_antenna": [[341, 3, 2, "p-diameter", "diameter", "The diameter $d$ in meters of the parabolic reflector."], [341, 3, 2, "p-efficiency", "efficiency", "The efficiency $0 le eta le 1$ of the parabolic reflector."], [341, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.peak_power": [[342, 3, 2, "p-axis", "axis", "Axis or axes along which to compute the peak power. The default is None, which computes the peak power of the entire array."], [342, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [342, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peak_voltage": [[343, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [343, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.peebles": [[344, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{nc} ge 1$."], [344, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [344, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."]], "sdr.plot": [[345, 5, 1, "", "ber", "Plots the bit error rate (BER) as a function of $E_b/N_0$."], [346, 5, 1, "", "constellation", "Plots the constellation of the complex symbols $hat{x}[k]$."], [347, 5, 1, "", "correlation", "Plots the correlation between two time-domain signals $x[n]$ and $y[n]$."], [348, 5, 1, "", "detector_pdfs", "Plots the probability density functions (PDFs) of the detector under $mathcal{H}_0$ and $mathcal{H}_1$."], [349, 5, 1, "", "eye", "Plots the eye diagram of the baseband modulated signal $x[n]$."], [350, 5, 1, "", "filter", "Plots the magnitude response $|H(omega)|^2$, impulse response $h[n]$, and zeros and poles of the filter."], [351, 5, 1, "", "group_delay", "Plots the group delay $tau_g(omega)$ of the IIR filter."], [352, 5, 1, "", "impulse_response", "Plots the impulse response $h[n]$ of a filter."], [353, 5, 1, "", "magnitude_response", "Plots the magnitude response $|H(omega)|^2$ of the filter."], [354, 5, 1, "", "p_d", "Plots the probability of detection $P_d$ as a function of received SNR or ENR."], [355, 5, 1, "", "periodogram", "Plots the estimated power spectral density $P_{xx}$ of a time-domain signal $x[n]$ using Welch's method."], [356, 5, 1, "", "phase_delay", "Plots the phase delay $tau_{phi}(omega)$ of the filter."], [357, 5, 1, "", "phase_response", "Plots the phase response $angle H(omega)$ of the filter."], [358, 5, 1, "", "phase_tree", "Plots the phase tree of a continuous-phase modulated (CPM) signal signal $x[n]$."], [359, 5, 1, "", "raster", "Plots a raster of the time-domain signal $x[n]$."], [360, 5, 1, "", "roc", "Plots the receiver operating characteristic (ROC) curve as a function of $P_{fa}$."], [361, 5, 1, "", "ser", "Plots the symbol error rate (SER) as a function of $E_s/N_0$."], [362, 5, 1, "", "shannon_limit_ebn0", "Plots the Shannon limit for the bit energy-to-noise PSD ratio $E_b/N_0$."], [363, 5, 1, "", "spectrogram", "Plots the spectrogram of a time-domain signal $x[n]$ using Welch's method."], [364, 5, 1, "", "step_response", "Plots the step response $s[n]$ of a filter."], [365, 5, 1, "", "symbol_map", "Plots the symbol map of the complex symbols $hat{x}[k]$."], [366, 5, 1, "", "time_domain", "Plots a time-domain signal $x[n]$."], [367, 5, 1, "", "use_style", "Applies sdr's default matplotlib rcParams."], [368, 5, 1, "", "zeros_poles", "Plots the zeros and poles of the filter."]], "sdr.plot.ber": [[345, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [345, 3, 2, "p-ber", "ber", "The bit error rate $P_{be}$."], [345, 3, 2, "p-ebn0", "ebn0", "The bit energy $E_b$ to noise PSD $N_0$ ratio (dB)."], [345, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."]], "sdr.plot.constellation": [[346, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [346, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if persistence=True."], [346, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [346, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 10% larger than the maximum value."], [346, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the points as a persistence plot. A persistence plot is a 2D histogram of the points."], [346, 3, 2, "p-x_hat", "x_hat", "The complex symbols $hat{x}[k]$."]], "sdr.plot.correlation": [[347, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [347, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [347, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [347, 3, 2, "p-mode", "mode", "The numpy.correlate() correlation mode. If \"circular\", a circular correlation is computed using FFTs."], [347, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Lag (samples)\"."], [347, 3, 2, "p-x", "x", "The first time-domain signal $x[n]$."], [347, 3, 2, "p-y", "y", "The second time-domain signal $y[n]$."], [347, 3, 2, "p-y_axis", "y_axis", "Indicates how to plot the y-axis. If \"complex\", the real and imaginary parts are plotted separately."]], "sdr.plot.detector_pdfs": [[348, 3, 2, "p-annotate", "annotate", "Indicates whether to annotate the plot with the probabilities of false alarm and detection."], [348, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [348, 3, 2, "p-h0", "h0", "The statistical distribution under $mathcal{H}_0$."], [348, 3, 2, "p-h1", "h1", "The statistical distribution under $mathcal{H}_1$."], [348, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [348, 3, 2, "p-p_h0", "p_h0", "The probability of the $mathcal{H}_0$ tails to plot. The smaller the value, the longer the x-axis."], [348, 3, 2, "p-p_h1", "p_h1", "The probability of the $mathcal{H}_1$ tails to plot. The smaller the value, the longer the x-axis."], [348, 3, 2, "p-points", "points", "The number of points to use for the x-axis."], [348, 3, 2, "p-shade", "shade", "Indicates whether to shade the tails of the PDFs."], [348, 3, 2, "p-threshold", "threshold", "The detection threshold $gamma$."], [348, 3, 2, "p-x", "x", "The x-axis values to use for the plot. If not provided, it will be generated automatically."]], "sdr.plot.eye": [[349, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [349, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [349, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [349, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [349, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [349, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [349, 3, 2, "p-span", "span", "The number of symbols per raster."], [349, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [349, 3, 2, "p-x", "x", "The baseband modulated signal $x[n]$. If x is complex, in-phase and quadrature eye diagrams are plotted in separate subplots."]], "sdr.plot.filter": [[350, 3, 2, "p-N_freq", "N_freq", "The number of samples $N_f$ in the frequency response."], [350, 3, 2, "p-N_time", "N_time", "The number of samples $N_t$ in the time domain. If None, the length of b is used for FIR filters and 100 for IIR filters."], [350, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [350, 3, 2, "p-filter", "filter", "The filter definition."], [350, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [350, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis."]], "sdr.plot.group_delay": [[351, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [351, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [351, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [351, 3, 2, "p-filter", "filter", "The filter definition."], [351, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [351, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [351, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.impulse_response": [[352, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [352, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [352, 3, 2, "p-filter", "filter", "The filter definition."], [352, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [352, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. Can be useful for comparing the impulse response of filters with different lengths."]], "sdr.plot.magnitude_response": [[353, 3, 2, "p-N", "N", "The number of samples $N$ in the frequency response."], [353, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [353, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [353, 3, 2, "p-filter", "filter", "The filter definition."], [353, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [353, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [353, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."], [353, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic magnitude response."]], "sdr.plot.p_d": [[354, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [354, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [354, 3, 2, "p-p_d", "p_d", "The probability of detection $P_d$."], [354, 3, 2, "p-x", "x", "The SNR or ENR in dB."], [354, 3, 2, "p-x_label", "x_label", "The x-axis label to use."]], "sdr.plot.periodogram": [[355, 3, 2, "p-average", "average", "The type of averaging to use. Options are to average the periodograms using the mean or median."], [355, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [355, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [355, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [355, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [355, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [355, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [355, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [355, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [355, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [355, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."], [355, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a linear or logarithmic power spectral density."]], "sdr.plot.phase_delay": [[356, 3, 2, "p-N", "N", "The number of samples $N$ in the phase delay."], [356, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [356, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [356, 3, 2, "p-filter", "filter", "The filter definition."], [356, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [356, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [356, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_response": [[357, 3, 2, "p-N", "N", "The number of samples $N$ in the phase response."], [357, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [357, 3, 2, "p-decades", "decades", "The number of decades to plot when x_axis=\"log\"."], [357, 3, 2, "p-filter", "filter", "The filter definition."], [357, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [357, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Normalized Frequency\"."], [357, 3, 2, "p-unwrap", "unwrap", "Indicates whether to unwrap the phase response."], [357, 3, 2, "p-x_axis", "x_axis", "The x-axis scaling. Options are to display a one-sided spectrum, a two-sided spectrum, or one-sided spectrum with a logarithmic frequency axis. The default is \"auto\" which selects \"one-sided\" for real-valued filters and \"two-sided\" for complex-valued filters."]], "sdr.plot.phase_tree": [[358, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [358, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [358, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to sdr.plot.raster()."], [358, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Symbol\"."], [358, 3, 2, "p-span", "span", "The number of symbols per raster."], [358, 3, 2, "p-sps", "sps", "The number of samples per symbol."], [358, 3, 2, "p-x", "x", "The baseband CPM signal $x[n]$."]], "sdr.plot.raster": [[359, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [359, 3, 2, "p-color", "color", "Indicates how to color the rasters. If \"index\", the rasters are colored based on their index. If a valid Matplotlib color, the rasters are all colored with that color."], [359, 3, 2, "p-colorbar", "colorbar", "Indicates whether to add a colorbar to the plot. This is only added if color=\"index\" or persistence=True."], [359, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to Matplotlib functions."], [359, 3, 2, "p-length", "length", "The length of each raster in samples. This must be provided if x is 1D."], [359, 3, 2, "p-persistence", "persistence", "Indicates whether to plot the raster as a persistence plot. A persistence plot is a 2D histogram of the rasters."], [359, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [359, 3, 2, "p-stride", "stride", "The stride between each raster in samples. If None, the stride is set to length."], [359, 3, 2, "p-x", "x", "The real time-domain signal $x[n]$. If x is 1D, the rastering is determined by length and stride. If x is 2D, the rows correspond to each raster."]], "sdr.plot.roc": [[360, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [360, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to the plotting function defined by type."], [360, 3, 2, "p-p_d", "p_d", "The probability of detection $P_d$."], [360, 3, 2, "p-p_fa", "p_fa", "The probability of false alarm $P_{fa}$."], [360, 3, 2, "p-type", "type", "The type of plot to generate."]], "sdr.plot.ser": [[361, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [361, 3, 2, "p-esn0", "esn0", "The symbol energy $E_s$ to noise PSD $N_0$ ratio (dB)."], [361, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.semilogy()."], [361, 3, 2, "p-ser", "ser", "The symbol error rate $P_{se}$."]], "sdr.plot.shannon_limit_ebn0": [[362, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [362, 3, 2, "p-rho", "rho", "The nominal spectral efficiency $rho$ of the modulation in bits/2D."]], "sdr.plot.spectrogram": [[363, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [363, 3, 2, "p-detrend", "detrend", "The type of detrending to apply. Options are to remove the mean or a linear trend from each segment."], [363, 3, 2, "p-fft", "fft", "The number of points to use in the FFT. If None, the FFT length is set to length."], [363, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.pcolormesh(). The following keyword arguments are set by default. The defaults may be overwritten."], [363, 3, 2, "p-length", "length", "The length of each segment in samples. If None, the length is set to 256."], [363, 3, 2, "p-overlap", "overlap", "The number of samples to overlap between segments. If None, the overlap is set to length // 2."], [363, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be label as \"Samples\" and the y-axis as \"Normalized Frequency\"."], [363, 3, 2, "p-window", "window", "The windowing function to use. This can be a string or a vector of length length."], [363, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."], [363, 3, 2, "p-y_axis", "y_axis", "The y-axis scaling. Options are to display a one-sided spectrum or a two-sided spectrum. The default is \"auto\" which selects \"one-sided\" for real-valued signals and \"two-sided\" for complex-valued signals."]], "sdr.plot.step_response": [[364, 3, 2, "p-N", "N", "The number of samples $N$ to plot. If None, the length of b is used for FIR filters and 100 for IIR filters."], [364, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [364, 3, 2, "p-filter", "filter", "The filter definition."], [364, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.plot.symbol_map": [[365, 3, 2, "p-annotate", "annotate", "If True, the symbols are annotated with their index. If \"bin\", the symbols are annotated with their binary representation."], [365, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [365, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot(). The following keyword arguments are set by default. The defaults may be overwritten."], [365, 3, 2, "p-limits", "limits", "The axis limits, which apply to both the x- and y-axis. If None, the axis limits are set to 50% larger than the maximum value."], [365, 3, 2, "p-modulation", "modulation", "The linear modulation or symbol map ${0, dots, M-1} mapsto mathbb{C}$."]], "sdr.plot.time_domain": [[366, 3, 2, "p-centered", "centered", "Indicates whether to center the x-axis about 0. This argument is mutually exclusive with offset."], [366, 3, 2, "p-diff", "diff", "Indicates how to differentiate the real and imaginary parts of a complex signal. If \"color\", the real and imaginary parts will have different colors based on the current Matplotlib color cycle. If \"line\", the real part will have a solid line and the imaginary part will have a dashed line, and both lines will share the same color."], [366, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."], [366, 3, 2, "p-offset", "offset", "The x-axis offset to apply to the first sample. The units of the offset are $1/f_s$. This argument is mutually exclusive with centered."], [366, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ of the signal in samples/s. If None, the x-axis will be labeled as \"Samples\"."], [366, 3, 2, "p-t", "t", "The time signal $t[n]$. The units are assumed to be $1/f_s$."], [366, 3, 2, "p-x", "x", "The time-domain signal $x[n]$."]], "sdr.plot.zeros_poles": [[368, 3, 2, "p-ax", "ax", "The axis to plot on. If None, the current axis is used."], [368, 3, 2, "p-filter", "filter", "The filter definition."], [368, 3, 2, "p-kwargs", "kwargs", "Additional keyword arguments to pass to matplotlib.pyplot.plot()."]], "sdr.polyphase_decompose": [[369, 3, 2, "p-branches", "branches", "The number of polyphase branches $B$."], [369, 3, 2, "p-taps", "taps", "The prototype filter feedforward coefficients $h[n]$."]], "sdr.preferred_pairs": [[370, 3, 2, "p-degree", "degree", "The degree $m$ of the $m$-sequences."], [370, 3, 2, "p-poly1", "poly1", "The first polynomial $f(x)$ in the preferred pair. If None, all primitive polynomials of degree $m$ that yield preferred pair $m$-sequences are returned."]], "sdr.raised_cosine": [[371, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [371, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [371, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [371, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rectangular": [[372, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [372, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps samples, but only the center sps samples are non-zero. The only reason for span to be larger than 1 is to add delay to the filter."], [372, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.rms_bandwidth": [[373, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [373, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.rms_integration_time": [[374, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [374, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.rms_voltage": [[375, 3, 2, "p-db", "db", "Indicates whether to return the result in decibels (dB)."], [375, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to measure."]], "sdr.root_raised_cosine": [[376, 3, 2, "p-alpha", "alpha", "The excess bandwidth $0 le alpha le 1$ of the filter."], [376, 3, 2, "p-norm", "norm", "Indicates how to normalize the pulse shape."], [376, 3, 2, "p-span", "span", "The length of the filter in symbols. The length of the filter is span * sps + 1 samples. The filter order span * sps must be even."], [376, 3, 2, "p-sps", "sps", "The number of samples per symbol."]], "sdr.sample_rate_offset": [[377, 3, 2, "p-offset", "offset", "The sample rate offset $Delta f_s = f_{s,text{new}} - f_{s,text{old}}$ in samples/s."], [377, 3, 2, "p-sample_rate", "sample_rate", "The sample rate $f_s$ in samples/s."], [377, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ to which the sample rate offset is applied."]], "sdr.shannon_limit_ebn0": [[378, 3, 2, "p-rho", "rho", "The nominal spectral efficiency $rho$ of the modulation in bits/2D."]], "sdr.shannon_limit_snr": [[379, 3, 2, "p-rho", "rho", "The nominal spectral efficiency $rho$ of the modulation in bits/2D."]], "sdr.shnidman": [[380, 3, 2, "p-n_nc", "n_nc", "The number of non-coherent combinations $N_{nc} ge 1$."], [380, 3, 2, "p-p_d", "p_d", "The desired probability of detection $P_d$ in $(0, 1)$."], [380, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."], [380, 3, 2, "p-swerling", "swerling", "The Swerling target model."]], "sdr.snr_to_ebn0": [[381, 3, 2, "p-bps", "bps", "Coded bits per symbol $log_2 M$, where $M$ is the modulation order."], [381, 3, 2, "p-rate", "rate", "Code rate $r = k/n$, where $k$ is the number of information bits and $n$ is the number of coded bits."], [381, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [381, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.snr_to_esn0": [[382, 3, 2, "p-snr", "snr", "Signal-to-noise ratio $S/N$ in dB."], [382, 3, 2, "p-sps", "sps", "Samples per symbol $f_s / f_{sym}$."]], "sdr.tdoa_crlb": [[383, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [383, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz. If None, the noise bandwidth is assumed to be the signal bandwidth $B_s$. The noise bandwidth must be the same for both signals."], [383, 3, 2, "p-rms_bandwidth", "rms_bandwidth", "The root-mean-square (RMS) bandwidth $B_{s,text{rms}}$ in Hz. If None, the RMS bandwidth is calculated assuming a rectangular spectrum, $B_{s,text{rms}} = B_s/sqrt{12}$."], [383, 3, 2, "p-snr1", "snr1", "The signal-to-noise ratio (SNR) of the first signal $gamma_1 = S_1 / (N_0 B_n)$ in dB."], [383, 3, 2, "p-snr2", "snr2", "The signal-to-noise ratio (SNR) of the second signal $gamma_2 = S_2 / (N_0 B_n)$ in dB."], [383, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.threshold": [[384, 3, 2, "p-complex", "complex", "Indicates whether the input signal is real or complex. This affects how the SNR is converted to noise variance."], [384, 3, 2, "p-detector", "detector", "The detector type."], [384, 3, 2, "p-n_c", "n_c", "The number of samples to coherently integrate $N_c$."], [384, 3, 2, "p-n_nc", "n_nc", "The number of samples to non-coherently integrate $N_{nc}$. Non-coherent integration is only allowable for linear and square-law detectors."], [384, 3, 2, "p-p_fa", "p_fa", "The desired probability of false alarm $P_{fa}$ in $(0, 1)$."], [384, 3, 2, "p-sigma2", "sigma2", "The noise variance $sigma^2$ in linear units."]], "sdr.to_complex_baseband": [[385, 3, 2, "p-x_r", "x_r", "The real passband signal $x_r[n]$ centered at $f_{s,r}/4$ with sample rate $f_{s,r}$. If the length is odd, one zero is appended to the end."]], "sdr.to_real_passband": [[386, 3, 2, "p-x_c", "x_c", "The complex baseband signal $x_c[n]$ centered at $0$ with sample rate $f_{s,c}$."]], "sdr.toa_crlb": [[387, 3, 2, "p-bandwidth", "bandwidth", "The signal bandwidth $B_s$ in Hz."], [387, 3, 2, "p-noise_bandwidth", "noise_bandwidth", "The noise bandwidth $B_n$ in Hz. If None, the noise bandwidth is assumed to be the signal bandwidth $B_s$. The noise bandwidth must be the same for both signals."], [387, 3, 2, "p-rms_bandwidth", "rms_bandwidth", "The root-mean-square (RMS) bandwidth $B_{s,text{rms}}$ in Hz. If None, the RMS bandwidth is calculated assuming a rectangular spectrum, $B_{s,text{rms}} = B_s/sqrt{12}$."], [387, 3, 2, "p-snr", "snr", "The signal-to-noise ratio (SNR) of the signal $gamma = S / (N_0 B_n)$ in dB."], [387, 3, 2, "p-time", "time", "The integration time $T$ in seconds."]], "sdr.unpack": [[388, 3, 2, "p-bpe", "bpe", "The number of bits per element in the input array."], [388, 3, 2, "p-dtype", "dtype", "The data type of the output array. If None, numpy.uint8 is used."], [388, 3, 2, "p-x", "x", "The input array with bpe bits per element."]], "sdr.upsample": [[389, 3, 2, "p-rate", "rate", "The upsampling factor $r$."], [389, 3, 2, "p-x", "x", "The time-domain signal $x[n]$ with sample rate $f_s$."]], "sdr.walsh_code": [[390, 3, 2, "p-index", "index", "The index $i$ in $[0, n)$ of the Walsh code. Indicates how many transitions there are in the code."], [390, 3, 2, "p-length", "length", "The length $n = 2^m$ of the Walsh code/sequence."], [390, 3, 2, "p-output", "output", "The output format of the Walsh code/sequence."]], "sdr.wavelength": [[391, 3, 2, "p-freq", "freq", "The frequency $f$ in Hz of the signal."]], "sdr.zadoff_chu_sequence": [[392, 3, 2, "p-length", "length", "The length $N$ of the Zadoff-Chu sequence."], [392, 3, 2, "p-root", "root", "The root $0 < u < N$ of the Zadoff-Chu sequence. The root must be relatively prime to the length, i.e., $gcd(u, N) = 1$."], [392, 3, 2, "p-shift", "shift", "The shift $q in mathbb{Z}$ of the Zadoff-Chu sequence. When $q ne 0$, the returned sequence is a cyclic shift of the root-$u$ Zadoff-Chu sequence."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"code": [0, 397, 399], "interleav": 0, "scrambler": 0, "convers": 1, "decibel": 1, "signal": [1, 3, 4, 394, 402, 403, 408], "nois": [1, 4], "ratio": [1, 4], "detect": [2, 9, 400, 401, 407], "detector": [2, 395], "theoret": 2, "perform": [2, 409], "approxim": 2, "coher": [2, 400, 407], "integr": [2, 400, 407, 409], "non": [2, 407], "digit": [3, 402, 405], "process": [3, 402], "fir": [3, 404], "filter": [3, 9, 404, 405, 409], "iir": [3, 405], "polyphas": 3, "applic": 3, "arbitrari": [3, 403], "resampl": [3, 403], "correl": [3, 393], "manipul": [3, 7], "estim": [4, 9], "time": [4, 9, 408, 409], "domain": [4, 9, 408, 409], "frequenc": [4, 9, 404, 405, 408, 409], "link": 5, "budget": 5, "channel": [5, 394], "capac": 5, "path": 5, "loss": 5, "antenna": 5, "measur": 6, "energi": 6, "power": [6, 408], "voltag": 6, "distanc": 6, "modul": [6, 8, 9, 406], "miscellan": 7, "probabl": 7, "data": 7, "linear": [8, 393], "continu": 8, "phase": [8, 395, 409, 410], "orthogon": 8, "puls": [8, 408, 411], "shape": [8, 408, 411], "symbol": [8, 393, 410], "encod": 8, "plot": [9, 408], "configur": [9, 397, 399], "spectral": 9, "analysi": 9, "constructor": [10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 101, 108, 124, 138, 148, 150, 163, 179, 181, 188, 191, 193, 209, 218, 226, 228, 230, 238, 240, 246, 252, 254, 276], "special": [10, 24, 32, 40, 56, 62, 84, 88, 90, 108, 124, 138, 148, 163, 179, 181, 188, 191, 209, 218, 228, 230, 240, 254, 276], "method": [10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 96, 101, 108, 124, 138, 148, 150, 163, 179, 181, 188, 191, 193, 209, 218, 226, 228, 230, 238, 240, 246, 252, 254, 271, 276], "stream": [10, 62, 84, 88, 108, 138, 148, 163, 179, 188, 191, 228, 254, 276], "mode": [10, 62, 84, 88, 108, 138, 148, 163, 179, 188, 191, 228, 254, 276], "onli": [10, 62, 84, 88, 108, 138, 148, 163, 179, 188, 191, 228, 254, 276], "properti": [10, 19, 24, 32, 40, 42, 56, 62, 67, 84, 88, 90, 108, 124, 138, 148, 150, 163, 179, 181, 188, 191, 193, 209, 218, 226, 228, 230, 238, 240, 246, 252, 254, 276], "note": [20, 42, 67, 127, 152, 193, 226, 238, 246, 252, 288, 294, 314, 315, 316, 355, 363, 373, 374, 383, 387], "see": [20, 43, 44, 53, 101, 103, 114, 115, 116, 118, 121, 124, 127, 150, 152, 169, 171, 176, 194, 195, 205, 227, 239, 247, 248, 250, 253, 269, 270, 280, 295, 314, 315, 319, 321, 322, 328, 334, 336, 340, 344, 348, 370, 373, 374, 378, 379, 380, 383, 387, 389], "also": [20, 43, 44, 53, 101, 103, 114, 115, 116, 118, 121, 124, 127, 150, 152, 169, 171, 176, 194, 195, 205, 227, 239, 247, 248, 250, 253, 269, 270, 280, 295, 314, 315, 319, 321, 322, 328, 334, 336, 340, 344, 348, 370, 373, 374, 378, 379, 380, 383, 387, 389], "polynomi": [124, 150], "state": [124, 150], "warn": [306, 314, 315, 383, 387, 389], "sequenc": 393, "map": [393, 410], "recurr": 393, "maximum": 393, "length": 393, "simul": 394, "model": 394, "impair": 394, "synchron": [395, 412], "lock": [395, 409], "loop": [395, 409], "error": [395, 410], "amplitud": 395, "control": 395, "document": 396, "instal": [396, 397, 398, 399, 413], "build": 396, "doc": 396, "serv": 396, "format": 397, "run": [397, 399], "linter": 397, "formatt": 397, "pre": 397, "commit": 397, "from": [397, 398, 399], "v": [397, 399], "pypi": 398, "github": 398, "edit": 398, "local": 398, "folder": 398, "dev": 398, "depend": 398, "unit": 399, "test": 399, "command": 399, "line": 399, "x_1": [400, 407], "n": [400, 403, 404, 405, 407], "x_2": [400, 407], "farrow": 403, "construct": 403, "an": [403, 404, 405], "input": 403, "x": 403, "t_": 403, "rate": [403, 410], "r": 403, "y": 403, "frac": 403, "upsampl": 403, "integ": 403, "downsampl": 403, "irrat": 403, "creat": [404, 405], "examin": [404, 405, 408], "impuls": [404, 405], "respons": [404, 405, 409], "h": [404, 405], "step": [404, 405, 409], "": [404, 405], "omega": [404, 405], "group": [404, 405], "delai": [404, 405], "tau_g": [404, 405], "fulli": [404, 405], "analyz": [404, 405, 409], "zero": 405, "pole": 405, "stabil": 405, "peak": 408, "averag": 408, "qpsk": [408, 410], "variou": 408, "across": [408, 409], "excess": 408, "bandwidth": 408, "design": 409, "proport": 409, "plu": 409, "ppi": 409, "implement": 409, "pll": 409, "close": 409, "compar": 409, "zeta": 409, "b_n": 409, "t": 409, "shift": 410, "kei": 410, "constel": 410, "bpsk": 410, "8": [410, 414], "psk": 410, "16": [410, 414], "curv": 410, "bit": 410, "rais": 411, "cosin": 411, "squar": 411, "root": 411, "gaussian": 411, "sdr": 413, "featur": 413, "citat": 413, "v0": 414, "0": 414, "20": 414, "chang": 414, "contributor": 414, "19": 414, "18": 414, "17": 414, "15": 414, "14": 414, "13": 414, "12": 414, "11": 414, "10": 414, "9": 414, "7": 414, "6": 414, "5": 414, "4": 414, "3": 414, "2": 414, "1": 414, "version": 415, "alpha": 415, "releas": 415, "beta": 415}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"Coding": [[0, "coding"]], "Interleavers": [[0, "interleavers"]], "Scramblers": [[0, "scramblers"]], "Conversions": [[1, "conversions"]], "Decibels": [[1, "decibels"]], "Signal-to-noise ratios": [[1, "signal-to-noise-ratios"]], "Detection": [[2, "detection"], [9, "detection"], [401, "detection"]], "Detectors": [[2, "detectors"]], "Theoretical performance": [[2, "theoretical-performance"]], "Approximated performance": [[2, "approximated-performance"]], "Coherent integration": [[2, "coherent-integration"], [400, "coherent-integration"]], "Non-coherent integration": [[2, "non-coherent-integration"], [407, "non-coherent-integration"]], "Digital signal processing": [[3, "digital-signal-processing"], [402, "digital-signal-processing"]], "FIR filtering": [[3, "fir-filtering"]], "IIR filtering": [[3, "iir-filtering"]], "Polyphase FIR filtering": [[3, "polyphase-fir-filtering"]], "Filter applications": [[3, "filter-applications"]], "Arbitrary resampling": [[3, "arbitrary-resampling"]], "Correlation": [[3, "correlation"]], "Signal manipulation": [[3, "signal-manipulation"]], "Estimation": [[4, "estimation"]], "Signal-to-noise ratio": [[4, "signal-to-noise-ratio"]], "Time domain": [[4, "time-domain"]], "Frequency domain": [[4, "frequency-domain"]], "Link budgets": [[5, "link-budgets"]], "Channel capacity": [[5, "channel-capacity"]], "Path losses": [[5, "path-losses"]], "Antennas": [[5, "antennas"]], "Measurement": [[6, "measurement"]], "Energy": [[6, "energy"]], "Power": [[6, "power"]], "Voltage": [[6, "voltage"]], "Distance": [[6, "distance"]], "Modulation": [[6, "modulation"], [8, "modulation"], [9, "modulation"], [406, "modulation"]], "Miscellaneous": [[7, "miscellaneous"]], "Probability": [[7, "probability"]], "Data manipulation": [[7, "data-manipulation"]], "Linear modulations": [[8, "linear-modulations"]], "Continuous-phase modulations": [[8, "continuous-phase-modulations"]], "Orthogonal modulations": [[8, "orthogonal-modulations"]], "Pulse shaping": [[8, "pulse-shaping"]], "Symbol encoding": [[8, "symbol-encoding"]], "Plotting": [[9, "plotting"]], "Configuration": [[9, "configuration"], [397, "configuration"], [399, "configuration"]], "Time-domain": [[9, "time-domain"]], "Frequency-domain": [[9, "frequency-domain"]], "Spectral estimation": [[9, "spectral-estimation"]], "Filter analysis": [[9, "filter-analysis"]], "Constructors": [[10, "constructors"], [19, "constructors"], [24, "constructors"], [32, "constructors"], [40, "constructors"], [42, "constructors"], [56, "constructors"], [62, "constructors"], [67, "constructors"], [84, "constructors"], [88, "constructors"], [90, "constructors"], [101, "constructors"], [108, "constructors"], [124, "constructors"], [138, "constructors"], [148, "constructors"], [150, "constructors"], [163, "constructors"], [179, "constructors"], [181, "constructors"], [188, "constructors"], [191, "constructors"], [193, "constructors"], [209, "constructors"], [218, "constructors"], [226, "constructors"], [228, "constructors"], [230, "constructors"], [238, "constructors"], [240, "constructors"], [246, "constructors"], [252, "constructors"], [254, "constructors"], [276, "constructors"]], "Special methods": [[10, "special-methods"], [24, "special-methods"], [32, "special-methods"], [40, "special-methods"], [56, "special-methods"], [62, "special-methods"], [84, "special-methods"], [88, "special-methods"], [90, "special-methods"], [108, "special-methods"], [124, "special-methods"], [138, "special-methods"], [148, "special-methods"], [163, "special-methods"], [179, "special-methods"], [181, "special-methods"], [188, "special-methods"], [191, "special-methods"], [209, "special-methods"], [218, "special-methods"], [228, "special-methods"], [230, "special-methods"], [240, "special-methods"], [254, "special-methods"], [276, "special-methods"]], "Streaming mode only": [[10, "streaming-mode-only"], [62, "streaming-mode-only"], [84, "streaming-mode-only"], [88, "streaming-mode-only"], [108, "streaming-mode-only"], [138, "streaming-mode-only"], [148, "streaming-mode-only"], [163, "streaming-mode-only"], [179, "streaming-mode-only"], [188, "streaming-mode-only"], [191, "streaming-mode-only"], [228, "streaming-mode-only"], [254, "streaming-mode-only"], [276, "streaming-mode-only"]], "Properties": [[10, "properties"], [19, "properties"], [24, "properties"], [32, "properties"], [40, "properties"], [42, "properties"], [56, "properties"], [62, "properties"], [67, "properties"], [84, "properties"], [88, "properties"], [90, "properties"], [108, "properties"], [124, "properties"], [138, "properties"], [148, "properties"], [150, "properties"], [163, "properties"], [179, "properties"], [181, "properties"], [188, "properties"], [191, "properties"], [193, "properties"], [209, "properties"], [218, "properties"], [226, "properties"], [228, "properties"], [230, "properties"], [238, "properties"], [240, "properties"], [246, "properties"], [252, "properties"], [254, "properties"], [276, "properties"]], "Methods": [[19, "methods"], [24, "methods"], [32, "methods"], [40, "methods"], [42, "methods"], [56, "methods"], [62, "methods"], [67, "methods"], [84, "methods"], [88, "methods"], [90, "methods"], [96, "methods"], [101, "methods"], [108, "methods"], [124, "methods"], [148, "methods"], [150, "methods"], [163, "methods"], [179, "methods"], [181, "methods"], [188, "methods"], [191, "methods"], [193, "methods"], [209, "methods"], [218, "methods"], [226, "methods"], [228, "methods"], [230, "methods"], [238, "methods"], [240, "methods"], [246, "methods"], [252, "methods"], [254, "methods"], [271, "methods"], [276, "methods"]], "Note": [[20, null], [42, null], [67, null], [127, null], [152, null], [193, null], [226, null], [238, null], [246, null], [252, null], [288, null], [294, null], [314, null], [315, null], [316, null], [355, null], [363, null], [373, null], [374, null], [383, null], [387, null]], "See also": [[20, null], [43, null], [44, null], [53, null], [101, null], [103, null], [114, null], [115, null], [116, null], [118, null], [121, null], [124, null], [127, null], [150, null], [152, null], [169, null], [171, null], [176, null], [194, null], [195, null], [205, null], [227, null], [239, null], [247, null], [248, null], [250, null], [253, null], [269, null], [270, null], [280, null], [295, null], [314, null], [315, null], [319, null], [321, null], [322, null], [328, null], [334, null], [336, null], [340, null], [344, null], [348, null], [370, null], [373, null], [374, null], [378, null], [379, null], [380, null], [383, null], [387, null], [389, null]], "Polynomials": [[124, "polynomials"], [150, "polynomials"]], "State": [[124, "state"], [150, "state"]], "Warning": [[306, null], [314, null], [315, null], [383, null], [387, null], [389, null]], "Sequences": [[393, "sequences"]], "Symbol-mapping sequences": [[393, "symbol-mapping-sequences"]], "Correlation sequences": [[393, "correlation-sequences"]], "Linear recurrent sequences": [[393, "linear-recurrent-sequences"]], "Maximum-length sequences": [[393, "maximum-length-sequences"]], "Simulation": [[394, "simulation"]], "Channel models": [[394, "channel-models"]], "Signal impairments": [[394, "signal-impairments"]], "Synchronization": [[395, "synchronization"], [412, "synchronization"]], "Phase-locked loops": [[395, "phase-locked-loops"], [409, "phase-locked-loops"]], "Phase error detectors": [[395, "phase-error-detectors"]], "Amplitude control loops": [[395, "amplitude-control-loops"]], "Documentation": [[396, "documentation"]], "Install": [[396, "install"], [397, "install"], [399, "install"]], "Build the docs": [[396, "build-the-docs"]], "Serve the docs": [[396, "serve-the-docs"]], "Formatting": [[397, "formatting"]], "Run the linter": [[397, "run-the-linter"]], "Run the formatter": [[397, "run-the-formatter"]], "Pre-commit": [[397, "pre-commit"]], "Run from VS Code": [[397, "run-from-vs-code"], [399, "run-from-vs-code"]], "Installation": [[398, "installation"], [413, "installation"]], "Install from PyPI": [[398, "install-from-pypi"]], "Install from GitHub": [[398, "install-from-github"]], "Editable install from local folder": [[398, "editable-install-from-local-folder"]], "Install the dev dependencies": [[398, "install-the-dev-dependencies"]], "Unit Tests": [[399, "unit-tests"]], "Run from the command line": [[399, "run-from-the-command-line"]], "Detect x_1[n]": [[400, "detect-x-1-n"], [407, "detect-x-1-n"]], "Detect x_2[n]": [[400, "detect-x-2-n"], [407, "detect-x-2-n"]], "Farrow arbitrary resampler": [[403, "farrow-arbitrary-resampler"]], "Construct an input signal, x[n] = x(n T_s)": [[403, "construct-an-input-signal-x-n-x-n-t-s"]], "Resample the input signal with rate r, y[n] = x(n \\frac{T_s}{r})": [[403, "resample-the-input-signal-with-rate-r-y-n-x-n-frac-t-s-r"]], "Upsample the signal by an integer rate": [[403, "upsample-the-signal-by-an-integer-rate"]], "Downsample the signal by an integer rate": [[403, "downsample-the-signal-by-an-integer-rate"]], "Upsample by an irrational rate": [[403, "upsample-by-an-irrational-rate"]], "Downsample by an irrational rate": [[403, "downsample-by-an-irrational-rate"]], "FIR filters": [[404, "fir-filters"]], "Create an FIR filter": [[404, "create-an-fir-filter"]], "Examine the impulse response, h[n]": [[404, "examine-the-impulse-response-h-n"], [405, "examine-the-impulse-response-h-n"]], "Examine the step response, s[n]": [[404, "examine-the-step-response-s-n"], [405, "examine-the-step-response-s-n"]], "Examine the frequency response, H(\\omega)": [[404, "examine-the-frequency-response-h-omega"], [405, "examine-the-frequency-response-h-omega"]], "Examine the group delay, \\tau_g(\\omega)": [[404, "examine-the-group-delay-tau-g-omega"], [405, "examine-the-group-delay-tau-g-omega"]], "Fully analyze a FIR filter": [[404, "fully-analyze-a-fir-filter"]], "IIR filters": [[405, "iir-filters"]], "Create an IIR filter": [[405, "create-an-iir-filter"]], "Examine the zeros and poles": [[405, "examine-the-zeros-and-poles"]], "Fully analyze an IIR filter": [[405, "fully-analyze-an-iir-filter"]], "Poles and digital filter stability": [[405, "poles-and-digital-filter-stability"]], "Peak-to-average power": [[408, "peak-to-average-power"]], "QPSK signal with various pulse shapes": [[408, "qpsk-signal-with-various-pulse-shapes"]], "Examine time domain": [[408, "examine-time-domain"]], "Examine frequency domain": [[408, "examine-frequency-domain"]], "Plot across excess bandwidth": [[408, "plot-across-excess-bandwidth"]], "Design a proportional-plus-integrator (PPI) loop filter": [[409, "design-a-proportional-plus-integrator-ppi-loop-filter"]], "Implement a PLL in the phase domain": [[409, "implement-a-pll-in-the-phase-domain"]], "Implement a PLL in the time domain": [[409, "implement-a-pll-in-the-time-domain"]], "Analyze PLL closed-loop performance": [[409, "analyze-pll-closed-loop-performance"]], "Compare step and frequency response across \\zeta": [[409, "compare-step-and-frequency-response-across-zeta"]], "Compare step and frequency response across B_n T": [[409, "compare-step-and-frequency-response-across-b-n-t"]], "Compare lock time across B_n T": [[409, "compare-lock-time-across-b-n-t"]], "Phase-shift keying": [[410, "phase-shift-keying"]], "Constellations": [[410, "constellations"]], "BPSK": [[410, "bpsk"]], "QPSK": [[410, "qpsk"]], "8-PSK": [[410, "id1"]], "16-PSK": [[410, "id2"]], "Error rate curves": [[410, "error-rate-curves"]], "Bit error rate curves": [[410, "bit-error-rate-curves"]], "Symbol error rate curves": [[410, "symbol-error-rate-curves"]], "Symbol mapping": [[410, "symbol-mapping"]], "Pulse shapes": [[411, "pulse-shapes"]], "Raised cosine": [[411, "raised-cosine"]], "Square-root raised cosine": [[411, "square-root-raised-cosine"]], "Gaussian": [[411, "gaussian"]], "sdr": [[413, "sdr"]], "Features": [[413, "features"]], "Citation": [[413, "citation"]], "v0.0": [[414, "v0-0"]], "v0.0.20": [[414, "v0-0-20"]], "Changes": [[414, "changes"], [414, "id1"], [414, "id3"], [414, "id5"], [414, "id7"], [414, "id9"], [414, "id11"], [414, "id13"], [414, "id15"], [414, "id17"], [414, "id19"], [414, "id21"], [414, "id23"], [414, "id25"], [414, "id27"], [414, "id29"], [414, "id31"], [414, "id33"], [414, "id35"], [414, "id37"]], "Contributors": [[414, "contributors"], [414, "id2"], [414, "id4"], [414, "id6"], [414, "id8"], [414, "id10"], [414, "id12"], [414, "id14"], [414, "id16"], [414, "id18"], [414, "id20"], [414, "id22"], [414, "id24"], [414, "id26"], [414, "id28"], [414, "id30"], [414, "id32"], [414, "id34"], [414, "id36"], [414, "id38"]], "v0.0.19": [[414, "v0-0-19"]], "v0.0.18": [[414, "v0-0-18"]], "v0.0.17": [[414, "v0-0-17"]], "v0.0.16": [[414, "v0-0-16"]], "v0.0.15": [[414, "v0-0-15"]], "v0.0.14": [[414, "v0-0-14"]], "v0.0.13": [[414, "v0-0-13"]], "v0.0.12": [[414, "v0-0-12"]], "v0.0.11": [[414, "v0-0-11"]], "v0.0.10": [[414, "v0-0-10"]], "v0.0.9": [[414, "v0-0-9"]], "v0.0.8": [[414, "v0-0-8"]], "v0.0.7": [[414, "v0-0-7"]], "v0.0.6": [[414, "v0-0-6"]], "v0.0.5": [[414, "v0-0-5"]], "v0.0.4": [[414, "v0-0-4"]], "v0.0.3": [[414, "v0-0-3"]], "v0.0.2": [[414, "v0-0-2"]], "v0.0.1": [[414, "v0-0-1"]], "Versioning": [[415, "versioning"]], "Alpha releases": [[415, "alpha-releases"]], "Beta releases": [[415, "beta-releases"]]}, "indexentries": {"module": [[3, "module-sdr"]], "sdr": [[3, "module-sdr"]]}, "docurls": ["api/coding/", "api/conversions/", "api/detection/", "api/dsp/", "api/estimation/", "api/link-budgets/", "api/measurement/", "api/misc/", "api/modulation/", "api/plotting/", "api/sdr.AGC/", "api/sdr.AGC.__call__/", "api/sdr.AGC.__init__/", "api/sdr.AGC.attack/", "api/sdr.AGC.decay/", "api/sdr.AGC.gain/", "api/sdr.AGC.reference/", "api/sdr.AGC.reset/", "api/sdr.AGC.streaming/", "api/sdr.AdditiveScrambler/", "api/sdr.AdditiveScrambler.__init__/", "api/sdr.AdditiveScrambler.descramble/", "api/sdr.AdditiveScrambler.lfsr/", "api/sdr.AdditiveScrambler.scramble/", "api/sdr.BinaryErasureChannel/", "api/sdr.BinaryErasureChannel.X/", "api/sdr.BinaryErasureChannel.Y/", "api/sdr.BinaryErasureChannel.__call__/", "api/sdr.BinaryErasureChannel.__init__/", "api/sdr.BinaryErasureChannel.capacities/", "api/sdr.BinaryErasureChannel.capacity/", "api/sdr.BinaryErasureChannel.p/", "api/sdr.BinarySymmetricChannel/", "api/sdr.BinarySymmetricChannel.X/", "api/sdr.BinarySymmetricChannel.Y/", "api/sdr.BinarySymmetricChannel.__call__/", "api/sdr.BinarySymmetricChannel.__init__/", "api/sdr.BinarySymmetricChannel.capacities/", "api/sdr.BinarySymmetricChannel.capacity/", "api/sdr.BinarySymmetricChannel.p/", "api/sdr.BlockInterleaver/", "api/sdr.BlockInterleaver.__init__/", "api/sdr.CPM/", "api/sdr.CPM.__init__/", "api/sdr.CPM.ber/", "api/sdr.CPM.bps/", "api/sdr.CPM.demodulate/", "api/sdr.CPM.index/", "api/sdr.CPM.modulate/", "api/sdr.CPM.order/", "api/sdr.CPM.phase_offset/", "api/sdr.CPM.pulse_shape/", "api/sdr.CPM.rx_filter/", "api/sdr.CPM.ser/", "api/sdr.CPM.sps/", "api/sdr.CPM.tx_filter/", "api/sdr.Channel/", "api/sdr.Channel.__call__/", "api/sdr.Channel.__init__/", "api/sdr.Channel.capacities/", "api/sdr.Channel.capacity/", "api/sdr.Channel.reset/", "api/sdr.Channelizer/", "api/sdr.Channelizer.__call__/", "api/sdr.Channelizer.__init__/", "api/sdr.Channelizer.channels/", "api/sdr.Channelizer.method/", "api/sdr.ClosedLoopPLL/", "api/sdr.ClosedLoopPLL.Bn/", "api/sdr.ClosedLoopPLL.BnT/", "api/sdr.ClosedLoopPLL.K0/", "api/sdr.ClosedLoopPLL.K1/", "api/sdr.ClosedLoopPLL.K2/", "api/sdr.ClosedLoopPLL.Kp/", "api/sdr.ClosedLoopPLL.__init__/", "api/sdr.ClosedLoopPLL.frequency_lock_time/", "api/sdr.ClosedLoopPLL.iir/", "api/sdr.ClosedLoopPLL.lock_time/", "api/sdr.ClosedLoopPLL.omega_3dB/", "api/sdr.ClosedLoopPLL.omega_n/", "api/sdr.ClosedLoopPLL.phase_error_variance/", "api/sdr.ClosedLoopPLL.phase_lock_time/", "api/sdr.ClosedLoopPLL.sample_rate/", "api/sdr.ClosedLoopPLL.zeta/", "api/sdr.Decimator/", "api/sdr.Decimator.__init__/", "api/sdr.Decimator.method/", "api/sdr.Decimator.reset/", "api/sdr.Differentiator/", "api/sdr.Differentiator.__init__/", "api/sdr.DiscreteMemorylessChannel/", "api/sdr.DiscreteMemorylessChannel.P/", "api/sdr.DiscreteMemorylessChannel.X/", "api/sdr.DiscreteMemorylessChannel.Y/", "api/sdr.DiscreteMemorylessChannel.__call__/", "api/sdr.DiscreteMemorylessChannel.__init__/", "api/sdr.EnergyDetector/", "api/sdr.EnergyDetector.p_d/", "api/sdr.EnergyDetector.p_fa/", "api/sdr.EnergyDetector.roc/", "api/sdr.EnergyDetector.threshold/", "api/sdr.ErrorRate/", "api/sdr.ErrorRate.__init__/", "api/sdr.ErrorRate.add/", "api/sdr.ErrorRate.counts/", "api/sdr.ErrorRate.error_rate/", "api/sdr.ErrorRate.error_rates/", "api/sdr.ErrorRate.errors/", "api/sdr.FIR/", "api/sdr.FIR.__call__/", "api/sdr.FIR.__init__/", "api/sdr.FIR.__len__/", "api/sdr.FIR.delay/", "api/sdr.FIR.flush/", "api/sdr.FIR.frequency_response/", "api/sdr.FIR.group_delay/", "api/sdr.FIR.impulse_response/", "api/sdr.FIR.order/", "api/sdr.FIR.phase_delay/", "api/sdr.FIR.reset/", "api/sdr.FIR.state/", "api/sdr.FIR.step_response/", "api/sdr.FIR.streaming/", "api/sdr.FIR.taps/", "api/sdr.FLFSR/", "api/sdr.FLFSR.Taps/", "api/sdr.FLFSR.__call__/", "api/sdr.FLFSR.__init__/", "api/sdr.FLFSR.characteristic_poly/", "api/sdr.FLFSR.feedback_poly/", "api/sdr.FLFSR.field/", "api/sdr.FLFSR.initial_state/", "api/sdr.FLFSR.order/", "api/sdr.FLFSR.reset/", "api/sdr.FLFSR.state/", "api/sdr.FLFSR.step/", "api/sdr.FLFSR.taps/", "api/sdr.FLFSR.to_galois_lfsr/", "api/sdr.FarrowResampler/", "api/sdr.FarrowResampler.__call__/", "api/sdr.FarrowResampler.__init__/", "api/sdr.FarrowResampler.delay/", "api/sdr.FarrowResampler.flush/", "api/sdr.FarrowResampler.order/", "api/sdr.FarrowResampler.reset/", "api/sdr.FarrowResampler.state/", "api/sdr.FarrowResampler.streaming/", "api/sdr.FarrowResampler.taps/", "api/sdr.FractionalDelay/", "api/sdr.FractionalDelay.__init__/", "api/sdr.GLFSR/", "api/sdr.GLFSR.Taps/", "api/sdr.GLFSR.__init__/", "api/sdr.GLFSR.characteristic_poly/", "api/sdr.GLFSR.feedback_poly/", "api/sdr.GLFSR.field/", "api/sdr.GLFSR.initial_state/", "api/sdr.GLFSR.order/", "api/sdr.GLFSR.reset/", "api/sdr.GLFSR.state/", "api/sdr.GLFSR.step/", "api/sdr.GLFSR.taps/", "api/sdr.GLFSR.to_fibonacci_lfsr/", "api/sdr.IIR/", "api/sdr.IIR.ZerosPoles/", "api/sdr.IIR.__call__/", "api/sdr.IIR.__init__/", "api/sdr.IIR.a_taps/", "api/sdr.IIR.b_taps/", "api/sdr.IIR.frequency_response/", "api/sdr.IIR.gain/", "api/sdr.IIR.impulse_response/", "api/sdr.IIR.order/", "api/sdr.IIR.poles/", "api/sdr.IIR.reset/", "api/sdr.IIR.state/", "api/sdr.IIR.step_response/", "api/sdr.IIR.streaming/", "api/sdr.IIR.zeros/", "api/sdr.Integrator/", "api/sdr.Integrator.__init__/", "api/sdr.Interleaver/", "api/sdr.Interleaver.__init__/", "api/sdr.Interleaver.__len__/", "api/sdr.Interleaver.deinterleave/", "api/sdr.Interleaver.interleave/", "api/sdr.Interleaver.inverse_map/", "api/sdr.Interleaver.map/", "api/sdr.Interpolator/", "api/sdr.Interpolator.__init__/", "api/sdr.Interpolator.method/", "api/sdr.LeakyIntegrator/", "api/sdr.LeakyIntegrator.__init__/", "api/sdr.LinearModulation/", "api/sdr.LinearModulation.__init__/", "api/sdr.LinearModulation.ber/", "api/sdr.LinearModulation.bps/", "api/sdr.LinearModulation.decide_symbols/", "api/sdr.LinearModulation.demodulate/", "api/sdr.LinearModulation.map_symbols/", "api/sdr.LinearModulation.modulate/", "api/sdr.LinearModulation.order/", "api/sdr.LinearModulation.phase_offset/", "api/sdr.LinearModulation.pulse_shape/", "api/sdr.LinearModulation.rx_filter/", "api/sdr.LinearModulation.ser/", "api/sdr.LinearModulation.sps/", "api/sdr.LinearModulation.symbol_map/", "api/sdr.LinearModulation.tx_filter/", "api/sdr.LoopFilter/", "api/sdr.LoopFilter.__call__/", "api/sdr.LoopFilter.__init__/", "api/sdr.LoopFilter.damping_factor/", "api/sdr.LoopFilter.iir/", "api/sdr.LoopFilter.integral_gain/", "api/sdr.LoopFilter.noise_bandwidth/", "api/sdr.LoopFilter.proportional_gain/", "api/sdr.LoopFilter.reset/", "api/sdr.MLPED/", "api/sdr.MLPED.A_received/", "api/sdr.MLPED.A_reference/", "api/sdr.MLPED.__call__/", "api/sdr.MLPED.__init__/", "api/sdr.MLPED.data_aided_error/", "api/sdr.MLPED.decision_directed_error/", "api/sdr.MLPED.gain/", "api/sdr.MSK/", "api/sdr.MSK.__init__/", "api/sdr.MovingAverager/", "api/sdr.MovingAverager.__init__/", "api/sdr.NCO/", "api/sdr.NCO.__call__/", "api/sdr.NCO.__init__/", "api/sdr.NCO.gain/", "api/sdr.NCO.increment/", "api/sdr.NCO.offset/", "api/sdr.NCO.reset/", "api/sdr.NCO.step/", "api/sdr.OQPSK/", "api/sdr.OQPSK.__init__/", "api/sdr.PED/", "api/sdr.PED.__call__/", "api/sdr.PED.__init__/", "api/sdr.PED.data_aided_error/", "api/sdr.PED.decision_directed_error/", "api/sdr.PED.gain/", "api/sdr.PSK/", "api/sdr.PSK.__init__/", "api/sdr.PSK.ber/", "api/sdr.PSK.phase_offset/", "api/sdr.PSK.ser/", "api/sdr.PSK.symbol_map/", "api/sdr.PiMPSK/", "api/sdr.PiMPSK.__init__/", "api/sdr.PolyphaseFIR/", "api/sdr.PolyphaseFIR.__call__/", "api/sdr.PolyphaseFIR.__init__/", "api/sdr.PolyphaseFIR.branches/", "api/sdr.PolyphaseFIR.decimation/", "api/sdr.PolyphaseFIR.delay/", "api/sdr.PolyphaseFIR.input/", "api/sdr.PolyphaseFIR.interpolation/", "api/sdr.PolyphaseFIR.order/", "api/sdr.PolyphaseFIR.output/", "api/sdr.PolyphaseFIR.polyphase_order/", "api/sdr.PolyphaseFIR.polyphase_taps/", "api/sdr.PolyphaseFIR.rate/", "api/sdr.PolyphaseFIR.reset/", "api/sdr.PolyphaseFIR.taps/", "api/sdr.Q/", "api/sdr.Qinv/", "api/sdr.ReplicaCorrelator/", "api/sdr.ReplicaCorrelator.p_d/", "api/sdr.ReplicaCorrelator.p_fa/", "api/sdr.ReplicaCorrelator.roc/", "api/sdr.ReplicaCorrelator.threshold/", "api/sdr.Resampler/", "api/sdr.Resampler.__call__/", "api/sdr.Resampler.__init__/", "api/sdr.Resampler.method/", "api/sdr.albersheim/", "api/sdr.average_power/", "api/sdr.awgn/", "api/sdr.awgn_capacity/", "api/sdr.barker_code/", "api/sdr.bec/", "api/sdr.bec_capacity/", "api/sdr.berlekamp_massey/", "api/sdr.biawgn_capacity/", "api/sdr.binary_code/", "api/sdr.bsc/", "api/sdr.bsc_capacity/", "api/sdr.coherent_gain/", "api/sdr.coherent_gain_loss/", "api/sdr.composite_snr/", "api/sdr.crest_factor/", "api/sdr.db/", "api/sdr.design_bandpass_fir/", "api/sdr.design_bandstop_fir/", "api/sdr.design_frac_delay_fir/", "api/sdr.design_highpass_fir/", "api/sdr.design_lowpass_fir/", "api/sdr.design_multirate_fir/", "api/sdr.diff_decode/", "api/sdr.diff_encode/", "api/sdr.dmc/", "api/sdr.downsample/", "api/sdr.ebn0_to_esn0/", "api/sdr.ebn0_to_snr/", "api/sdr.energy/", "api/sdr.esn0_to_ebn0/", "api/sdr.esn0_to_snr/", "api/sdr.euclidean/", "api/sdr.evm/", "api/sdr.fdoa_crlb/", "api/sdr.foa_crlb/", "api/sdr.free_space_path_loss/", "api/sdr.frequency_offset/", "api/sdr.gaussian/", "api/sdr.gold_code/", "api/sdr.gray_code/", "api/sdr.h0/", "api/sdr.h1/", "api/sdr.hadamard_code/", "api/sdr.half_sine/", "api/sdr.hamming/", "api/sdr.hexdump/", "api/sdr.iq_imbalance/", "api/sdr.is_preferred_pair/", "api/sdr.kasami_code/", "api/sdr.linear/", "api/sdr.m_sequence/", "api/sdr.max_frequency_offset/", "api/sdr.max_integration_time/", "api/sdr.min_snr/", "api/sdr.mix/", "api/sdr.non_coherent_gain/", "api/sdr.p_d/", "api/sdr.p_fa/", "api/sdr.pack/", "api/sdr.papr/", "api/sdr.parabolic_antenna/", "api/sdr.peak_power/", "api/sdr.peak_voltage/", "api/sdr.peebles/", "api/sdr.plot.ber/", "api/sdr.plot.constellation/", "api/sdr.plot.correlation/", "api/sdr.plot.detector_pdfs/", "api/sdr.plot.eye/", "api/sdr.plot.filter/", "api/sdr.plot.group_delay/", "api/sdr.plot.impulse_response/", "api/sdr.plot.magnitude_response/", "api/sdr.plot.p_d/", "api/sdr.plot.periodogram/", "api/sdr.plot.phase_delay/", "api/sdr.plot.phase_response/", "api/sdr.plot.phase_tree/", "api/sdr.plot.raster/", "api/sdr.plot.roc/", "api/sdr.plot.ser/", "api/sdr.plot.shannon_limit_ebn0/", "api/sdr.plot.spectrogram/", "api/sdr.plot.step_response/", "api/sdr.plot.symbol_map/", "api/sdr.plot.time_domain/", "api/sdr.plot.use_style/", "api/sdr.plot.zeros_poles/", "api/sdr.polyphase_decompose/", "api/sdr.preferred_pairs/", "api/sdr.raised_cosine/", "api/sdr.rectangular/", "api/sdr.rms_bandwidth/", "api/sdr.rms_integration_time/", "api/sdr.rms_voltage/", "api/sdr.root_raised_cosine/", "api/sdr.sample_rate_offset/", "api/sdr.shannon_limit_ebn0/", "api/sdr.shannon_limit_snr/", "api/sdr.shnidman/", "api/sdr.snr_to_ebn0/", "api/sdr.snr_to_esn0/", "api/sdr.tdoa_crlb/", "api/sdr.threshold/", "api/sdr.to_complex_baseband/", "api/sdr.to_real_passband/", "api/sdr.toa_crlb/", "api/sdr.unpack/", "api/sdr.upsample/", "api/sdr.walsh_code/", "api/sdr.wavelength/", "api/sdr.zadoff_chu_sequence/", "api/sequences/", "api/simulation/", "api/synchronization/", "development/documentation/", "development/formatting/", "development/installation/", "development/unit-tests/", "examples/coherent-integration/", "examples/detection/", "examples/dsp/", "examples/farrow-resampler/", "examples/fir-filters/", "examples/iir-filters/", "examples/modulation/", "examples/non-coherent-integration/", "examples/peak-to-average-power/", "examples/phase-locked-loop/", "examples/psk/", "examples/pulse-shapes/", "examples/synchronization/", "", "release-notes/v0.0/", "release-notes/versioning/"]})