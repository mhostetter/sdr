import numpy as np
import pytest

import sdr


def test_exceptions():
    with pytest.raises(TypeError):
        sdr.raised_cosine("invalid", 6, 4)
    with pytest.raises(TypeError):
        sdr.raised_cosine(0.5, 6.0, 4)
    with pytest.raises(TypeError):
        sdr.raised_cosine(0.5, 6, 4.0)

    with pytest.raises(ValueError):
        # Alpha must be non-negative
        sdr.raised_cosine(-0.1, 6, 4)
    with pytest.raises(ValueError):
        # Need at least 1 samples per symbol
        sdr.raised_cosine(0.5, 6, 1)
    with pytest.raises(ValueError):
        # Need at least 2 symbols
        sdr.raised_cosine(0.5, 1, 4)
    with pytest.raises(ValueError):
        # The filter must have even order
        sdr.raised_cosine(0.5, 5, 3)


##############################################################################
# Test across alpha, even/odd span, even/odd sos
##############################################################################


def test_0p1_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.1, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.1, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.038872406382003,
            0.061231182126167,
            0.048652618776885,
            -0.000000000000000,
            -0.063746233445238,
            -0.105983228879395,
            -0.090512377468538,
            0.000000000000000,
            0.152274577211960,
            0.323969139242166,
            0.458965615237187,
            0.510080576909277,
            0.458965615237187,
            0.323969139242166,
            0.152274577211960,
            0.000000000000000,
            -0.090512377468538,
            -0.105983228879395,
            -0.063746233445238,
            -0.000000000000000,
            0.048652618776885,
            0.061231182126167,
            0.038872406382003,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p5_5_4():
    """
    MATLAB:
        >> h = rcosdesign(0.5, 5, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.5, 5, 4)
    h_truth = np.array(
        [
            0.009166733389206,
            0.012160554155472,
            -0.000000000000000,
            -0.030796208575547,
            -0.064167133724443,
            -0.065481863943199,
            0.000000000000000,
            0.140318279878284,
            0.320835668622217,
            0.474261612063424,
            0.534538244277854,
            0.474261612063424,
            0.320835668622217,
            0.140318279878284,
            0.000000000000000,
            -0.065481863943199,
            -0.064167133724443,
            -0.030796208575547,
            -0.000000000000000,
            0.012160554155472,
            0.009166733389206,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p9_6_5():
    """
    MATLAB:
        >> h = rcosdesign(0.9, 6, 5, 'normal'); h'
    """
    h = sdr.raised_cosine(0.9, 6, 5)
    h_truth = np.array(
        [
            0.000000000000000,
            0.000087347868337,
            -0.001363257020297,
            -0.003179196519357,
            -0.002936842615739,
            0.000000000000000,
            0.002046647144249,
            -0.002469101444941,
            -0.014054366070751,
            -0.020928840397673,
            0.000000000000000,
            0.070539192530348,
            0.193056257032045,
            0.339907130444025,
            0.460995668606454,
            0.508002391550292,
            0.460995668606454,
            0.339907130444025,
            0.193056257032045,
            0.070539192530348,
            0.000000000000000,
            -0.020928840397673,
            -0.014054366070751,
            -0.002469101444941,
            0.002046647144249,
            0.000000000000000,
            -0.002936842615739,
            -0.003179196519357,
            -0.001363257020297,
            0.000087347868337,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


##############################################################################
# More detailed testing across alpha
##############################################################################


def test_0p0_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.0, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.0, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.041628469482581,
            0.064758700735410,
            0.050879240478710,
            -0.000000000000000,
            -0.065416166329770,
            -0.107931167892350,
            -0.091582632861678,
            0.000000000000000,
            0.152637721436129,
            0.323793503677051,
            0.457913164308388,
            0.508613646215961,
            0.457913164308388,
            0.323793503677051,
            0.152637721436129,
            0.000000000000000,
            -0.091582632861678,
            -0.107931167892350,
            -0.065416166329770,
            -0.000000000000000,
            0.050879240478710,
            0.064758700735410,
            0.041628469482581,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


# Already tested 0.1


def test_0p2_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.2, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.2, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.031348652416305,
            0.051416592827310,
            0.042348179579921,
            -0.000000000000000,
            -0.058867685885090,
            -0.100207649164317,
            -0.087287518991037,
            0.000000000000000,
            0.151083366061427,
            0.324278764561181,
            0.461831070578428,
            0.514165928273100,
            0.461831070578428,
            0.324278764561181,
            0.151083366061427,
            0.000000000000000,
            -0.087287518991037,
            -0.100207649164317,
            -0.058867685885090,
            -0.000000000000000,
            0.042348179579921,
            0.051416592827310,
            0.031348652416305,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p3_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.3, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.3, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.021071527141773,
            0.037460375638879,
            0.033051321352642,
            -0.000000000000000,
            -0.051203958157697,
            -0.090870878965494,
            -0.081916943583839,
            0.000000000000000,
            0.148824937875766,
            0.324195240675158,
            0.465797218389307,
            0.520100199321809,
            0.465797218389307,
            0.324195240675158,
            0.148824937875766,
            0.000000000000000,
            -0.081916943583839,
            -0.090870878965494,
            -0.051203958157697,
            -0.000000000000000,
            0.033051321352642,
            0.037460375638879,
            0.021071527141773,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p4_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.4, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.4, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.010684193926980,
            0.022369335814967,
            0.022385930132719,
            -0.000000000000000,
            -0.041505797075403,
            -0.078551192269374,
            -0.074538255322689,
            0.000000000000000,
            0.145270289763910,
            0.323163800485507,
            0.470104532787104,
            0.527065057964874,
            0.470104532787104,
            0.323163800485507,
            0.145270289763910,
            0.000000000000000,
            -0.074538255322689,
            -0.078551192269374,
            -0.041505797075403,
            -0.000000000000000,
            0.022385930132719,
            0.022369335814967,
            0.010684193926980,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p5_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.5, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.5, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.002551224846890,
            0.009166673725052,
            0.012160475005230,
            -0.000000000000000,
            -0.030796008130127,
            -0.064166716075367,
            -0.065481437736847,
            0.000000000000000,
            0.140317366578957,
            0.320833580376834,
            0.474258525203955,
            0.534534765091686,
            0.474258525203955,
            0.320833580376834,
            0.140317366578957,
            0.000000000000000,
            -0.065481437736847,
            -0.064166716075367,
            -0.030796008130127,
            -0.000000000000000,
            0.012160475005230,
            0.009166673725052,
            0.002551224846890,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p6_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.6, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.6, 6, 4)
    h_truth = np.array(
        [
            -0.000000000000000,
            -0.002037611604380,
            0.000000000000000,
            0.003915770472363,
            -0.000000000000000,
            -0.020203709960919,
            -0.048863623811789,
            -0.055241899321712,
            0.000000000000000,
            0.134005061654464,
            0.317093493456330,
            0.478082788560402,
            0.542336078373247,
            0.478082788560402,
            0.317093493456330,
            0.134005061654464,
            0.000000000000000,
            -0.055241899321712,
            -0.048863623811789,
            -0.020203709960919,
            -0.000000000000000,
            0.003915770472363,
            0.000000000000000,
            -0.002037611604380,
            -0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p7_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.7, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.7, 6, 4)
    h_truth = np.array(
        [
            -0.000000000000000,
            -0.003169510215030,
            -0.004405420834287,
            -0.001440774824319,
            -0.000000000000000,
            -0.010762181248781,
            -0.033835236723870,
            -0.044400852446146,
            0.000000000000000,
            0.126455610350774,
            0.311961869812839,
            0.481569069768664,
            0.550484129814244,
            0.481569069768664,
            0.311961869812839,
            0.126455610350774,
            0.000000000000000,
            -0.044400852446146,
            -0.033835236723870,
            -0.010762181248781,
            -0.000000000000000,
            -0.001440774824319,
            -0.004405420834287,
            -0.003169510215030,
            -0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p8_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.8, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.8, 6, 4)
    h_truth = np.array(
        [
            -0.000000000000000,
            -0.002016108589650,
            -0.004745100074458,
            -0.003782732169878,
            0.000000000000000,
            -0.003248253086077,
            -0.020162114497092,
            -0.033552924400580,
            0.000000000000000,
            0.117822998304058,
            0.305482617295280,
            0.484730108054416,
            0.559018932542458,
            0.484730108054416,
            0.305482617295280,
            0.117822998304058,
            0.000000000000000,
            -0.033552924400580,
            -0.020162114497092,
            -0.003248253086077,
            0.000000000000000,
            -0.003782732169878,
            -0.004745100074458,
            -0.002016108589650,
            -0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p9_6_4():
    """
    MATLAB:
        >> h = rcosdesign(0.9, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.9, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            -0.000155185964730,
            -0.002656349129428,
            -0.003677403701620,
            0.000000000000000,
            0.001911245805414,
            -0.008699128685316,
            -0.023257758470762,
            0.000000000000000,
            0.108278898458258,
            0.297700614487866,
            0.487562968039053,
            0.567963945824557,
            0.487562968039053,
            0.297700614487866,
            0.108278898458258,
            0.000000000000000,
            -0.023257758470762,
            -0.008699128685316,
            0.001911245805414,
            0.000000000000000,
            -0.003677403701620,
            -0.002656349129428,
            -0.000155185964730,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_1p0_6_4():
    """
    MATLAB:
        >> h = rcosdesign(1.0, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(1.0, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.001142355611194,
            -0.000000000000000,
            -0.002121517563645,
            0.000000000000000,
            0.004667338640019,
            -0.000000000000000,
            -0.014002015920058,
            0.000000000000000,
            0.098014111440403,
            0.288675386671220,
            0.490070557202014,
            0.577350773342439,
            0.490070557202014,
            0.288675386671220,
            0.098014111440403,
            0.000000000000000,
            -0.014002015920058,
            -0.000000000000000,
            0.004667338640019,
            0.000000000000000,
            -0.002121517563645,
            -0.000000000000000,
            0.001142355611194,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)
