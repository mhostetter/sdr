import numpy as np
import pytest

import sdr


def test_exceptions():
    with pytest.raises(ValueError):
        # Alpha must be non-negative
        sdr.raised_cosine(-0.1, 6, 4)
    with pytest.raises(ValueError):
        # Need at least 1 samples per symbol
        sdr.raised_cosine(0.5, 6, 1)
    with pytest.raises(ValueError):
        # Need at least 2 symbols
        sdr.raised_cosine(0.5, 1, 4)
    with pytest.raises(ValueError):
        # The filter must have even order
        sdr.raised_cosine(0.5, 5, 3)


def test_0p1_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.1, 6, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.1, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.038872406382003,
            0.061231182126167,
            0.048652618776885,
            -0.000000000000000,
            -0.063746233445238,
            -0.105983228879395,
            -0.090512377468538,
            0.000000000000000,
            0.152274577211960,
            0.323969139242166,
            0.458965615237187,
            0.510080576909277,
            0.458965615237187,
            0.323969139242166,
            0.152274577211960,
            0.000000000000000,
            -0.090512377468538,
            -0.105983228879395,
            -0.063746233445238,
            -0.000000000000000,
            0.048652618776885,
            0.061231182126167,
            0.038872406382003,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p5_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.5, 5, 4, 'normal'); h'
    """
    h = sdr.raised_cosine(0.5, 5, 4)
    h_truth = np.array(
        [
            0.009166733389206,
            0.012160554155472,
            -0.000000000000000,
            -0.030796208575547,
            -0.064167133724443,
            -0.065481863943199,
            0.000000000000000,
            0.140318279878284,
            0.320835668622217,
            0.474261612063424,
            0.534538244277854,
            0.474261612063424,
            0.320835668622217,
            0.140318279878284,
            0.000000000000000,
            -0.065481863943199,
            -0.064167133724443,
            -0.030796208575547,
            -0.000000000000000,
            0.012160554155472,
            0.009166733389206,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p9_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.9, 6, 5, 'normal'); h'
    """
    h = sdr.raised_cosine(0.9, 6, 5)
    h_truth = np.array(
        [
            0.000000000000000,
            0.000087347868337,
            -0.001363257020297,
            -0.003179196519357,
            -0.002936842615739,
            0.000000000000000,
            0.002046647144249,
            -0.002469101444941,
            -0.014054366070751,
            -0.020928840397673,
            0.000000000000000,
            0.070539192530348,
            0.193056257032045,
            0.339907130444025,
            0.460995668606454,
            0.508002391550292,
            0.460995668606454,
            0.339907130444025,
            0.193056257032045,
            0.070539192530348,
            0.000000000000000,
            -0.020928840397673,
            -0.014054366070751,
            -0.002469101444941,
            0.002046647144249,
            0.000000000000000,
            -0.002936842615739,
            -0.003179196519357,
            -0.001363257020297,
            0.000087347868337,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)
