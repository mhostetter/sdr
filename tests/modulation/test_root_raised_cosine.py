import numpy as np
import pytest

import sdr


def test_exceptions():
    with pytest.raises(TypeError):
        sdr.root_raised_cosine("invalid", 6, 4)
    with pytest.raises(TypeError):
        sdr.root_raised_cosine(0.5, 6.0, 4)
    with pytest.raises(TypeError):
        sdr.root_raised_cosine(0.5, 6, 4.0)

    with pytest.raises(ValueError):
        # Alpha must be non-negative
        sdr.root_raised_cosine(-0.1, 6, 4)
    with pytest.raises(ValueError):
        # Need at least 1 samples per symbol
        sdr.root_raised_cosine(0.5, 6, 1)
    with pytest.raises(ValueError):
        # Need at least 2 symbols
        sdr.root_raised_cosine(0.5, 1, 4)
    with pytest.raises(ValueError):
        # The filter must have even order
        sdr.root_raised_cosine(0.5, 5, 3)


##############################################################################
# Test across alpha, even/odd span, even/odd sos
##############################################################################


def test_0p1_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.1, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.1, 6, 4)
    h_truth = np.array(
        [
            -0.012584683717650,
            0.027659902370502,
            0.058254053817777,
            0.055873292530461,
            0.013225271930828,
            -0.052370657918482,
            -0.103250163707181,
            -0.098107707453257,
            -0.013620609585221,
            0.140121460402837,
            0.319258502005088,
            0.462493232315085,
            0.517131236777947,
            0.462493232315085,
            0.319258502005088,
            0.140121460402837,
            -0.013620609585221,
            -0.098107707453257,
            -0.103250163707181,
            -0.052370657918482,
            0.013225271930828,
            0.055873292530461,
            0.058254053817777,
            0.027659902370502,
            -0.012584683717650,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p5_5_4():
    """
    Matlab:
        >> h = rcosdesign(0.5, 5, 4); h'
    """
    h = sdr.root_raised_cosine(0.5, 5, 4)
    h_truth = np.array(
        [
            -0.007504512238300,
            0.007736024298795,
            0.021225965972797,
            0.007736024298795,
            -0.037522561191500,
            -0.078440942080194,
            -0.053064914931994,
            0.078440942080194,
            0.289388587449134,
            0.487369530824083,
            0.568452009962539,
            0.487369530824083,
            0.289388587449134,
            0.078440942080194,
            -0.053064914931994,
            -0.078440942080194,
            -0.037522561191500,
            0.007736024298795,
            0.021225965972797,
            0.007736024298795,
            -0.007504512238300,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p9_6_5():
    """
    Matlab:
        >> h = rcosdesign(0.9, 6, 5); h'
    """
    h = sdr.root_raised_cosine(0.9, 6, 5)
    h_truth = np.array(
        [
            -0.002936931761839,
            0.002340139943481,
            0.005351630786723,
            0.000752575717900,
            -0.007678398881281,
            -0.008978259381110,
            0.002075468577656,
            0.014469349034797,
            0.008343729402040,
            -0.020968136291812,
            -0.044431622060621,
            -0.010478442450411,
            0.114376700316540,
            0.306432652267736,
            0.484542611420071,
            0.557217490185742,
            0.484542611420071,
            0.306432652267736,
            0.114376700316540,
            -0.010478442450411,
            -0.044431622060621,
            -0.020968136291812,
            0.008343729402040,
            0.014469349034797,
            0.002075468577656,
            -0.008978259381110,
            -0.007678398881281,
            0.000752575717900,
            0.005351630786723,
            0.002340139943481,
            -0.002936931761839,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


##############################################################################
# More detailed testing across alpha
##############################################################################


def test_0p0_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.0, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.0, 6, 4)
    h_truth = np.array(
        [
            0.000000000000000,
            0.041628469482581,
            0.064758700735410,
            0.050879240478710,
            -0.000000000000000,
            -0.065416166329770,
            -0.107931167892350,
            -0.091582632861678,
            0.000000000000000,
            0.152637721436129,
            0.323793503677051,
            0.457913164308388,
            0.508613646215961,
            0.457913164308388,
            0.323793503677051,
            0.152637721436129,
            0.000000000000000,
            -0.091582632861678,
            -0.107931167892350,
            -0.065416166329770,
            -0.000000000000000,
            0.050879240478710,
            0.064758700735410,
            0.041628469482581,
            0.000000000000000,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


# Already tested 0.1


def test_0p2_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.2, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.2, 6, 4)
    h_truth = np.array(
        [
            -0.018901920032795,
            0.010651011163846,
            0.042522966962866,
            0.052071610134360,
            0.023338021290631,
            -0.036108700734140,
            -0.092544265025858,
            -0.100192380464536,
            -0.026323640363226,
            0.126380452569491,
            0.314157295045796,
            0.468644491209237,
            0.528338422746741,
            0.468644491209237,
            0.314157295045796,
            0.126380452569491,
            -0.026323640363226,
            -0.100192380464536,
            -0.092544265025858,
            -0.036108700734140,
            0.023338021290631,
            0.052071610134360,
            0.042522966962866,
            0.010651011163846,
            -0.018901920032795,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p3_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.3, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.3, 6, 4)
    h_truth = np.array(
        [
            -0.016564663762462,
            -0.003143272710786,
            0.022517125891309,
            0.040476041673836,
            0.028310028847111,
            -0.019060866148456,
            -0.076833402786647,
            -0.097489445751017,
            -0.037516130152263,
            0.111388983579064,
            0.307798484792158,
            0.475384493252298,
            0.541207489462912,
            0.475384493252298,
            0.307798484792158,
            0.111388983579064,
            -0.037516130152263,
            -0.097489445751017,
            -0.076833402786647,
            -0.019060866148456,
            0.028310028847111,
            0.040476041673836,
            0.022517125891309,
            -0.003143272710786,
            -0.016564663762462,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p4_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.4, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.4, 6, 4)
    h_truth = np.array(
        [
            -0.007934084141152,
            -0.009551316712176,
            0.004244998566612,
            0.024245650115525,
            0.027363698648975,
            -0.003744722254875,
            -0.057779082008599,
            -0.090050018177363,
            -0.046595933445948,
            0.095289445229230,
            0.299616237233489,
            0.481797255162501,
            0.554761181002535,
            0.481797255162501,
            0.299616237233489,
            0.095289445229230,
            -0.046595933445948,
            -0.090050018177363,
            -0.057779082008599,
            -0.003744722254875,
            0.027363698648975,
            0.024245650115525,
            0.004244998566612,
            -0.009551316712176,
            -0.007934084141152,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p5_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.5, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.5, 6, 4)
    h_truth = np.array(
        [
            0.001516034308196,
            -0.008227494944468,
            -0.007503986978858,
            0.007735482835249,
            0.021224480314744,
            0.007735482835249,
            -0.037519934894290,
            -0.078435451803924,
            -0.053061200786861,
            0.078435451803924,
            0.289368332423475,
            0.487335418620697,
            0.568412222595146,
            0.487335418620697,
            0.289368332423475,
            0.078435451803924,
            -0.053061200786861,
            -0.078435451803924,
            -0.037519934894290,
            0.007735482835249,
            0.021224480314744,
            0.007735482835249,
            -0.007503986978858,
            -0.008227494944468,
            0.001516034308196,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p6_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.6, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.6, 6, 4)
    h_truth = np.array(
        [
            0.006692349083104,
            -0.002353423155866,
            -0.010914582845150,
            -0.004968337773496,
            0.011899896648977,
            0.014150774051666,
            -0.018308370949625,
            -0.063668399930041,
            -0.056602588673768,
            0.061320020890552,
            0.277127665247037,
            0.491865439576081,
            0.582030577066276,
            0.491865439576081,
            0.277127665247037,
            0.061320020890552,
            -0.056602588673768,
            -0.063668399930041,
            -0.018308370949625,
            0.014150774051666,
            0.011899896648977,
            -0.004968337773496,
            -0.010914582845150,
            -0.002353423155866,
            0.006692349083104,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p7_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.7, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.7, 6, 4)
    h_truth = np.array(
        [
            0.005857604524586,
            0.003476008701297,
            -0.007503112231804,
            -0.011380336362993,
            0.002043138818634,
            0.015367979995610,
            -0.002108577129829,
            -0.047055785104255,
            -0.057122931924559,
            0.044459969290186,
            0.263092736531645,
            0.495417894894475,
            0.595671651215418,
            0.495417894894475,
            0.263092736531645,
            0.044459969290186,
            -0.057122931924559,
            -0.047055785104255,
            -0.002108577129829,
            0.015367979995610,
            0.002043138818634,
            -0.011380336362993,
            -0.007503112231804,
            0.003476008701297,
            0.005857604524586,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p8_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.8, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.8, 6, 4)
    h_truth = np.array(
        [
            0.001173021892141,
            0.005833223478906,
            -0.001010571158746,
            -0.011269202348137,
            -0.005832792809970,
            0.012278529485443,
            0.009688322898964,
            -0.030012432207271,
            -0.054719665843376,
            0.028337011214733,
            0.247455275923685,
            0.497977699600998,
            0.609334156247641,
            0.497977699600998,
            0.247455275923685,
            0.028337011214733,
            -0.054719665843376,
            -0.030012432207271,
            0.009688322898964,
            0.012278529485443,
            -0.005832792809970,
            -0.011269202348137,
            -0.001010571158746,
            0.005833223478906,
            0.001173021892141,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p9_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.9, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.9, 6, 4)
    h_truth = np.array(
        [
            -0.003283581301483,
            0.004037629718684,
            0.004501789234053,
            -0.006470587492613,
            -0.010037973985891,
            0.006509750711189,
            0.016419054427330,
            -0.013922004440856,
            -0.049675939117312,
            0.013389440531209,
            0.230416475319879,
            0.499509157398393,
            0.622986531524826,
            0.499509157398393,
            0.230416475319879,
            0.013389440531209,
            -0.049675939117312,
            -0.013922004440856,
            0.016419054427330,
            0.006509750711189,
            -0.010037973985891,
            -0.006470587492613,
            0.004501789234053,
            0.004037629718684,
            -0.003283581301483,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_1p0_6_4():
    """
    Matlab:
        >> h = rcosdesign(1.0, 6, 4); h'
    """
    h = sdr.root_raised_cosine(1.0, 6, 4)
    h_truth = np.array(
        [
            -0.004452022763640,
            0.000000000000000,
            0.006430699547479,
            -0.000000000000000,
            -0.010105385003182,
            0.000000000000000,
            0.018189693005728,
            -0.000000000000000,
            -0.042442617013365,
            0.000000000000000,
            0.212213085066823,
            0.500015301781167,
            0.636639255200468,
            0.500015301781167,
            0.212213085066823,
            0.000000000000000,
            -0.042442617013365,
            -0.000000000000000,
            0.018189693005728,
            0.000000000000000,
            -0.010105385003182,
            -0.000000000000000,
            0.006430699547479,
            0.000000000000000,
            -0.004452022763640,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)
