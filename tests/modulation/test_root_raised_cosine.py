import numpy as np
import pytest

import sdr


def test_exceptions():
    with pytest.raises(ValueError):
        # Alpha must be non-negative
        sdr.root_raised_cosine(-0.1, 6, 4)
    with pytest.raises(ValueError):
        # Need at least 1 samples per symbol
        sdr.root_raised_cosine(0.5, 6, 1)
    with pytest.raises(ValueError):
        # Need at least 2 symbols
        sdr.root_raised_cosine(0.5, 1, 4)
    with pytest.raises(ValueError):
        # The filter must have even order
        sdr.root_raised_cosine(0.5, 5, 3)


def test_0p1_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.1, 6, 4); h'
    """
    h = sdr.root_raised_cosine(0.1, 6, 4)
    h_truth = np.array(
        [
            -0.012584683717650,
            0.027659902370502,
            0.058254053817777,
            0.055873292530461,
            0.013225271930828,
            -0.052370657918482,
            -0.103250163707181,
            -0.098107707453257,
            -0.013620609585221,
            0.140121460402837,
            0.319258502005088,
            0.462493232315085,
            0.517131236777947,
            0.462493232315085,
            0.319258502005088,
            0.140121460402837,
            -0.013620609585221,
            -0.098107707453257,
            -0.103250163707181,
            -0.052370657918482,
            0.013225271930828,
            0.055873292530461,
            0.058254053817777,
            0.027659902370502,
            -0.012584683717650,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p5_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.5, 5, 4); h'
    """
    h = sdr.root_raised_cosine(0.5, 5, 4)
    h_truth = np.array(
        [
            -0.007504512238300,
            0.007736024298795,
            0.021225965972797,
            0.007736024298795,
            -0.037522561191500,
            -0.078440942080194,
            -0.053064914931994,
            0.078440942080194,
            0.289388587449134,
            0.487369530824083,
            0.568452009962539,
            0.487369530824083,
            0.289388587449134,
            0.078440942080194,
            -0.053064914931994,
            -0.078440942080194,
            -0.037522561191500,
            0.007736024298795,
            0.021225965972797,
            0.007736024298795,
            -0.007504512238300,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)


def test_0p9_6_4():
    """
    Matlab:
        >> h = rcosdesign(0.9, 6, 5); h'
    """
    h = sdr.root_raised_cosine(0.9, 6, 5)
    h_truth = np.array(
        [
            -0.002936931761839,
            0.002340139943481,
            0.005351630786723,
            0.000752575717900,
            -0.007678398881281,
            -0.008978259381110,
            0.002075468577656,
            0.014469349034797,
            0.008343729402040,
            -0.020968136291812,
            -0.044431622060621,
            -0.010478442450411,
            0.114376700316540,
            0.306432652267736,
            0.484542611420071,
            0.557217490185742,
            0.484542611420071,
            0.306432652267736,
            0.114376700316540,
            -0.010478442450411,
            -0.044431622060621,
            -0.020968136291812,
            0.008343729402040,
            0.014469349034797,
            0.002075468577656,
            -0.008978259381110,
            -0.007678398881281,
            0.000752575717900,
            0.005351630786723,
            0.002340139943481,
            -0.002936931761839,
        ]
    )
    np.testing.assert_almost_equal(h, h_truth)
