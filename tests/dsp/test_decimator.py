import numpy as np

import sdr


def debug_plot(y, y_truth):
    import matplotlib.pyplot as plt

    plt.figure()
    sdr.plot.time_domain(y, label="Test")
    sdr.plot.time_domain(y_truth, label="Truth")
    plt.legend()
    plt.show()


# def test_non_streaming_rate():
#     mode = "rate"
#     N = 50
#     x = np.random.randn(N) + 1j * np.random.randn(N)  # Input signal
#     r = np.random.randint(3, 7)  # Interpolation rate

#     fir = sdr.Decimator(r)
#     y = fir(x, mode)

#     # The output should align with the input. Every r-th sample should match.
#     np.testing.assert_array_almost_equal(y[::r], x)


# def test_non_streaming_full():
#     mode = "full"
#     N = 50
#     x = np.random.randn(N) + 1j * np.random.randn(N)  # Input signal
#     r = np.random.randint(3, 7)  # Interpolation rate

#     fir = sdr.Decimator(r)
#     y = fir(x, mode)

#     xr = np.zeros(N * r, dtype=complex)
#     xr[::r] = x[:]
#     y_truth = scipy.signal.convolve(xr, fir.taps, mode=mode)

#     # Given the polyphase decomposition, the polyphase output is slightly shorter
#     np.testing.assert_array_almost_equal(y, y_truth[: y.size])


def test_streaming_match_full():
    N = 360
    x = np.random.randn(N) + 1j * np.random.randn(N)  # Input signal
    r = np.random.randint(3, 7)  # Interpolation rate

    fir1 = sdr.Decimator(r)
    y_full = fir1(x, mode="full")

    fir2 = sdr.Decimator(r, streaming=True)

    d = 3 * r  # Stride
    y_stream = np.zeros_like(y_full)
    for i in range(0, N, d):
        y_stream[i // r : (i + d) // r] = fir2(x[i : i + d])
    y_stream[(i + d) // r :] = fir2.flush()

    # import matplotlib.pyplot as plt

    # plt.figure()
    # sdr.plot.time_domain(x, marker="o")
    # sdr.plot.time_domain(y_full, sample_rate=1 / fir1.rate, offset=-fir1.delay, marker=".")
    # sdr.plot.time_domain(y_stream, sample_rate=1 / fir2.rate, offset=-fir2.delay, marker=".")
    # plt.show()

    np.testing.assert_array_almost_equal(y_full, y_stream)


def test_3_kaiser():
    """
    MATLAB:
        >> x = cos(pi/7.123456*(0:359)');
        >> fir = dsp.FIRDecimator(3);
        >> y = fir(x);
    """
    x = np.cos(np.pi / 7.123456 * np.arange(360))
    y_truth = np.array(
        [
            0,
            -0.000096082999641,
            0.000399532693434,
            -0.000983006068698,
            0.002043823968804,
            -0.003880436631793,
            0.006772279818675,
            -0.011137944059925,
            0.017789864914988,
            -0.028279367027990,
            0.046633097596274,
            -0.088744681098256,
            0.666669842400057,
            0.333953778850932,
            -0.926385209612499,
            -0.648373433691359,
            0.530121509264234,
            0.956494745536571,
            -0.091066421958456,
            -0.982815483360678,
            -0.401640241009411,
            0.791710816970646,
            0.786981727503055,
            -0.404488083680543,
            -0.985795436928769,
            -0.078864782025895,
            0.947118958491074,
            0.543346202439685,
            -0.680653786800604,
            -0.877149084188407,
            0.250486647936046,
            0.999991513837776,
            0.239924270972282,
            -0.882329033138950,
            -0.672631734919185,
            0.552460286610634,
            0.943566590933404,
            -0.089721000819139,
            -0.987567122786144,
            -0.394596809349572,
            0.794050896704639,
            0.784011343897387,
            -0.409559910256484,
            -0.984865700316934,
            -0.073433081594121,
            0.948853009684557,
            0.538764906863813,
            -0.684634574433411,
            -0.874520026900530,
            0.255756764910721,
            0.999947001391070,
            0.234632324422465,
            -0.884879771086270,
            -0.668590708725521,
            0.556992804744630,
            0.941748379985972,
            -0.095145197021559,
            -0.988409019456785,
            -0.389585491970783,
            0.797350418991762,
            0.780618162007146,
            -0.414523500113971,
            -0.983906737746965,
            -0.067999202030544,
            0.950558903599007,
            0.534167623401867,
            -0.688595045487620,
            -0.871865018170049,
            0.261019292285614,
            0.999872815447576,
            0.229333415142106,
            -0.887404250164856,
            -0.664529842056089,
            0.561508794078418,
            0.939902222589886,
            -0.100566569783643,
            -0.989221585021047,
            -0.384562613615435,
            0.800626279849765,
            0.777201815218670,
            -0.419474788957770,
            -0.982918577676145,
            -0.062563304585915,
            0.952236589611901,
            0.529554488478558,
            -0.692535082435977,
            -0.869184136784535,
            0.266274073894862,
            0.999768958208759,
            0.224027700376706,
            -0.889902395460620,
            -0.660449255417390,
            0.566008120599700,
            0.938028173529994,
            -0.105984958225775,
            -0.990004795365998,
            -0.379528323337787,
            0.803878382067244,
            0.773762404912291,
            -0.424413629858042,
            -0.981901249428191,
            -0.057125550570875,
            0.953886017937789,
            0.524925638988986,
            -0.696454568357611,
            -0.866477462299329,
            0.271520953802453,
            0.999635432756596,
            0.218715337573723,
            -0.892374132840927,
            -0.656349069901117,
            0.570490650790645,
            0.936126288418826,
            -0.111400201556902,
            -0.990758627249815,
            -0.374482770530751,
            0.807106629137843,
            0.770300033152752,
            -0.429339876254340,
            -0.980854783192394,
        ]
    )

    fir = sdr.Decimator(3, streaming=True)
    y = fir(x)

    # debug_plot(y, y_truth)
    np.testing.assert_almost_equal(y, y_truth)


def test_4_kaiser():
    """
    MATLAB:
        >> x = cos(pi/7.123456*(0:359)');
        >> fir = dsp.FIRDecimator(4);
        >> y = fir(x);
    """
    x = np.cos(np.pi / 7.123456 * np.arange(360))
    y_truth = np.array(
        [
            0,
            -0.000085173729527,
            0.000407569448823,
            -0.001129143725064,
            0.002439423598279,
            -0.004630983925132,
            0.008135789467235,
            -0.013527158968588,
            0.021662135902415,
            -0.034264137174837,
            0.055852487854617,
            -0.103265267719336,
            0.625009545047492,
            -0.088824206372575,
            -0.982076254595520,
            0.582182490949012,
            0.694066952358320,
            -0.809353994052207,
            -0.407737296785700,
            0.981027693093656,
            0.022058183750758,
            -0.984678850805501,
            0.353814271861846,
            0.849811191659482,
            -0.680662457341059,
            -0.588234822892203,
            0.906645578845627,
            0.239927327258955,
            -0.998818847476074,
            0.143790521780394,
            0.943578610601048,
            -0.506286639844530,
            -0.749077654867775,
            0.794061011759541,
            0.444021954118517,
            -0.964641642662871,
            -0.073434017024903,
            0.992852907528685,
            -0.307991887233974,
            -0.874531167015252,
            0.643961937431692,
            0.627139269957143,
            -0.884891043169084,
            -0.287189249413343,
            0.995221000729034,
            -0.095146409033151,
            -0.958668451174853,
            0.463439615510225,
            0.780628105948521,
            -0.763334775149172,
            -0.487376553119579,
            0.950571012338554,
            0.122194152792030,
            -0.997514537276060,
            0.261022617292215,
            0.897237057019174,
            -0.605715625907113,
            -0.664538307200910,
            0.861012380156128,
            0.333761791174391,
            -0.989234186266995,
            0.046273903095641,
            0.971457066214263,
            -0.419480132457209,
            -0.810304706556694,
            0.730776199659069,
            0.529561234233457,
            -0.934218593891173,
            -0.170660968898735,
            0.999781693812915,
            -0.213426778372173,
            -0.917789183828437,
            0.566015330720913,
            0.700342160500489,
            -0.835066909090589,
            -0.379533157977282,
            0.980872775075355,
            0.002709680542664,
            -0.981913757423697,
            0.374513712761188,
            0.838036219810545,
            -0.696463440177070,
            -0.570474735688981,
            0.915623640310468,
            0.218718123689397,
            -0.999648934967344,
            0.165318621401487,
            0.936138213307825,
            -0.524956350026375,
            -0.734464884875273,
        ]
    )

    fir = sdr.Decimator(4, streaming=True)
    y = fir(x)

    # debug_plot(y, y_truth)
    np.testing.assert_almost_equal(y, y_truth)


def test_5_kaiser():
    """
    MATLAB:
        >> x = cos(pi/7.123456*(0:359)');
        >> fir = dsp.FIRDecimator(5);
        >> y = fir(x);
    """
    x = np.cos(np.pi / 7.123456 * np.arange(360))
    y_truth = np.array(
        [
            0,
            -0.000068116888033,
            0.000354443148488,
            -0.001109591528971,
            0.002672556402923,
            -0.005460124762918,
            0.009982408798645,
            -0.016918107599809,
            0.027317991448131,
            -0.043160756245167,
            0.069197205380483,
            -0.121950781463921,
            0.600000109459693,
            -0.470669568134069,
            -0.366799820553035,
            0.988511760313246,
            -0.850183616030631,
            0.046860718245549,
            0.777394022775617,
            -0.957712873870112,
            0.351542600452785,
            0.544452461893481,
            -0.998561542595859,
            0.639840668008012,
            0.239922799634664,
            -0.924138755658750,
            0.855403825488183,
            -0.089720450604344,
            -0.749063519161667,
            0.977540825436627,
            -0.409557398626876,
            -0.492116834195945,
            0.992834171584796,
            -0.684630375906102,
            -0.181382563797529,
            0.899612325579729,
            -0.884874344553602,
            0.149176531659354,
            0.708064286573188,
            -0.988402958030127,
            0.463430870026813,
            0.439125949857931,
            -0.983900703930589,
            0.727032953113384,
            0.122191846888736,
            -0.871859671450464,
            0.911171493478720,
            -0.208097630144108,
            -0.664525766821221,
            0.995720442219135,
            -0.515642367956632,
            -0.384560255281957,
            0.971438734027344,
            -0.766828217001411,
            -0.062562920915920,
            0.840980320898206,
            -0.934200964424590,
            0.266272440966857,
            0.618604099406682,
            -0.999467035762624,
            0.566004649550121,
            0.328615436044084,
            -0.955492953467062,
            0.803873452276277,
            0.002709629408783,
            -0.807085014628230,
            0.953880168223727,
            -0.323492335401139,
            -0.570463970365580,
            0.999629302483862,
            -0.614337103671259,
            -0.271492123589855,
        ]
    )

    fir = sdr.Decimator(5, streaming=True)
    y = fir(x)

    # debug_plot(y, y_truth)
    np.testing.assert_almost_equal(y, y_truth)


def test_6_kaiser():
    """
    MATLAB:
        >> x = cos(pi/7.123456*(0:359)');
        >> fir = dsp.FIRDecimator(6);
        >> y = fir(x);
    """
    x = np.cos(np.pi / 7.123456 * np.arange(360))
    y_truth = np.array(
        [
            0,
            -0.000048402233230,
            0.000247035469608,
            -0.000814410410259,
            0.002130513803705,
            -0.004784788172968,
            0.009621938392077,
            -0.017801783663901,
            0.030935339795451,
            -0.051498963221230,
            0.084300726836015,
            -0.143711549416578,
            0.577807929438438,
            -0.726313065174654,
            0.457552342499542,
            -0.031863131084387,
            -0.426113383677636,
            0.796476899167546,
            -0.984517347411487,
            0.941431368020053,
            -0.675258251086519,
            0.248531405179791,
            0.237024371478594,
            -0.665145983710004,
            0.933133491133759,
            -0.976647505188531,
            0.785271005247141,
            -0.405031369866545,
            -0.072621125473345,
            0.532807735323545,
            -0.864850381106463,
            0.988890498373569,
            -0.875095576678436,
            0.550834085714703,
            -0.094093168107520,
            -0.385277810502109,
            0.771986797493086,
            -0.973027593352608,
            0.940048489175705,
            -0.680981188765536,
            0.258133178732831,
            0.226797655153823,
            -0.657182076430819,
            0.929509640037246,
            -0.978283673887212,
            0.791773683795437,
            -0.414836618871331,
            -0.061871536557232,
            0.523699157354362,
            -0.859573490402524,
            0.988714423830574,
            -0.880062665447928,
            0.559749718419750,
            -0.104813073107060,
            -0.375331844878053,
            0.765206845114782,
            -0.971044279896719,
            0.943338815315039,
            -0.688753808191438,
            0.268518722443338,
        ]
    )

    fir = sdr.Decimator(6, streaming=True)
    y = fir(x)

    # debug_plot(y, y_truth)
    np.testing.assert_almost_equal(y, y_truth)
